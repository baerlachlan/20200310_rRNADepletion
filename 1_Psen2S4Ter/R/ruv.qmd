---
title: "rRNADepletion_s4ter"
author: "Lachlan Baer"
date: "`r format(Sys.time(), '%d %B, %Y')`"
output:
  html_document:
    toc: true
    toc_float: true
    toc_depth: 3
    fig_width: 8
    fig_height: 6
    fig_align: "center"
    code_folding: hide
editor_options: 
  chunk_output_type: console
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
    echo = TRUE,
    message = FALSE,
    warning = FALSE,
    error = FALSE, 
    fig.align = "center"
)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
```

# Setup 

```{r packages}
library(tidyverse)
library(magrittr)
library(parallel)
library(here)
library(scales)
library(AnnotationHub)
library(Biostrings)
library(Rsamtools)
library(cqn)
library(DT)
library(edgeR)
library(pander)
library(RUVSeq)
```

```{r options}
if (interactive()) setwd(here::here())
theme_set(theme_bw())
```

```{r}
displayRes_de <- function(x){
    de <- x %>%
        dplyr::filter(DE)
    de %>%
        dplyr::slice(1:1000) %>%
        dplyr::select(-gene_biotype, -coef, -DE) %>%
        mutate(across(c("P.Value", "FDR", "Bonf"), ~ sprintf("%.2e", .x))) %>%
        datatable(
            options = list(pageLength = 10), 
            class = "striped hover condensed responsive", 
            filter = "top",
            caption = paste0(
                x$coef[1],
                ": ",
                nrow(de),
                " of ",
                nrow(x),
                " genes were classified as differentially expressed ",
                "with a FDR < 0.05. ",
                "If more than 1000 genes were classified as DE, only the top 1000 are shown."
            )
        ) %>%
        formatRound(c("logFC", "logCPM", "F"), digits = 2)
}
```

# Load data

```{r load_data}
dgeFilt <- readRDS(here("1_Psen2S4Ter/Rdata/dgeFilt.Rds"))
tt_g <- readRDS(here("1_Psen2S4Ter/Rdata/tt_g.Rds"))
```

# RUVg

## Control genes

Obtain a set of in silico empirical negative controls from a first pass DE analysis.
Define these as genes with a raw p-values > 0.1 in both comparisons (Het vs WT, Hom vs WT).

```{r}
ctrl_genes <- bind_rows(tt_g) %>%
    dplyr::filter(P.Value > 0.1) %>%
    group_by(Geneid) %>%
    tally() %>%
    dplyr::filter(n == 2) %>%
    pull(Geneid)
```

Try $k = 1$

```{r}
ruvg <- lapply(1:3, \(x){
    RUVg(dgeFilt$counts, ctrl_genes, k = x)
}) %>%
    set_names(c("k1", "k2", "k3"))
```

```{r}
pca_ruvg <- lapply(ruvg, \(x){
    x$normalizedCounts %>%
        cpm(log = TRUE) %>%
        t() %>%
        prcomp()
})
```

```{r}
pca_ruvg$k1$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    left_join(dgeFilt$samples) %>%
    as_tibble() %>%
    ggplot(aes(PC1, PC2)) +
    geom_point(aes(colour = group), size = 2) +
    labs(
        x = paste0("PC1 (", percent(summary(pca_ruvg$k1)$importance["Proportion of Variance","PC1"]),")"),
        y = paste0("PC2 (", percent(summary(pca_ruvg$k1)$importance["Proportion of Variance","PC2"]),")"),
        colour = "Genotype"
    )
```

## Differential expression

```{r}
dge_ruvg <- lapply(ruvg, \(x){
    dge <- dgeFilt
    dge$samples <- cbind(dge$samples, x$W)
    dge
})
design_ruvg <- map2(dge_ruvg, ruvg, \(x, y){
    paste(
        "~ group",
        paste(colnames(y$W), collapse = " + "),
        sep = " + "
    ) %>%
        as.formula() %>%
        model.matrix(data = x$samples) %>%
        set_colnames(str_remove(colnames(.), "group"))
})
```

```{r}
disp_ruvg <- map2(dge_ruvg, design_ruvg, \(x, y){
    estimateDisp(x, y)
})
plotBCV(disp_ruvg$k1)
```

```{r}
fit_ruvg <- lapply(disp_ruvg, \(x){
    glmQLFit(x)
})
plotQLDisp(fit_ruvg$k1)
```

```{r}
tt_ruvg <- map2(design_ruvg, fit_ruvg, \(x, y){
    colnames(x) %>%
        str_subset("Intercept", negate = TRUE) %>%
        sapply(function(z){
            glmQLFTest(y, coef = z) %>%
                topTags(n = Inf) %>%
                .[["table"]] %>%
                rename_all(
                    str_remove, pattern = "ID."
                ) %>%
                dplyr::select(
                    Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, 
                    P.Value = PValue, FDR
                ) %>%
                as_tibble() %>%
                mutate(
                    Bonf = p.adjust(P.Value, "bonf"), 
                    coef = z,
                    DE = FDR < 0.05
                )
        },
        simplify = FALSE)
})
```

```{r}
displayRes_de(tt_ruvg$k1$Heter)
displayRes_de(tt_ruvg$k1$Hom)
displayRes_de(tt_ruvg$k2$Heter)
displayRes_de(tt_ruvg$k2$Hom)
displayRes_de(tt_ruvg$k3$Heter)
displayRes_de(tt_ruvg$k3$Hom)
```

# RUVr

Get the residuals from a firt pass GLM regression of the counts due to genotype

```{r}
design_g <- model.matrix(~group, data = dgeFilt$samples)
disp_g <- estimateDisp(dgeFilt, design_g)
fit_g <- glmQLFit(disp_g)
residuals_g <- residuals(fit_g, type = "deviance")
```

```{r}
ruvr <- lapply(1:3, \(x){
    RUVr(dgeFilt$counts, rownames(dgeFilt), k = x, residuals_g)
}) %>%
    set_names(c("k1", "k2", "k3"))
```

```{r}
pca_ruvr <- lapply(ruvr, \(x){
    x$normalizedCounts %>%
        cpm(log = TRUE) %>%
        t() %>%
        prcomp()
})
```

```{r}
pca_ruvr$k1$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    left_join(dgeFilt$samples) %>%
    as_tibble() %>%
    ggplot(aes(PC1, PC2)) +
    geom_point(aes(colour = group), size = 2) +
    labs(
        x = paste0("PC1 (", percent(summary(pca_ruvr$k1)$importance["Proportion of Variance","PC1"]),")"),
        y = paste0("PC2 (", percent(summary(pca_ruvr$k1)$importance["Proportion of Variance","PC2"]),")"),
        colour = "Genotype"
    )
```

## Differential expression

```{r}
dge_ruvr <- lapply(ruvr, \(x){
    dge <- dgeFilt
    dge$samples <- cbind(dge$samples, x$W)
    dge
})
design_ruvr <- map2(dge_ruvr, ruvr, \(x, y){
    paste(
        "~ group",
        paste(colnames(y$W), collapse = " + "),
        sep = " + "
    ) %>%
        as.formula() %>%
        model.matrix(data = x$samples) %>%
        set_colnames(str_remove(colnames(.), "group"))
})
```

```{r}
disp_ruvr <- map2(dge_ruvr, design_ruvr, \(x, y){
    estimateDisp(x, y)
})
plotBCV(disp_ruvr$k1)
```

```{r}
fit_ruvr <- lapply(disp_ruvr, \(x){
    glmQLFit(x)
})
plotQLDisp(fit_ruvr$k1)
```

```{r}
tt_ruvr <- map2(design_ruvr, fit_ruvr, \(x, y){
    colnames(x) %>%
        str_subset("Intercept", negate = TRUE) %>%
        sapply(function(z){
            glmQLFTest(y, coef = z) %>%
                topTags(n = Inf) %>%
                .[["table"]] %>%
                rename_all(
                    str_remove, pattern = "ID."
                ) %>%
                dplyr::select(
                    Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, 
                    P.Value = PValue, FDR
                ) %>%
                as_tibble() %>%
                mutate(
                    Bonf = p.adjust(P.Value, "bonf"), 
                    coef = z,
                    DE = FDR < 0.05
                )
        },
        simplify = FALSE)
})
```

```{r}
displayRes_de(tt_ruvr$k1$Heter)
displayRes_de(tt_ruvr$k1$Hom)
displayRes_de(tt_ruvr$k2$Heter)
displayRes_de(tt_ruvr$k2$Hom)
displayRes_de(tt_ruvr$k3$Heter)
displayRes_de(tt_ruvr$k3$Hom)
```

# Session information

```{r}
sessionInfo() %>%
    pander()
```

