---
title: "rRNADepletion_s4ter"
subtitle: "k-mer analysis"
author: "Lachlan Baer"
date-modified: today
date-format: "DD MMMM, YYYY"
modified-title: "LAST MODIFIED"
code-fold: true
fig-width: 8
fig-height: 6
fig-align: center
editor_options:
  chunk_output_type: console
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
    echo = TRUE,
    message = FALSE,
    warning = FALSE,
    error = FALSE,
    fig.align = "center"
)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
```

# Setup 

```{r packages}
library(tidyverse)
library(magrittr)
library(parallel)
library(pander)
library(here)
library(scales)
library(ggpubr)
library(kableExtra)
library(edgeR)
library(DT)
library(ggrepel)
library(pheatmap)
library(ggdendro)
```

```{r options}
if (interactive()) setwd(here::here())
theme_set(theme_bw())
```

```{r loadObjects}
# load(
#     here::here("1_Psen2S4Ter/R/output/1_1_DE.RData")
# )
```

# Load data

```{r load_data}
addInfo <- readRDS(here("1_Psen2S4Ter/Rdata/addInfo.Rds"))
```

# k-mer analysis

`jellyfish v2.3.0` was used to count kmers of trimmed `fastq` files that had been filtered for rRNA sequences. This was performed for 5 values: $k = 5, 6, 7, 8, 9, 10$. Lower values of $k$ lose specificity in comparison to higher values, however as $k$ increases, the exponential increase of possible kmers causes limitations due to computational processing time. 

## k = 5

### Counts

```{r k5counts}
k5files <- list.files(
    "/mnt/phoenix/hpcfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k5",
    pattern = ".dumps", full.names = TRUE
)
k5counts <- lapply(k5files, function(x){
    read_delim(x, col_names = c("mer", basename(x)), delim = " ") %>%
        set_colnames(str_remove_all(colnames(.), "_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\.dumps"))
}) %>%
    purrr::reduce(full_join)
# %>%
    # dplyr::select(mer, contains(c("WT", "Heter")))
```

```{r k5dge}
k5dge <- k5counts %>%
    as.data.frame() %>%
    column_to_rownames("mer") %>%
    DGEList() %>%
    calcNormFactors()
k5dge$samples %<>%
    rownames_to_column("rowname") %>%
    mutate(sample = rowname) %>%
    left_join(addInfo) %>%
    column_to_rownames("rowname")
k5dge$samples$group <- colnames(k5dge) %>%
    str_extract("(WT|Heter|Hom)") %>%
    factor(levels = c("WT", "Heter", "Hom"))
```

### Properties

```{r k5dist}
k5dist <- k5dge %>%
    cpm(log = TRUE) %>%
    as.data.frame() %>%
    pivot_longer(everything(), names_to = "sample", values_to = "count") %>%
    ggplot(aes(x=count, colour = sample)) +
    geom_density() +
    labs(x = "intensity", title = "Distribution of 5-mers")
```

```{r k5den, results="hide"}
k5labels <- k5dge$samples %>% 
    mutate(label = paste0(sample, "\n", percent(rRNA, accuracy = 0.01), " rRNA")) %>% 
    .$label
k5heat <- k5dge %>% 
    cpm(log = TRUE) %>%
    as.data.frame() %>%
    t() %>%
    pheatmap(silent = TRUE, cluster_cols = FALSE,
             show_colnames = FALSE, fontsize = 9,
             fontsize_row = 10, border_color = NA,
             main = "5-mer counts heatmap", labels_row = k5labels)
k5heat$tree_row$labels <- k5labels
k5den <- ggdendrogram(k5heat$tree_row, rotate = TRUE) +
    labs(title = "Hierarchical clustering of 5-mer counts") +
    theme(plot.title = element_text(size = 12))
```

```{r k5pca}
# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes
k5pca <- k5dge %>%
    cpm(log = TRUE) %>%
    t() %>%
    prcomp()
```

```{r k5pcaSum, results="hide"}
# Quick inspection to check whether first two PCA components capture most of the variability
summary(k5pca)$importance %>% pander(split.tables = Inf)
```

```{r k5pcaPlot, fig.align = "center"}
k5pcaPlot <- k5pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    as_tibble() %>%
    dplyr::select(sample, PC1, PC2) %>%
    left_join(k5dge$samples) %>%
    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +
    geom_point(alpha = 0.8, size = 3) +
    geom_text_repel(show.legend = FALSE) +
    labs(
        x = paste0("PC1 (", percent(summary(k5pca)$importance[2, "PC1"]), ")"),
        y = paste0("PC2 (", percent(summary(k5pca)$importance[2, "PC2"]), ")"),
        colour = "Genotype",
        title = "k = 5"
    ) +
    scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

```{r k5pcaRrna, fig.align = "center"}
k5pcaRrna <- k5pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    as_tibble() %>%
    dplyr::select(sample, PC1, PC2) %>%
    left_join(k5dge$samples) %>%
    ggplot(aes(PC1, rRNA, label = rRNA)) +
    geom_point(aes(colour = group), alpha = 0.8, size = 3) +
    geom_text_repel(show.legend = FALSE) +
    geom_smooth(method = "lm") +
    labs(
        x = paste0("PC1 (", percent(summary(k5pca)$importance[2, "PC1"]), ")"),
        y = "rRNA proportion",
        colour = "Genotype",
        title = "k = 5"
    ) +
    scale_y_continuous(labels = percent) +
    scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

### Differential expression

```{r}
k5design <- model.matrix(~rRNA, data = k5dge$samples)
k5disp <- estimateDisp(k5dge, k5design)
k5fit <- glmQLFit(k5disp)
k5topTable <- glmQLFTest(k5fit) %>%
    topTags(n = Inf) %>%
    .[["table"]] %>%
    rownames_to_column("mer") %>%
    dplyr::select(
        mer,
        logFC,
        logCPM,
        F,
        P.Value = PValue,
        FDR,
    ) %>%
    as_tibble() %>%
    mutate(
        BY = p.adjust(P.Value, "BY"),
        DE = BY < 0.05
    )
```

## k = 6

### Counts

```{r k6counts}
k6files <- list.files(
    "/mnt/phoenix/hpcfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k6",
    pattern = ".dumps", full.names = TRUE
)
k6counts <- lapply(k6files, function(x){
    read_delim(x, col_names = c("mer", basename(x)), delim = " ") %>%
        set_colnames(str_remove_all(colnames(.), "_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\.dumps"))
}) %>%
    purrr::reduce(full_join)
# %>%
    # dplyr::select(mer, contains(c("WT", "Heter")))
```

```{r k6dge}
k6dge <- k6counts %>%
    as.data.frame() %>%
    column_to_rownames("mer") %>%
    DGEList() %>%
    calcNormFactors()
k6dge$samples %<>%
    rownames_to_column("rowname") %>%
    mutate(sample = rowname) %>%
    left_join(addInfo) %>%
    column_to_rownames("rowname")
k6dge$samples$group <- colnames(k6dge) %>%
    str_extract("(WT|Heter|Hom)") %>%
    factor(levels = c("WT", "Heter", "Hom"))
```

### Properties

```{r k6dist}
k6dist <- k6dge %>%
    cpm(log = TRUE) %>%
    as.data.frame() %>%
    pivot_longer(everything(), names_to = "sample", values_to = "count") %>%
    ggplot(aes(x=count, colour = sample)) +
    geom_density() +
    labs(x = "intensity", title = "Distribution of 6-mers")
```

```{r k6den, results="hide"}
k6labels <- k6dge$samples %>% 
    mutate(label = paste0(sample, "\n", percent(rRNA, accuracy = 0.01), " rRNA")) %>% 
    .$label
k6heat <- k6dge %>% 
    cpm(log = TRUE) %>%
    as.data.frame() %>%
    t() %>%
    pheatmap(silent = TRUE, cluster_cols = FALSE,
             show_colnames = FALSE, fontsize = 9,
             fontsize_row = 10, border_color = NA,
             main = "6-mer counts heatmap", labels_row = k6labels)
k6heat$tree_row$labels <- k6labels
k6den <- ggdendrogram(k6heat$tree_row, rotate = TRUE) +
    labs(title = "Hierarchical clustering of 6-mer counts") +
    theme(plot.title = element_text(size = 12))
```

```{r k6pca}
# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes
k6pca <- k6dge %>%
    cpm(log = TRUE) %>%
    t() %>%
    prcomp()
```

```{r k6pcaSum, results="hide"}
# Quick inspection to check whether first two PCA components capture most of the variability
summary(k6pca)$importance %>% pander(split.tables = Inf)
```

```{r k6pcaPlot, fig.align = "center"}
k6pcaPlot <- k6pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    as_tibble() %>%
    dplyr::select(sample, PC1, PC2) %>%
    left_join(k6dge$samples) %>%
    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +
    geom_point(alpha = 0.8, size = 3) +
    geom_text_repel(show.legend = FALSE) +
    labs(
        x = paste0("PC1 (", percent(summary(k6pca)$importance[2, "PC1"]), ")"),
        y = paste0("PC2 (", percent(summary(k6pca)$importance[2, "PC2"]), ")"),
        colour = "Genotype",
        title = "k = 6"
    ) +
    scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

```{r k6pcaRrna, fig.align = "center"}
k6pcaRrna <- k6pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    as_tibble() %>%
    dplyr::select(sample, PC1, PC2) %>%
    left_join(k6dge$samples) %>%
    ggplot(aes(PC1, rRNA, label = rRNA)) +
    geom_point(aes(colour = group), alpha = 0.8, size = 3) +
    geom_text_repel(show.legend = FALSE) +
    geom_smooth(method = "lm") +
    labs(
        x = paste0("PC1 (", percent(summary(k6pca)$importance[2, "PC1"]), ")"),
        y = "rRNA proportion",
        colour = "Genotype",
        title = "k = 6"
    ) +
    scale_y_continuous(labels = percent) +
    scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

### Differential expression

```{r}
k6design <- model.matrix(~rRNA, data = k6dge$samples)
k6disp <- estimateDisp(k6dge, k6design)
k6fit <- glmQLFit(k6disp)
k6topTable <- glmQLFTest(k6fit) %>%
    topTags(n = Inf) %>%
    .[["table"]] %>%
    rownames_to_column("mer") %>%
    dplyr::select(
        mer,
        logFC,
        logCPM,
        F,
        P.Value = PValue,
        FDR,
    ) %>%
    as_tibble() %>%
    mutate(
        BY = p.adjust(P.Value, "BY"),
        DE = BY < 0.05
    )
```

## k = 7

### Counts

```{r k7counts}
k7files <- list.files(
    "/mnt/phoenix/hpcfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k7",
    pattern = ".dumps", full.names = TRUE
)
k7counts <- lapply(k7files, function(x){
    read_delim(x, col_names = c("mer", basename(x)), delim = " ") %>%
        set_colnames(str_remove_all(colnames(.), "_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\.dumps"))
}) %>%
    purrr::reduce(full_join)
# %>%
    # dplyr::select(mer, contains(c("WT", "Heter")))
```

```{r k7dge}
k7dge <- k7counts %>%
    as.data.frame() %>%
    column_to_rownames("mer") %>%
    DGEList() %>%
    calcNormFactors()
k7dge$samples %<>%
    rownames_to_column("rowname") %>%
    mutate(sample = rowname) %>%
    left_join(addInfo) %>%
    column_to_rownames("rowname")
k7dge$samples$group <- colnames(k7dge) %>%
    str_extract("(WT|Heter|Hom)") %>%
    factor(levels = c("WT", "Heter", "Hom"))
```

### Properties

```{r k7dist}
k7dist <- k7dge %>%
    cpm(log = TRUE) %>%
    as.data.frame() %>%
    pivot_longer(everything(), names_to = "sample", values_to = "count") %>%
    ggplot(aes(x=count, colour = sample)) +
    geom_density() +
    labs(x = "intensity", title = "Distribution of 7-mers")
```

```{r k7den, results="hide"}
k7labels <- k7dge$samples %>% 
    mutate(label = paste0(sample, "\n", percent(rRNA, accuracy = 0.01), " rRNA")) %>% 
    .$label
k7heat <- k7dge %>% 
    cpm(log = TRUE) %>%
    as.data.frame() %>%
    t() %>%
    pheatmap(silent = TRUE, cluster_cols = FALSE,
             show_colnames = FALSE, fontsize = 9,
             fontsize_row = 10, border_color = NA,
             main = "7-mer counts heatmap", labels_row = k7labels)
k7heat$tree_row$labels <- k7labels
k7den <- ggdendrogram(k7heat$tree_row, rotate = TRUE) +
    labs(title = "Hierarchical clustering of 7-mer counts") +
    theme(plot.title = element_text(size = 12))
```

```{r k7pca}
# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes
k7pca <- k7dge %>%
    cpm(log = TRUE) %>%
    t() %>%
    prcomp()
```

```{r k7pcaSum, results="hide"}
# Quick inspection to check whether first two PCA components capture most of the variability
summary(k7pca)$importance %>% pander(split.tables = Inf)
```

```{r k7pcaPlot, fig.align = "center"}
k7pcaPlot <- k7pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    as_tibble() %>%
    dplyr::select(sample, PC1, PC2) %>%
    left_join(k7dge$samples) %>%
    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +
    geom_point(alpha = 0.8, size = 3) +
    geom_text_repel(show.legend = FALSE) +
    labs(
        x = paste0("PC1 (", percent(summary(k7pca)$importance[2, "PC1"]), ")"),
        y = paste0("PC2 (", percent(summary(k7pca)$importance[2, "PC2"]), ")"),
        colour = "Genotype",
        title = "k = 7"
    ) +
    scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

```{r k7pcaRrna, fig.align = "center"}
k7pcaRrna <- k7pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    as_tibble() %>%
    dplyr::select(sample, PC1, PC2) %>%
    left_join(k7dge$samples) %>%
    ggplot(aes(PC1, rRNA, label = rRNA)) +
    geom_point(aes(colour = group), alpha = 0.8, size = 3) +
    geom_text_repel(show.legend = FALSE) +
    geom_smooth(method = "lm") +
    labs(
        x = paste0("PC1 (", percent(summary(k7pca)$importance[2, "PC1"]), ")"),
        y = "rRNA proportion",
        colour = "Genotype",
        title = "k = 7"
    ) +
    scale_y_continuous(labels = percent) +
    scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

### Differential expression

```{r}
k7design <- model.matrix(~rRNA, data = k7dge$samples)
k7disp <- estimateDisp(k7dge, k7design)
k7fit <- glmQLFit(k7disp)
k7topTable <- glmQLFTest(k7fit) %>%
    topTags(n = Inf) %>%
    .[["table"]] %>%
    rownames_to_column("mer") %>%
    dplyr::select(
        mer,
        logFC,
        logCPM,
        F,
        P.Value = PValue,
        FDR,
    ) %>%
    as_tibble() %>%
    mutate(
        BY = p.adjust(P.Value, "BY"),
        DE = BY < 0.05
    )
```

## k = 8

### Counts

```{r k8counts}
k8files <- list.files(
    "/mnt/phoenix/hpcfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k8",
    pattern = ".dumps", full.names = TRUE
)
k8counts <- lapply(k8files, function(x){
    read_delim(x, col_names = c("mer", basename(x)), delim = " ") %>%
        set_colnames(str_remove_all(colnames(.), "_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\.dumps"))
}) %>%
    purrr::reduce(full_join)
# %>%
    # dplyr::select(mer, contains(c("WT", "Heter")))
```

```{r k8dge}
k8dge <- k8counts %>%
    as.data.frame() %>%
    column_to_rownames("mer") %>%
    DGEList() %>%
    calcNormFactors()
k8dge$samples %<>%
    rownames_to_column("rowname") %>%
    mutate(sample = rowname) %>%
    left_join(addInfo) %>%
    column_to_rownames("rowname")
k8dge$samples$group <- colnames(k8dge) %>%
    str_extract("(WT|Heter|Hom)") %>%
    factor(levels = c("WT", "Heter", "Hom"))
```

### Properties

```{r k8dist}
k8dist <- k8dge %>%
    cpm(log = TRUE) %>%
    as.data.frame() %>%
    pivot_longer(everything(), names_to = "sample", values_to = "count") %>%
    ggplot(aes(x=count, colour = sample)) +
    geom_density() +
    labs(x = "intensity", title = "Distribution of 8-mers")
```

```{r k8den, results="hide"}
k8labels <- k8dge$samples %>% 
    mutate(label = paste0(sample, "\n", percent(rRNA, accuracy = 0.01), " rRNA")) %>% 
    .$label
k8heat <- k8dge %>% 
    cpm(log = TRUE) %>%
    as.data.frame() %>%
    t() %>%
    pheatmap(silent = TRUE, cluster_cols = FALSE,
             show_colnames = FALSE, fontsize = 9,
             fontsize_row = 10, border_color = NA,
             main = "8-mer counts heatmap", labels_row = k8labels)
k8heat$tree_row$labels <- k8labels
k8den <- ggdendrogram(k8heat$tree_row, rotate = TRUE) +
    labs(title = "Hierarchical clustering of 8-mer counts") +
    theme(plot.title = element_text(size = 12))
```

```{r k8pca}
# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes
k8pca <- k8dge %>%
    cpm(log = TRUE) %>%
    t() %>%
    prcomp()
```

```{r k8pcaSum, results="hide"}
# Quick inspection to check whether first two PCA components capture most of the variability
summary(k8pca)$importance %>% pander(split.tables = Inf)
```

```{r k8pcaPlot, fig.align = "center"}
k8pcaPlot <- k8pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    as_tibble() %>%
    dplyr::select(sample, PC1, PC2) %>%
    left_join(k8dge$samples) %>%
    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +
    geom_point(alpha = 0.8, size = 3) +
    geom_text_repel(show.legend = FALSE) +
    labs(
        x = paste0("PC1 (", percent(summary(k8pca)$importance[2, "PC1"]), ")"),
        y = paste0("PC2 (", percent(summary(k8pca)$importance[2, "PC2"]), ")"),
        colour = "Genotype",
        title = "k = 8"
    ) +
    scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

```{r k8pcaRrna, fig.align = "center"}
k8pcaRrna <- k8pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    as_tibble() %>%
    dplyr::select(sample, PC1, PC2) %>%
    left_join(k8dge$samples) %>%
    ggplot(aes(PC1, rRNA, label = rRNA)) +
    geom_point(aes(colour = group), alpha = 0.8, size = 3) +
    geom_text_repel(show.legend = FALSE) +
    geom_smooth(method = "lm") +
    labs(
        x = paste0("PC1 (", percent(summary(k8pca)$importance[2, "PC1"]), ")"),
        y = "rRNA proportion",
        colour = "Genotype",
        title = "k = 8"
    ) +
    scale_y_continuous(labels = percent) +
    scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

### Differential expression

```{r}
k8design <- model.matrix(~rRNA, data = k8dge$samples)
k8disp <- estimateDisp(k8dge, k8design)
k8fit <- glmQLFit(k8disp)
k8topTable <- glmQLFTest(k8fit) %>%
    topTags(n = Inf) %>%
    .[["table"]] %>%
    rownames_to_column("mer") %>%
    dplyr::select(
        mer,
        logFC,
        logCPM,
        F,
        P.Value = PValue,
        FDR,
    ) %>%
    as_tibble() %>%
    mutate(
        BY = p.adjust(P.Value, "BY"),
        DE = BY < 0.05
    )
```

## k = 9

### Counts

```{r k9counts}
k9files <- list.files(
    "/mnt/phoenix/hpcfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k9",
    pattern = ".dumps", full.names = TRUE
)
k9counts <- lapply(k9files, function(x){
    read_delim(x, col_names = c("mer", basename(x)), delim = " ") %>%
        set_colnames(str_remove_all(colnames(.), "_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\.dumps"))
}) %>%
    purrr::reduce(full_join)
# %>%
    # dplyr::select(mer, contains(c("WT", "Heter")))
```

```{r k9dge}
k9dge <- k9counts %>%
    as.data.frame() %>%
    column_to_rownames("mer") %>%
    DGEList() %>%
    calcNormFactors()
k9dge$samples %<>%
    rownames_to_column("rowname") %>%
    mutate(sample = rowname) %>%
    left_join(addInfo) %>%
    column_to_rownames("rowname")
k9dge$samples$group <- colnames(k9dge) %>%
    str_extract("(WT|Heter|Hom)") %>%
    factor(levels = c("WT", "Heter", "Hom"))
```

### Properties

```{r k9dist}
k9dist <- k9dge %>%
    cpm(log = TRUE) %>%
    as.data.frame() %>%
    pivot_longer(everything(), names_to = "sample", values_to = "count") %>%
    ggplot(aes(x=count, colour = sample)) +
    geom_density() +
    labs(x = "intensity", title = "Distribution of 9-mers")
```

```{r k9den, results="hide"}
k9labels <- k9dge$samples %>% 
    mutate(label = paste0(sample, "\n", percent(rRNA, accuracy = 0.01), " rRNA")) %>% 
    .$label
k9heat <- k9dge %>% 
    cpm(log = TRUE) %>%
    as.data.frame() %>%
    t() %>%
    pheatmap(silent = TRUE, cluster_cols = FALSE,
             show_colnames = FALSE, fontsize = 9,
             fontsize_row = 10, border_color = NA,
             main = "9-mer counts heatmap", labels_row = k9labels)
k9heat$tree_row$labels <- k9labels
k9den <- ggdendrogram(k9heat$tree_row, rotate = TRUE) +
    labs(title = "Hierarchical clustering of 9-mer counts") +
    theme(plot.title = element_text(size = 12))
```

```{r k9pca}
# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes
k9pca <- k9dge %>%
    cpm(log = TRUE) %>%
    t() %>%
    prcomp()
```

```{r k9pcaSum, results="hide"}
# Quick inspection to check whether first two PCA components capture most of the variability
summary(k9pca)$importance %>% pander(split.tables = Inf)
```

```{r k9pcaPlot, fig.align = "center"}
k9pcaPlot <- k9pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    as_tibble() %>%
    dplyr::select(sample, PC1, PC2) %>%
    left_join(k9dge$samples) %>%
    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +
    geom_point(alpha = 0.8, size = 3) +
    geom_text_repel(show.legend = FALSE) +
    labs(
        x = paste0("PC1 (", percent(summary(k9pca)$importance[2, "PC1"]), ")"),
        y = paste0("PC2 (", percent(summary(k9pca)$importance[2, "PC2"]), ")"),
        colour = "Genotype",
        title = "k = 9"
    ) +
    scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

```{r k9pcaRrna, fig.align = "center"}
k9pcaRrna <- k9pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    as_tibble() %>%
    dplyr::select(sample, PC1, PC2) %>%
    left_join(k9dge$samples) %>%
    ggplot(aes(PC1, rRNA, label = rRNA)) +
    geom_point(aes(colour = group), alpha = 0.8, size = 3) +
    geom_text_repel(show.legend = FALSE) +
    geom_smooth(method = "lm") +
    labs(
        x = paste0("PC1 (", percent(summary(k9pca)$importance[2, "PC1"]), ")"),
        y = "rRNA proportion",
        colour = "Genotype",
        title = "k = 9"
    ) +
    scale_y_continuous(labels = percent) +
    scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

### Differential expression

```{r}
k9design <- model.matrix(~rRNA, data = k9dge$samples)
k9disp <- estimateDisp(k9dge, k9design)
k9fit <- glmQLFit(k9disp)
k9topTable <- glmQLFTest(k9fit) %>%
    topTags(n = Inf) %>%
    .[["table"]] %>%
    rownames_to_column("mer") %>%
    dplyr::select(
        mer,
        logFC,
        logCPM,
        F,
        P.Value = PValue,
        FDR,
    ) %>%
    as_tibble() %>%
    mutate(
        BY = p.adjust(P.Value, "BY"),
        DE = BY < 0.05
    )
```

## k = 10

### Counts

```{r k10counts}
k10files <- list.files(
    "/mnt/phoenix/hpcfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k10",
    pattern = ".dumps", full.names = TRUE
)
k10counts <- lapply(k10files, function(x){
    read_delim(x, col_names = c("mer", basename(x)), delim = " ") %>%
        set_colnames(str_remove_all(colnames(.), "_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\.dumps"))
}) %>%
    purrr::reduce(full_join)
# %>%
    # dplyr::select(mer, contains(c("WT", "Heter")))
```

```{r k10dge}
k10dge <- k10counts %>%
    as.data.frame() %>%
    column_to_rownames("mer") %>%
    DGEList() %>%
    calcNormFactors()
k10dge$samples %<>%
    rownames_to_column("rowname") %>%
    mutate(sample = rowname) %>%
    left_join(addInfo) %>%
    column_to_rownames("rowname")
k10dge$samples$group <- colnames(k10dge) %>%
    str_extract("(WT|Heter|Hom)") %>%
    factor(levels = c("WT", "Heter", "Hom"))
```

### Properties

```{r k10dist}
# k10dist <- k10dge %>%
#     cpm(log = TRUE) %>%
#     as.data.frame() %>%
#     pivot_longer(everything(), names_to = "sample", values_to = "count") %>%
#     ggplot(aes(x=count, colour = sample)) +
#     geom_density() +
#     labs(x = "intensity", title = "Distribution of 10-mers")
```

```{r k10den, results="hide"}
# k10labels <- k10dge$samples %>% 
#     mutate(label = paste0(sample, "\n", percent(rRNA, accuracy = 0.01), " rRNA")) %>% 
#     .$label
# k10heat <- k10dge %>% 
#     cpm(log = TRUE) %>%
#     as.data.frame() %>%
#     t() %>%
#     pheatmap(silent = TRUE, cluster_cols = FALSE,
#              show_colnames = FALSE, fontsize = 9,
#              fontsize_row = 10, border_color = NA,
#              main = "10-mer counts heatmap", labels_row = k10labels)
# k10heat$tree_row$labels <- k10labels
# k10den <- ggdendrogram(k10heat$tree_row, rotate = TRUE) +
#     labs(title = "Hierarchical clustering of 10-mer counts") +
#     theme(plot.title = element_text(size = 12))
```

```{r k10pca}
# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes
k10pca <- k10dge %>%
    cpm(log = TRUE) %>%
    t() %>%
    prcomp()
```

```{r k10pcaSum, results="hide"}
# Quick inspection to check whether first two PCA components capture most of the variability
summary(k10pca)$importance %>% pander(split.tables = Inf)
```

```{r k10pcaPlot, fig.align = "center"}
k10pcaPlot <- k10pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    as_tibble() %>%
    dplyr::select(sample, PC1, PC2) %>%
    left_join(k10dge$samples) %>%
    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +
    geom_point(alpha = 0.8, size = 3) +
    geom_text_repel(show.legend = FALSE) +
    labs(
        x = paste0("PC1 (", percent(summary(k10pca)$importance[2, "PC1"]), ")"),
        y = paste0("PC2 (", percent(summary(k10pca)$importance[2, "PC2"]), ")"),
        colour = "Genotype",
        title = "k = 10"
    ) +
    scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

```{r k10pcaRrna, fig.align = "center"}
# k10pcaRrna <- k10pca$x %>%
#     as.data.frame() %>%
#     rownames_to_column("sample") %>%
#     as_tibble() %>%
#     dplyr::select(sample, PC1, PC2) %>%
#     left_join(k10dge$samples) %>%
#     ggplot(aes(PC1, rRNA, label = rRNA)) +
#     geom_point(aes(colour = group), alpha = 0.8, size = 3) +
#     geom_text_repel(show.legend = FALSE) +
#     geom_smooth(method = "lm") +
#     labs(
#         x = paste0("PC1 (", percent(summary(k10pca)$importance[2, "PC1"]), ")"),
#         y = "rRNA proportion",
#         colour = "Genotype",
#         title = "k = 10"
#     ) +
#     scale_y_continuous(labels = percent) +
#     scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

### Differential expression

```{r}
k10design <- model.matrix(~rRNA, data = k10dge$samples)
k10disp <- estimateDisp(k10dge, k10design)
k10fit <- glmQLFit(k10disp)
k10topTable <- glmQLFTest(k10fit) %>%
    topTags(n = Inf) %>%
    .[["table"]] %>%
    rownames_to_column("mer") %>%
    dplyr::select(
        mer,
        logFC,
        logCPM,
        F,
        P.Value = PValue,
        FDR,
    ) %>%
    as_tibble() %>%
    mutate(
        BY = p.adjust(P.Value, "BY"),
        DE = BY < 0.05
    )
```

## k = 11

### Counts

```{r k11counts}
k11files <- list.files(
    "/mnt/phoenix/hpcfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k11",
    pattern = ".dumps", full.names = TRUE
)
k11counts <- lapply(k11files, function(x){
    read_delim(x, col_names = c("mer", basename(x)), delim = " ") %>%
        set_colnames(str_remove_all(colnames(.), "_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\.dumps"))
}) %>%
    purrr::reduce(full_join)
# %>%
    # dplyr::select(mer, contains(c("WT", "Heter")))
```

```{r k11dge}
k11dge <- k11counts %>%
    as.data.frame() %>%
    column_to_rownames("mer") %>%
    replace(is.na(.), 0) %>%
    DGEList() %>%
    calcNormFactors()
k11dge$samples %<>%
    rownames_to_column("rowname") %>%
    mutate(sample = rowname) %>%
    left_join(addInfo) %>%
    column_to_rownames("rowname")
k11dge$samples$group <- colnames(k11dge) %>%
    str_extract("(WT|Heter|Hom)") %>%
    factor(levels = c("WT", "Heter", "Hom"))
```

### Properties

```{r k11dist}
# k11dist <- k11dge %>%
#     cpm(log = TRUE) %>%
#     as.data.frame() %>%
#     pivot_longer(everything(), names_to = "sample", values_to = "count") %>%
#     ggplot(aes(x=count, colour = sample)) +
#     geom_density() +
#     labs(x = "intensity", title = "Distribution of 11-mers")
```

```{r k11den, results="hide"}
# k11labels <- k11dge$samples %>% 
#     mutate(label = paste0(sample, "\n", percent(rRNA, accuracy = 0.01), " rRNA")) %>% 
#     .$label
# k11heat <- k11dge %>% 
#     cpm(log = TRUE) %>%
#     as.data.frame() %>%
#     t() %>%
#     pheatmap(silent = TRUE, cluster_cols = FALSE,
#              show_colnames = FALSE, fontsize = 9,
#              fontsize_row = 10, border_color = NA,
#              main = "11-mer counts heatmap", labels_row = k11labels)
# k11heat$tree_row$labels <- k11labels
# k11den <- ggdendrogram(k11heat$tree_row, rotate = TRUE) +
#     labs(title = "Hierarchical clustering of 11-mer counts") +
#     theme(plot.title = element_text(size = 12))
```

```{r k11pca}
# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes
k11pca <- k11dge %>%
    cpm(log = TRUE) %>%
    t() %>%
    prcomp()
```

```{r k11pcaSum, results="hide"}
# Quick inspection to check whether first two PCA components capture most of the variability
summary(k11pca)$importance %>% pander(split.tables = Inf)
```

```{r k11pcaPlot, fig.align = "center"}
k11pcaPlot <- k11pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    as_tibble() %>%
    dplyr::select(sample, PC1, PC2) %>%
    left_join(k11dge$samples) %>%
    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +
    geom_point(alpha = 0.8, size = 3) +
    geom_text_repel(show.legend = FALSE) +
    labs(
        x = paste0("PC1 (", percent(summary(k11pca)$importance[2, "PC1"]), ")"),
        y = paste0("PC2 (", percent(summary(k11pca)$importance[2, "PC2"]), ")"),
        colour = "Genotype",
        title = "k = 11"
    ) +
    scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

```{r k11pcaRrna, fig.align = "center"}
# k11pcaRrna <- k11pca$x %>%
#     as.data.frame() %>%
#     rownames_to_column("sample") %>%
#     as_tibble() %>%
#     dplyr::select(sample, PC1, PC2) %>%
#     left_join(k11dge$samples) %>%
#     ggplot(aes(PC1, rRNA, label = rRNA)) +
#     geom_point(aes(colour = group), alpha = 0.8, size = 3) +
#     geom_text_repel(show.legend = FALSE) +
#     geom_smooth(method = "lm") +
#     labs(
#         x = paste0("PC1 (", percent(summary(k11pca)$importance[2, "PC1"]), ")"),
#         y = "rRNA proportion",
#         colour = "Genotype",
#         title = "k = 11"
#     ) +
#     scale_y_continuous(labels = percent) +
#     scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

### Differential expression

```{r}
k11design <- model.matrix(~rRNA, data = k11dge$samples)
k11disp <- estimateDisp(k11dge, k11design)
k11fit <- glmQLFit(k11disp)
k11topTable <- glmQLFTest(k11fit) %>%
    topTags(n = Inf) %>%
    .[["table"]] %>%
    rownames_to_column("mer") %>%
    dplyr::select(
        mer,
        logFC,
        logCPM,
        F,
        P.Value = PValue,
        FDR,
    ) %>%
    as_tibble() %>%
    mutate(
        BY = p.adjust(P.Value, "BY"),
        DE = BY < 0.05
    )
```

## k = 12

### Counts

```{r k12counts}
k12files <- list.files(
    "/mnt/phoenix/hpcfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k12",
    pattern = ".dumps", full.names = TRUE
)
k12counts <- lapply(k12files, function(x){
    read_delim(x, col_names = c("mer", basename(x)), delim = " ") %>%
        set_colnames(str_remove_all(colnames(.), "_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\.dumps"))
}) %>%
    purrr::reduce(full_join)
# %>%
    # dplyr::select(mer, contains(c("WT", "Heter")))
```

```{r k12dge}
k12dge <- k12counts %>%
    as.data.frame() %>%
    column_to_rownames("mer") %>%
    replace(is.na(.), 0) %>%
    DGEList() %>%
    calcNormFactors()
k12dge$samples %<>%
    rownames_to_column("rowname") %>%
    mutate(sample = rowname) %>%
    left_join(addInfo) %>%
    column_to_rownames("rowname")
k12dge$samples$group <- colnames(k12dge) %>%
    str_extract("(WT|Heter|Hom)") %>%
    factor(levels = c("WT", "Heter", "Hom"))
```

### Properties

```{r k12dist}
# k12dist <- k12dge %>%
#     cpm(log = TRUE) %>%
#     as.data.frame() %>%
#     pivot_longer(everything(), names_to = "sample", values_to = "count") %>%
#     ggplot(aes(x=count, colour = sample)) +
#     geom_density() +
#     labs(x = "intensity", title = "Distribution of 12-mers")
```

```{r k12den, results="hide"}
# k12labels <- k12dge$samples %>% 
#     mutate(label = paste0(sample, "\n", percent(rRNA, accuracy = 0.01), " rRNA")) %>% 
#     .$label
# k12heat <- k12dge %>% 
#     cpm(log = TRUE) %>%
#     as.data.frame() %>%
#     t() %>%
#     pheatmap(silent = TRUE, cluster_cols = FALSE,
#              show_colnames = FALSE, fontsize = 9,
#              fontsize_row = 10, border_color = NA,
#              main = "12-mer counts heatmap", labels_row = k12labels)
# k12heat$tree_row$labels <- k12labels
# k12den <- ggdendrogram(k12heat$tree_row, rotate = TRUE) +
#     labs(title = "Hierarchical clustering of 12-mer counts") +
#     theme(plot.title = element_text(size = 12))
```

```{r k12pca}
# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes
k12pca <- k12dge %>%
    cpm(log = TRUE) %>%
    t() %>%
    prcomp()
```

```{r k12pcaSum, results="hide"}
# Quick inspection to check whether first two PCA components capture most of the variability
summary(k12pca)$importance %>% pander(split.tables = Inf)
```

```{r k12pcaPlot, fig.align = "center"}
k12pcaPlot <- k12pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    as_tibble() %>%
    dplyr::select(sample, PC1, PC2) %>%
    left_join(k12dge$samples) %>%
    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +
    geom_point(alpha = 0.8, size = 3) +
    geom_text_repel(show.legend = FALSE) +
    labs(
        x = paste0("PC1 (", percent(summary(k12pca)$importance[2, "PC1"]), ")"),
        y = paste0("PC2 (", percent(summary(k12pca)$importance[2, "PC2"]), ")"),
        colour = "Genotype",
        title = "k = 12"
    ) +
    scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

```{r k12pcaRrna, fig.align = "center"}
# k12pcaRrna <- k12pca$x %>%
#     as.data.frame() %>%
#     rownames_to_column("sample") %>%
#     as_tibble() %>%
#     dplyr::select(sample, PC1, PC2) %>%
#     left_join(k12dge$samples) %>%
#     ggplot(aes(PC1, rRNA, label = rRNA)) +
#     geom_point(aes(colour = group), alpha = 0.8, size = 3) +
#     geom_text_repel(show.legend = FALSE) +
#     geom_smooth(method = "lm") +
#     labs(
#         x = paste0("PC1 (", percent(summary(k12pca)$importance[2, "PC1"]), ")"),
#         y = "rRNA proportion",
#         colour = "Genotype",
#         title = "k = 12"
#     ) +
#     scale_y_continuous(labels = percent) +
#     scale_colour_discrete(labels = c("Wildtype", "Heterozygous", "Homozygous"))
```

### Differential expression

```{r}
k12design <- model.matrix(~rRNA, data = k12dge$samples)
k12disp <- estimateDisp(k12dge, k12design)
k12fit <- glmQLFit(k12disp)
k12topTable <- glmQLFTest(k12fit) %>%
    topTags(n = Inf) %>%
    .[["table"]] %>%
    rownames_to_column("mer") %>%
    dplyr::select(
        mer,
        logFC,
        logCPM,
        F,
        P.Value = PValue,
        FDR,
    ) %>%
    as_tibble() %>%
    mutate(
        BY = p.adjust(P.Value, "BY"),
        DE = BY < 0.05
    )
```

# Distributions

```{r allDists, fig.height=12, fig.cap="*Distributions of kmer counts for each value of $k$*"}
# ggarrange(
#     k5dist, k6dist, k7dist, k8dist, k9dist, k10dist, k11dist, k12dist,
#     ncol = 2, nrow = 4, common.legend = TRUE, legend = "bottom" 
# )
```

# PCA

```{r allPcas, fig.height=12, fig.cap="*Principal component analysis for all values of $k$. As $k$ increases, WT and mutant groups start to separate.*"}
ggarrange(
    k5pcaPlot, k6pcaPlot, k7pcaPlot, k8pcaPlot, k9pcaPlot, k10pcaPlot, k11pcaPlot, k12pcaPlot,
    ncol = 2, nrow = 4, common.legend = TRUE, legend = "bottom"
)
```

```{r allPcaRrnas, fig.height=12, fig.cap="*Principal component analysis for all values of $k$. As $k$ increases, WT and mutant groups start to separate.*"}
# ggarrange(
#     k5pcaRrna, k6pcaRrna, k7pcaRrna, k8pcaRrna, k9pcaRrna, k10pcaRrna, k11pcaRrna, k12pcaRrna,
#     ncol = 2, nrow = 4, common.legend = TRUE, legend = "bottom"
# )
```

# Clustering

```{r allDens, fig.height=12, fig.cap="*Hierarchical clustering of samples based on kmer counts. As $k$ increases, WT and mutant groups start to cluster.*"}
# ggarrange(
#     k5den, k6den, k7den, k8den, k9den, k10den, k11den, k12den,
#     ncol = 2, nrow = 4, common.legend = TRUE, legend = "bottom"
# )
```

# Differential expression

```{r topResFunc}
topRes <- function(x, cap){
    x %>% 
        dplyr::select(mer, logCPM, logFC, P.Value, FDR, BY, DE) %>%
        mutate(
            logCPM = format(round(logCPM, 2), nsmall = 2),
            logFC = format(round(logFC, 2), nsmall = 2),
            P.Value = sprintf("%.2e", P.Value),
            FDR = sprintf("%.2e", FDR),
            BY = sprintf("%.2e", BY)
        ) %>%
        dplyr::slice(1:100) %>%
        datatable(
            options = list(pageLength = 10),
            class = "striped hover condensed responsive",
            filter = "top",
            caption = cap
        )
}
```

## k = 5

```{r k5top}
topRes(k5topTable,
       cap = paste(
           "The top 100 differentially expressed 5-mers.",
           nrow(dplyr::filter(k5topTable, DE)),
           "of",
           nrow(k5topTable),
           "detected sequences were classified as DE with BY p-value < 0.05."
       )
)
```

```{r, fig.cap="*Histogram of p-values. Values follow the expected distribution when there are many differences.*"}
k5topTable %>%
    ggplot(aes(P.Value)) +
    geom_histogram(
        binwidth = 0.02,
        colour = "black", fill = "grey90"
    ) +
    labs(title = "k = 5")
```

```{r, fig.cap="*Volcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value < 0.05 are highlighted in red.*"}
k5topTable %>%
    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +
    geom_point(alpha = 0.5) +
    scale_colour_manual(values = c("black", "grey50", "red")) +
    geom_text_repel(
        data = . %>%
            # dplyr::filter(-log10(P.Value) > 4 | logFC > 4 | logFC < -2),
            dplyr::filter(-log10(P.Value) > 4 | logFC > 3 | logFC < -2.5),
        aes(label = mer, color = "black")
    ) +
    labs(x = "logFC", y = expression(paste(-log[10], "(p)")), title = "k = 5") +
    theme_bw() +
    theme(legend.position = "none")
```

---

## k = 6

```{r k6top}
topRes(k6topTable,
       cap = paste(
           "The top 100 differentially expressed 6-mers.",
           nrow(dplyr::filter(k6topTable, DE)),
           "of",
           nrow(k6topTable),
           "detected sequences were classified as DE with a BY p-value < 0.05."
       )
)
```

```{r, fig.cap="*Histogram of p-values. Values follow the expected distribution when there are some differences.*"}
k6topTable %>%
    ggplot(aes(P.Value)) +
    geom_histogram(
        binwidth = 0.02,
        colour = "black", fill = "grey90"
    ) +
    labs(title = "k = 6")
```

```{r, fig.cap="*Volcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value < 0.05 are highlighted in red.*"}
k6topTable %>%
    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +
    geom_point(alpha = 0.5) +
    scale_colour_manual(values = c("black", "grey50", "red")) +
    geom_text_repel(
        data = . %>%
            dplyr::filter(-log10(P.Value) > 6 | logFC > 6 | logFC < -2.3),
        aes(label = mer, color = "black")
    ) +
    labs(x = "logFC", y = expression(paste(-log[10], "(p)")), title = "k = 6") +
    theme_bw() +
    theme(legend.position = "none")
```

---

## k = 7

```{r k7top}
topRes(k7topTable,
       cap = paste(
           "The top 100 differentially expressed 7-mers.",
           nrow(dplyr::filter(k7topTable, DE)),
           "of",
           nrow(k7topTable),
           "detected sequences were classified as DE with a BY p-value < 0.05."
       )
)
```

```{r, fig.cap="*Histogram of p-values. Values follow the expected distribution when there are many differences.*"}
k7topTable %>%
    ggplot(aes(P.Value)) +
    geom_histogram(
        binwidth = 0.02,
        colour = "black", fill = "grey90"
    ) +
    labs(title = "k = 7")
```

```{r, fig.cap="*Volcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value < 0.05 are highlighted in red.*"}
k7topTable %>%
    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +
    geom_point(alpha = 0.5) +
    scale_colour_manual(values = c("black", "grey50", "red")) +
    geom_text_repel(
        data = . %>%
            dplyr::filter(-log10(P.Value) > 6.4 | logFC > 10 | logFC < -5),
        aes(label = mer, color = "black")
    ) +
    labs(x = "logFC", y = expression(paste(-log[10], "(p)")), title = "k = 7") +
    theme_bw() +
    theme(legend.position = "none")
```

---

## k = 8

```{r k8top}
topRes(k8topTable,
       cap = paste(
           "The top 100 differentially expressed 8-mers.",
           nrow(dplyr::filter(k8topTable, DE)),
           "of",
           nrow(k8topTable),
           "detected sequences were classified as DE with a BY p-value < 0.05."
       )
)
```

```{r, fig.cap="*Histogram of p-values. Values follow the expected distribution when there are many differences.*"}
k8topTable %>%
    ggplot(aes(P.Value)) +
    geom_histogram(
        binwidth = 0.02,
        colour = "black", fill = "grey90"
    ) +
    labs(title = "k = 8")
```

```{r, fig.cap="*Volcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value < 0.05 are highlighted in red.*"}
k8topTable %>%
    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +
    geom_point(alpha = 0.5) +
    scale_colour_manual(values = c("black", "grey50", "red")) +
    geom_text_repel(
        data = . %>%
            dplyr::filter(-log10(P.Value) > 7.2 | logFC > 12.5 | logFC < -8),
        aes(label = mer, color = "black")
    ) +
    labs(x = "logFC", y = expression(paste(-log[10], "(p)")), title = "k = 8") +
    theme_bw() +
    theme(legend.position = "none")
```

---

## k = 9

```{r k9top}
topRes(k9topTable,
       cap = paste(
           "The top 100 differentially expressed 9-mers.",
           nrow(dplyr::filter(k9topTable, DE)),
           "of",
           nrow(k9topTable),
           "detected sequences were classified as DE with a BY p-value < 0.05."
       )
)
```

```{r, fig.cap="*Histogram of p-values. Values follow the expected distribution when there are many differences.*"}
k9topTable %>%
    ggplot(aes(P.Value)) +
    geom_histogram(
        binwidth = 0.02,
        colour = "black", fill = "grey90"
    ) +
    labs(title = "k = 9")
```

```{r, fig.cap="*Volcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value < 0.05 are highlighted in red.*"}
k9topTable %>%
    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +
    geom_point(alpha = 0.5) +
    scale_colour_manual(values = c("black", "grey50", "red")) +
    geom_text_repel(
        data = . %>%
            dplyr::filter(DE & -log10(P.Value) > 7.5 | logFC < -10 | logFC > 15),
        aes(label = mer, color = "black")
    ) +
    labs(x = "logFC", y = expression(paste(-log[10], "(p)")), title = "k = 9") +
    theme_bw() +
    theme(legend.position = "none")
```

---

## k = 10

```{r k10top}
topRes(k10topTable,
       cap = paste(
           "The top 100 differentially expressed 10-mers.",
           nrow(dplyr::filter(k10topTable, DE)),
           "of",
           nrow(k10topTable),
           "detected sequences were classified as DE with a BY p-value < 0.05."
       )
)
```

```{r, fig.cap="*Histogram of p-values. Values follow the expected distribution when there are many differences.*"}
k10topTable %>%
    ggplot(aes(P.Value)) +
    geom_histogram(
        binwidth = 0.02,
        colour = "black", fill = "grey90"
    ) +
    labs(title = "k = 10")
```

```{r, fig.cap="*Volcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value < 0.05 are highlighted in red.*"}
k10topTable %>%
    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +
    geom_point(alpha = 0.5) +
    scale_colour_manual(values = c("black", "grey50", "red")) +
    geom_text_repel(
        data = . %>%
            dplyr::filter(-log10(P.Value) > 8.5 | logFC > 20 | logFC < -13.5),
        aes(label = mer, color = "black")
    ) +
    labs(x = "logFC", y = expression(paste(-log[10], "(p)")), title = "k = 10") +
    theme_bw() +
    theme(legend.position = "none")
```

---

## k = 11

```{r k11top}
topRes(k11topTable,
       cap = paste(
           "The top 100 differentially expressed 11-mers.",
           nrow(dplyr::filter(k11topTable, DE)),
           "of",
           nrow(k11topTable),
           "detected sequences were classified as DE with a BY p-value < 0.05."
       )
)
```

```{r, fig.cap="*Histogram of p-values. Values follow the expected distribution when there are many differences.*"}
k11topTable %>%
    ggplot(aes(P.Value)) +
    geom_histogram(
        binwidth = 0.02,
        colour = "black", fill = "grey90"
    ) +
    labs(title = "k = 11")
```

```{r, fig.cap="*Volcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value < 0.05 are highlighted in red.*"}
k11topTable %>%
    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +
    geom_point(alpha = 0.5) +
    scale_colour_manual(values = c("black", "grey50", "red")) +
    geom_text_repel(
        data = . %>%
            dplyr::filter(-log10(P.Value) > 8.5 | logFC > 20 | logFC < -13.5),
        aes(label = mer, color = "black")
    ) +
    labs(x = "logFC", y = expression(paste(-log[10], "(p)")), title = "k = 11") +
    theme_bw() +
    theme(legend.position = "none")
```

---

## k = 12

```{r k12top}
topRes(k12topTable,
       cap = paste(
           "The top 100 differentially expressed 12-mers.",
           nrow(dplyr::filter(k12topTable, DE)),
           "of",
           nrow(k12topTable),
           "detected sequences were classified as DE with a BY p-value < 0.05."
       )
)
```

```{r, fig.cap="*Histogram of p-values. Values follow the expected distribution when there are many differences.*"}
k12topTable %>%
    ggplot(aes(P.Value)) +
    geom_histogram(
        binwidth = 0.02,
        colour = "black", fill = "grey90"
    ) +
    labs(title = "k = 12")
```

```{r, fig.cap="*Volcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value < 0.05 are highlighted in red.*"}
k12topTable %>%
    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +
    geom_point(alpha = 0.5) +
    scale_colour_manual(values = c("black", "grey50", "red")) +
    geom_text_repel(
        data = . %>%
            dplyr::filter(-log10(P.Value) > 8.5 | logFC > 20 | logFC < -13.5),
        aes(label = mer, color = "black")
    ) +
    labs(x = "logFC", y = expression(paste(-log[10], "(p)")), title = "k = 11") +
    theme_bw() +
    theme(legend.position = "none")
``````

# Data export

```{r}
saveRDS(k5counts, here("1_Psen2S4Ter/Rdata/k5counts.Rds"))
saveRDS(k6counts, here("1_Psen2S4Ter/Rdata/k6counts.Rds"))
saveRDS(k7counts, here("1_Psen2S4Ter/Rdata/k7counts.Rds"))
saveRDS(k8counts, here("1_Psen2S4Ter/Rdata/k8counts.Rds"))
saveRDS(k9counts, here("1_Psen2S4Ter/Rdata/k9counts.Rds"))
saveRDS(k10counts, here("1_Psen2S4Ter/Rdata/k10counts.Rds"))
saveRDS(k11counts, here("1_Psen2S4Ter/Rdata/k11counts.Rds"))
saveRDS(k12counts, here("1_Psen2S4Ter/Rdata/k12counts.Rds"))
saveRDS(k5topTable, here("1_Psen2S4Ter/Rdata/k5topTable.Rds"))
saveRDS(k6topTable, here("1_Psen2S4Ter/Rdata/k6topTable.Rds"))
saveRDS(k7topTable, here("1_Psen2S4Ter/Rdata/k7topTable.Rds"))
saveRDS(k8topTable, here("1_Psen2S4Ter/Rdata/k8topTable.Rds"))
saveRDS(k9topTable, here("1_Psen2S4Ter/Rdata/k9topTable.Rds"))
saveRDS(k10topTable, here("1_Psen2S4Ter/Rdata/k10topTable.Rds"))
saveRDS(k11topTable, here("1_Psen2S4Ter/Rdata/k11topTable.Rds"))
saveRDS(k12topTable, here("1_Psen2S4Ter/Rdata/k12topTable.Rds"))
```

# Session info

```{r seshInfo}
sessionInfo()
```