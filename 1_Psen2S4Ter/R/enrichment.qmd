---
title: "rRNADepletion_s4ter"
author: "Lachlan Baer"
date: "`r format(Sys.time(), '%d %B, %Y')`"
output:
  html_document:
    toc: true
    toc_float: true
    toc_depth: 3
    fig_width: 8
    fig_height: 6
    fig_align: "center"
    code_folding: hide
editor_options: 
  chunk_output_type: console
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  error = FALSE, 
  fig.align = "center"
)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
```

# Setup 

```{r packages}
library(tidyverse)
library(magrittr)
library(parallel)
library(ngsReports)
library(here)
library(scales)
library(ggpubr)
library(kableExtra)
library(AnnotationHub)
library(ensembldb)
library(edgeR)
library(corrplot)
library(DT)
library(ggrepel)
library(msigdbr)
library(fgsea)
```

```{r options}
if (interactive()) setwd(here::here())
theme_set(theme_bw())
cores <- detectCores() - 2
```

# Load data

```{r}
dgeFilt <- readRDS(here("1_Psen2S4Ter/Rdata/dgeFilt.Rds"))
tt_r <- readRDS(here("1_Psen2S4Ter/Rdata/tt_r.Rds"))
tt_g <- readRDS(here("1_Psen2S4Ter/Rdata/tt_g.Rds"))
tt_gr <- readRDS(here("1_Psen2S4Ter/Rdata/tt_gr.Rds"))
tt_deconv <- readRDS(here("1_Psen2S4Ter/Rdata/tt_deconv.Rds"))
```

# Sequence information

```{r ah}
ah_Dr <- AnnotationHub() %>%
  subset(species == "Danio rerio") %>%
  subset(rdataclass == "EnsDb")
ensDb <- ah_Dr[["AH83189"]]
trEns_Dr <- transcripts(ensDb) %>%
  mcols() %>% 
  as_tibble()
trLen_Dr <- exonsBy(ensDb, "tx") %>%
  width() %>%
  vapply(sum, integer(1))
geneGcLen_Dr <- trLen_Dr %>%
  enframe() %>%
  set_colnames(c("tx_id", "length")) %>%
  left_join(trEns_Dr) %>%
  group_by(gene_id) %>% 
  summarise(
    aveLen = mean(length),
    maxLen = max(length), 
    aveGc = sum(length * gc_content) / sum(length),
    longestGc = gc_content[which.max(length)[[1]]]
  ) %>%
  mutate(
    aveGc =  aveGc / 100,
    longestGc = longestGc / 100
  )
trGcLen_Dr <- trLen_Dr %>%
  enframe() %>%
  set_colnames(c("tx_id", "length")) %>%
  left_join(trEns_Dr) %>%
  group_by(tx_id) %>% 
  summarise(
    aveLen = mean(length),
    maxLen = max(length), 
    aveGc = sum(length * gc_content) / sum(length),
    longestGc = gc_content[which.max(length)[[1]]]
  ) %>%
  mutate(
    aveGc =  aveGc / 100,
    longestGc = longestGc / 100
  )
genesGR_Dr <- genes(ensDb)
mcols(genesGR_Dr) <- mcols(genesGR_Dr)[c("gene_id", "gene_name", 
                                         "gene_biotype", "entrezid")]
txGR_Dr <- transcripts(ensDb)
mcols(txGR_Dr) <- mcols(txGR_Dr)[c("tx_id", "tx_name", 
                                   "tx_biotype", "tx_id_version", "gene_id")]
```

An `EnsDb` object was obtained for Ensembl release 101 using the `AnnotationHub` package. This provided the GC content and length for every gene and transcript in the release. For zebrafish, this consists of `r nrow(geneGcLen_Dr)` genes and `r nrow(trGcLen_Dr)` transcripts.

# Enrichment

```{r}
entrezGenes <- mcols(dgeFilt$genes) %>%
  as.data.frame() %>%
  dplyr::filter(!is.na(entrezid)) %>%
  unnest(cols = entrezid) %>%
  dplyr::rename(entrez_gene = entrezid)
```

```{r}
ranks_r <- tt_r %>%
      mutate(stat = -sign(logFC) * log10(P.Value)) %>%
      dplyr::arrange(stat) %>%
      with(structure(stat, names = Geneid))
```

```{r}
ranks_g <- tt_g %>%
  lapply(function(x){
    x %>%
      mutate(stat = -sign(logFC) * log10(P.Value)) %>%
      dplyr::arrange(stat) %>%
      with(structure(stat, names = Geneid))
  })
```

```{r}
ranks_gr <- tt_gr %>%
  lapply(function(x){
    x %>%
      mutate(stat = -sign(logFC) * log10(P.Value)) %>%
      dplyr::arrange(stat) %>%
      with(structure(stat, names = Geneid))
  })
```

```{r}
ranks_deconv <- tt_deconv %>%
  lapply(function(x){
    x %>%
      mutate(stat = -sign(logFC) * log10(P.Value)) %>%
      dplyr::arrange(stat) %>%
      with(structure(stat, names = Geneid))
  })
```

```{r}
displayRes_enrich <- function(x, cap){
  x %>%
    unnest(cols = leadingEdge) %>%
    group_by(pathway) %>%
    mutate(
      leadingSize = n(),
      pathway = str_remove(pathway, "HALLMARK_|KEGG_|WP_"),
      pathway = str_trunc(pathway, 33)
    ) %>%
    distinct(pathway, .keep_all = TRUE) %>%
    dplyr::select(-leadingEdge) %>%
    mutate(across(c("pval", "FDR", "padj"), ~ sprintf("%.2e", .x))) %>%
    datatable(
      options = list(pageLength = 10), 
      class = "striped hover condensed responsive", 
      filter = "top",
      caption = paste(cap)
    ) %>%
    formatRound(c("log2err", "ES", "NES"), digits = 2)
}
```

## Databases

```{r}
hm <- msigdbr("Danio rerio", category = "H")  %>% 
  left_join(entrezGenes) %>%
  dplyr::filter(!is.na(gene_id)) %>%
  distinct(gs_name, gene_id, .keep_all = TRUE)
hmByGene <- hm %>%
  split(f = .$gene_id) %>%
  lapply(extract2, "gs_name")
hmByID <- hm %>%
  split(f = .$gs_name) %>%
  lapply(extract2, "gene_id")
```

```{r}
kg <- msigdbr("Danio rerio", category = "C2", subcategory = "CP:KEGG")  %>% 
  left_join(entrezGenes) %>%
  dplyr::filter(!is.na(gene_id)) %>%
  distinct(gs_name, gene_id, .keep_all = TRUE)
kgByGene <- kg  %>%
  split(f = .$gene_id) %>%
  lapply(extract2, "gs_name")
kgByID <- kg  %>%
  split(f = .$gs_name) %>%
  lapply(extract2, "gene_id")
```

```{r}
wk <- msigdbr("Danio rerio", category = "C2", subcategory = "CP:WIKIPATHWAYS")  %>% 
  left_join(entrezGenes) %>%
  dplyr::filter(!is.na(gene_id)) %>%
  distinct(gs_name, gene_id, .keep_all = TRUE)
wkByGene <- wk  %>%
  split(f = .$gene_id) %>%
  lapply(extract2, "gs_name")
wkByID <- wk  %>%
  split(f = .$gs_name) %>%
  lapply(extract2, "gene_id")
```

```{r}
gsSizes <- bind_rows(hm, kg, wk) %>% 
  dplyr::select(gs_name, gene_symbol, gene_id) %>% 
  chop(c(gene_symbol, gene_id)) %>%
  mutate(
    gs_size = vapply(gene_symbol, length, integer(1))
  )
```

## Hallmark

### rRNA

```{r}
fgsea_r_hm <-fgsea(hmByID, ranks_r, eps = 0) %>%
  as_tibble() %>%
  dplyr::rename(FDR = padj) %>%
  mutate(padj = p.adjust(pval, "bonferroni")) %>%
  dplyr::arrange(pval)
```

```{r}
displayRes_enrich(fgsea_r_hm, "rRNA")
```

### Genotype

```{r}
fgsea_g_hm <- ranks_g %>%
  lapply(function(x){
    fgsea(hmByID, x, eps = 0) %>%
      as_tibble() %>%
      dplyr::rename(FDR = padj) %>%
      mutate(padj = p.adjust(pval, "bonferroni")) %>%
      dplyr::arrange(pval)
  })
```

```{r}
displayRes_enrich(fgsea_g_hm$groupHeter, "groupHeter")
```

```{r}
displayRes_enrich(fgsea_g_hm$groupHom, "groupHom")
```

### rRNA + genotype

```{r}
fgsea_gr_hm <- ranks_gr %>%
  lapply(function(x){
    fgsea(hmByID, x, eps = 0) %>%
      as_tibble() %>%
      dplyr::rename(FDR = padj) %>%
      mutate(padj = p.adjust(pval, "bonferroni")) %>%
      dplyr::arrange(pval)
  })
```

```{r}
displayRes_enrich(fgsea_gr_hm$rRNA, "rRNA")
```

```{r}
displayRes_enrich(fgsea_gr_hm$groupHeter, "groupHeter")
```

```{r}
displayRes_enrich(fgsea_gr_hm$groupHom, "groupHom")
```

### rRNA + genotype (deconvoluted)

```{r}
fgsea_deconv_hm <- ranks_deconv %>%
  lapply(function(x){
    fgsea(hmByID, x, eps = 0) %>%
      as_tibble() %>%
      dplyr::rename(FDR = padj) %>%
      mutate(padj = p.adjust(pval, "bonferroni")) %>%
      dplyr::arrange(pval)
  })
```

```{r}
displayRes_enrich(fgsea_deconv_hm$rRNA, "rRNA")
displayRes_enrich(fgsea_deconv_hm$groupHeter, "groupHeter")
displayRes_enrich(fgsea_deconv_hm$groupHom, "groupHom")
```

## KEGG

### rRNA

```{r}
fgsea_r_kg <-fgsea(kgByID, ranks_r, eps = 0) %>%
  as_tibble() %>%
  dplyr::rename(FDR = padj) %>%
  mutate(padj = p.adjust(pval, "bonferroni")) %>%
  dplyr::arrange(pval)
```

```{r}
displayRes_enrich(fgsea_r_kg, "rRNA")
```

### Genotype

```{r}
fgsea_g_kg <- ranks_g %>%
  lapply(function(x){
    fgsea(kgByID, x, eps = 0) %>%
      as_tibble() %>%
      dplyr::rename(FDR = padj) %>%
      mutate(padj = p.adjust(pval, "bonferroni")) %>%
      dplyr::arrange(pval)
  })
```

```{r}
displayRes_enrich(fgsea_g_kg$groupHeter, "groupHeter")
displayRes_enrich(fgsea_g_kg$groupHom, "groupHom")
```

### rRNA + genotype

```{r}
fgsea_gr_kg <- ranks_gr %>%
  lapply(function(x){
    fgsea(kgByID, x, eps = 0) %>%
      as_tibble() %>%
      dplyr::rename(FDR = padj) %>%
      mutate(padj = p.adjust(pval, "bonferroni")) %>%
      dplyr::arrange(pval)
  })
```

```{r}
displayRes_enrich(fgsea_gr_kg$rRNA, "rRNA")
displayRes_enrich(fgsea_gr_kg$groupHeter, "groupHeter")
displayRes_enrich(fgsea_gr_kg$groupHom, "groupHom")
```

### rRNA + genotype (deconvoluted)

```{r}
fgsea_deconv_kg <- ranks_deconv %>%
  lapply(function(x){
    fgsea(kgByID, x, eps = 0) %>%
      as_tibble() %>%
      dplyr::rename(FDR = padj) %>%
      mutate(padj = p.adjust(pval, "bonferroni")) %>%
      dplyr::arrange(pval)
  })
```

```{r}
displayRes_enrich(fgsea_deconv_kg$rRNA, "rRNA")
displayRes_enrich(fgsea_deconv_kg$groupHeter, "groupHeter")
displayRes_enrich(fgsea_deconv_kg$groupHom, "groupHom")
```

## Wikipathways

### rRNA

```{r}
fgsea_r_wk <-fgsea(wkByID, ranks_r, eps = 0) %>%
  as_tibble() %>%
  dplyr::rename(FDR = padj) %>%
  mutate(padj = p.adjust(pval, "bonferroni")) %>%
  dplyr::arrange(pval)
```

```{r}
displayRes_enrich(fgsea_r_wk, "rRNA")
```

### Genotype

```{r}
fgsea_g_wk <- ranks_g %>%
  lapply(function(x){
    fgsea(wkByID, x, eps = 0) %>%
      as_tibble() %>%
      dplyr::rename(FDR = padj) %>%
      mutate(padj = p.adjust(pval, "bonferroni")) %>%
      dplyr::arrange(pval)
  })
```

```{r}
displayRes_enrich(fgsea_g_wk$groupHeter, "groupHeter")
displayRes_enrich(fgsea_g_wk$groupHom, "groupHom")
```

### rRNA + genotype

```{r}
fgsea_gr_wk <- ranks_gr %>%
  lapply(function(x){
    fgsea(wkByID, x, eps = 0) %>%
      as_tibble() %>%
      dplyr::rename(FDR = padj) %>%
      mutate(padj = p.adjust(pval, "bonferroni")) %>%
      dplyr::arrange(pval)
  })
```

```{r}
displayRes_enrich(fgsea_gr_wk$rRNA, "rRNA")
displayRes_enrich(fgsea_gr_wk$groupHeter, "groupHeter")
displayRes_enrich(fgsea_gr_wk$groupHom, "groupHom")
```

### rRNA + genotype (deconvoluted)

```{r}
fgsea_deconv_wk <- ranks_deconv %>%
  lapply(function(x){
    fgsea(wkByID, x, eps = 0) %>%
      as_tibble() %>%
      dplyr::rename(FDR = padj) %>%
      mutate(padj = p.adjust(pval, "bonferroni")) %>%
      dplyr::arrange(pval)
  })
```

```{r}
displayRes_enrich(fgsea_deconv_wk$rRNA, "rRNA")
displayRes_enrich(fgsea_deconv_wk$groupHeter, "groupHeter")
displayRes_enrich(fgsea_deconv_wk$groupHom, "groupHom")
```

# Data export

```{r}

```

# Session info

```{r seshInfo}
sessionInfo()
```