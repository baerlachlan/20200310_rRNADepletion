---
title: "rRNADepletion_s4ter"
subtitle: "DGE Analysis"
author: "Lachlan Baer"
date-modified: today
date-format: "DD MMMM, YYYY"
modified-title: "LAST MODIFIED"
code-fold: true
fig-width: 8
fig-height: 6
fig-align: center
editor_options:
  chunk_output_type: console
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
    echo = TRUE,
    message = FALSE,
    warning = FALSE,
    error = FALSE, 
    fig.align = "center"
)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
```

# Setup 

```{r packages}
library(tidyverse)
library(magrittr)
library(ngsReports)
library(here)
library(scales)
library(ggpubr)
library(kableExtra)
library(AnnotationHub)
library(ensembldb)
library(edgeR)
library(corrplot)
library(DT)
library(ggrepel)
library(msigdbr)
library(fgsea)
library(pander)
```

```{r options}
if (interactive()) setwd(here::here())
theme_set(theme_bw())
```

# Sequence information

```{r ah}
ah_Dr <- AnnotationHub() %>%
    subset(species == "Danio rerio") %>%
    subset(rdataclass == "EnsDb")
ensDb <- ah_Dr[["AH83189"]]
trEns_Dr <- transcripts(ensDb) %>%
    mcols() %>% 
    as_tibble()
trLen_Dr <- exonsBy(ensDb, "tx") %>%
    width() %>%
    vapply(sum, integer(1))
geneGcLen_Dr <- trLen_Dr %>%
    enframe() %>%
    set_colnames(c("tx_id", "length")) %>%
    left_join(trEns_Dr) %>%
    group_by(gene_id) %>% 
    summarise(
        aveLen = mean(length),
        maxLen = max(length), 
        aveGc = sum(length * gc_content) / sum(length),
        longestGc = gc_content[which.max(length)[[1]]]
    ) %>%
    mutate(
        aveGc =  aveGc / 100,
        longestGc = longestGc / 100
    )
trGcLen_Dr <- trLen_Dr %>%
    enframe() %>%
    set_colnames(c("tx_id", "length")) %>%
    left_join(trEns_Dr) %>%
    group_by(tx_id) %>% 
    summarise(
        aveLen = mean(length),
        maxLen = max(length), 
        aveGc = sum(length * gc_content) / sum(length),
        longestGc = gc_content[which.max(length)[[1]]]
    ) %>%
    mutate(
        aveGc =  aveGc / 100,
        longestGc = longestGc / 100
    )
genesGR_Dr <- genes(ensDb)
mcols(genesGR_Dr) <- mcols(genesGR_Dr)[c("gene_id", "gene_name", 
                                         "gene_biotype", "entrezid")]
txGR_Dr <- transcripts(ensDb)
mcols(txGR_Dr) <- mcols(txGR_Dr)[c("tx_id", "tx_name", 
                                   "tx_biotype", "tx_id_version", "gene_id")]
```

An `EnsDb` object was obtained for Ensembl release 101 using the `AnnotationHub` package. This provided the GC content and length for every gene and transcript in the release. For zebrafish, this consists of `r nrow(geneGcLen_Dr)` genes and `r nrow(trGcLen_Dr)` transcripts.

# Raw data

This is a total RNA-seq dataset generated from a 3-way comparison of WT zebrafish (*Danio rerio*) with heterozygous mutants (psen2^S4Ter/+^) and homozygous mutants (psen2^S4Ter/S4Ter^). A [previous analysis](https://uofabioinformaticshub.github.io/20170327_Psen2S4Ter_RNASeq/index.html) of this dataset identified the possibility of incomplete ribosomal RNA (rRNA) removal. The following analysis involves an investigation into possible reasons for incomplete rRNA removal and any bias this introduces into the data.

## Sample information

```{r files}
files <- list.files(
    path = "/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/old_bash_analysis.0_rawData/FastQC",
    pattern = "zip",
    full.names = TRUE
)
```

```{r samples}
samples <- tibble(
    sample = str_remove(basename(files), "_fastqc.zip"),
    dataset = NA,
    organism = NA
) %>%
    mutate(
        dataset = ifelse(
            str_detect(sample, "Ps2Ex"), "Psen2S4Ter", dataset
        ),
        organism = ifelse(
            str_detect(sample, "Ps2Ex"), "zebrafish", organism
        )
    )
datasets <- samples$dataset %>% 
    unique()
```

The following analysis involves `r nrow(samples)/2` paired-end samples across `r length(datasets)` dataset(s): `r paste(datasets, sep = ", ")`.

## rRNA proportions

```{r rRnaProp}
rRnaProp <- read.delim(
    "/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/old_bash_analysis/3_bwa/log/samples.mapped.all", 
    sep = ":", 
    col.names = c("sample", "proportion"), 
    header = FALSE
) %>% 
    mutate(
        sample = str_remove_all(sample, "_6month_F3|[0-9]*_Ps2Ex3M1_|.mapped"),
        sample = basename(sample),
        proportion = proportion/100,
        dataset = "Psen2S4Ter",
        organism = "zebrafish",
        group = str_extract(sample, "(WT|Heter|Hom)")
    ) %>%
    as_tibble()
rRnaProp$dataset %<>%
    factor(levels = c("Psen2S4Ter"))
```

```{r rRnaPropBar, fig.cap="*Percentages of each library that align to rRNA sequences with `bwa mem`.*"}
rRnaProp %>%
    ggplot(aes(sample, proportion)) +
    geom_bar(stat = "identity", position = "dodge") +
    facet_wrap(~dataset, scales = "free_x") +
    scale_y_continuous(labels = percent) +
    labs(x = "Sample", y = "Percent of Total", fill = "Read pair") +
    theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

```{r rRnaPropBox}
rRnaProp %>%
    ggplot(aes(group, proportion, fill = group)) +
    geom_boxplot() +
    scale_y_continuous(labels = percent) +
    labs(x = "Genotype", y = "Percent of total RNA", title = "rRNA proportions of each genotype") +
    scale_fill_discrete(
        name = "Genotype"
    )
```

## Gene GC content and length

```{r counts}
# dgeList <- read_tsv("/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/old_bash_analysis.4_star2pass/featureCounts/genes.out") %>%
dgeList <- read_tsv(
    paste0(
        "/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter",
        "/smk-rnaseq-counts-1.2.2/results/featureCounts/reverse/all.featureCounts"
    ),
    comment = "#"
) %>%
    dplyr::select(-c(Chr, Start, End, Strand, Length)) %>%
    set_colnames(basename(colnames(.))) %>%
    set_colnames(str_remove(colnames(.), "\\.bam$")) %>%
    as.data.frame() %>%
    column_to_rownames("Geneid") %>%
    DGEList() %>%
    calcNormFactors()
```

```{r addInfo}
dgeList$genes <- genesGR_Dr[rownames(dgeList),]
mcols(dgeList$genes) %<>% 
    as.data.frame() %>% 
    left_join(geneGcLen_Dr)
addInfo <- tibble(
    sample = rRnaProp$sample,
    dataset = "Psen2S4Ter",
    organism = "zebrafish",
    rRNA = rRnaProp$proportion
)
dgeList$samples %<>%
    rownames_to_column("rowname") %>%
    mutate(sample = rowname) %>%
    left_join(addInfo) %>%
    column_to_rownames("rowname")
# dgeList$samples$filenames <- list.files(
#   "/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/old_bash_analysis.2_alignedData/bam", 
#   pattern = ".bam$", 
#   full.names = TRUE
# )
dgeList$samples$group <- colnames(dgeList) %>%
    str_extract("(WT|Heter|Hom)") %>%
    factor(levels = c("WT", "Heter", "Hom"))
```

```{r gcFunc}
gcInfo <- function(x) {
    x$counts %>%
        as.data.frame() %>%
        rownames_to_column("gene_id") %>%
        as_tibble() %>%
        pivot_longer(
            cols = colnames(x), 
            names_to = "sample", 
            values_to = "counts"
        ) %>%
        dplyr::filter(
            counts > 0
        ) %>%
        left_join(
            geneGcLen_Dr
        ) %>%
        dplyr::select(
            ends_with("id"), sample, counts, aveGc, maxLen
        ) %>%
        split(f = .$sample) %>%
        lapply(
            function(x){
                DataFrame(
                    gc = Rle(x$aveGc, x$counts),
                    logLen = Rle(log10(x$maxLen), x$counts)
                )
            }
        ) 
}
gcSummary <- function(x) {
    x %>%
        vapply(function(x){
            c(mean(x$gc), sd(x$gc), mean(x$logLen), sd(x$logLen))
        }, numeric(4)
        ) %>%
        t() %>%
        set_colnames(
            c("mn_gc", "sd_gc", "mn_logLen", "sd_logLen")
        ) %>%
        as.data.frame() %>%
        rownames_to_column("sample") %>%
        as_tibble()
}
```

```{r rle}
rle <- gcInfo(dgeList)
```

```{r gcSummary}
sumGc <- gcSummary(rle)
```

```{r gc, fig.height=4, fig.cap="*Comparison of residual bias potentially introduced by incomplete rRNA removal. Regression lines are shown along with standard error bands for each comparison.*"}
a <- sumGc %>%
    left_join(dgeList$samples) %>%
    ggplot(aes(rRNA, mn_logLen)) +
    geom_point(aes(colour = group), size = 3) +
    geom_smooth(method = "lm") +
    scale_x_continuous(labels = percent) +
    labs(
        x = "rRNA Proportion of Initial Library",
        y = "Mean log(Length)",
        colour = "Genotype"
    ) 
b <- sumGc %>%
    left_join(dgeList$samples) %>%
    ggplot(aes(rRNA, mn_gc)) +
    geom_point(aes(colour = group), size = 3) +
    geom_smooth(method = "lm") +
    scale_y_continuous(labels = percent) +
    scale_x_continuous(labels = percent) +
    labs(
        x = "rRNA Proportion of Initial Library",
        y = "Mean GC Content",
        colour = "Genotype"
    )
ggarrange(
    a, b, ncol = 2, nrow = 1, 
    common.legend = TRUE, legend = "bottom"
) %>%
    annotate_figure("PsenS4Ter Dataset (D. rerio)")
```

## PCA 

```{r dgeFilt}
genes2keep <- dgeList %>%
    cpm() %>%
    is_greater_than(1) %>%
    rowSums() %>%
    is_weakly_greater_than(4)
dgeFilt <- dgeList[genes2keep,, keep.lib.sizes = FALSE] %>%
    calcNormFactors()
```

```{r pca}
pca <- cpm(dgeFilt, log = TRUE) %>%
    t() %>%
    prcomp()
```

```{r pcaCor}
pcaCor <- pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    left_join(sumGc) %>%
    as_tibble() %>% 
    left_join(dgeList$samples) %>%
    dplyr::select(
        PC1, PC2, PC3, 
        Mean_GC = mn_gc, 
        Mean_Length = mn_logLen, 
        rRna_Proportion = rRNA
    ) %>% 
    cor()
```

```{r pcaPlots, fig.cap="*PCA plot showing rRNA proportion, mean GC content and mean log(length) after summarisation to gene-level.*"}
a <- pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    left_join(dgeList$samples) %>%
    as_tibble() %>%
    ggplot(aes(PC1, PC2)) +
    geom_point(aes(colour = group), size = 2) +
    labs(
        x = paste0("PC1 (", percent(summary(pca)$importance["Proportion of Variance","PC1"]),")"),
        y = paste0("PC2 (", percent(summary(pca)$importance["Proportion of Variance","PC2"]),")"),
        colour = "Genotype"
    )
b <- pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    left_join(dgeList$samples) %>%
    ggplot(aes(PC1, rRNA, label = rRNA)) +
    geom_point(aes(colour = group), size = 2) +
    geom_smooth(method = "lm") +
    geom_text_repel(show.legend = FALSE) +
    scale_y_continuous(labels = percent) +
    labs(
        x = paste0("PC1 (", percent(summary(pca)$importance["Proportion of Variance","PC1"]),")"),
        y = "rRNA Proportion of Initial Library",
        colour = "Genotype"
    )
c <- pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    left_join(sumGc) %>%
    left_join(dgeList$samples) %>%
    as_tibble() %>%
    ggplot(aes(PC1, mn_logLen)) +
    geom_point(aes(colour = group), size = 2) +
    geom_smooth(method = "lm") +
    labs(
        x = paste0("PC1 (", percent(summary(pca)$importance["Proportion of Variance","PC1"]),")"),
        y = "Mean log(Length)",
        colour = "Genotype"
    )
d <- pca$x %>%
    as.data.frame() %>%
    rownames_to_column("sample") %>%
    left_join(sumGc) %>%
    left_join(dgeList$samples) %>%
    as_tibble() %>%
    ggplot(aes(PC1, mn_gc)) +
    geom_point(aes(colour = group), size = 2) +
    geom_smooth(method = "lm") +
    scale_y_continuous(labels = percent) +
    labs(
        x = paste0("PC1 (", percent(summary(pca)$importance["Proportion of Variance","PC1"]),")"),
        y = "Mean GC",
        colour = "Genotype"
    )
ggarrange(
    a, b, c, d, ncol = 2, nrow = 2,
    common.legend = TRUE, legend = "bottom"
) %>%
    annotate_figure("Psen2S4Ter")
```

```{r corrplot, fig.cap="*Correlations between the first three principal components and measured variables: mean GC content, mean log(length) and rRNA proportion.*"}
corrplot(
    pcaCor,
    type = "lower", 
    diag = FALSE, 
    addCoef.col = 1, addCoefasPercent = TRUE
)
```

# Differential expression

```{r}
displayRes_de <- function(x){
    de <- x %>%
        dplyr::filter(DE)
    de %>%
        dplyr::slice(1:1000) %>%
        dplyr::select(-gene_biotype, -coef, -DE) %>%
        mutate(across(c("P.Value", "FDR", "Bonf"), ~ sprintf("%.2e", .x))) %>%
        datatable(
            options = list(pageLength = 10), 
            class = "striped hover condensed responsive", 
            filter = "top",
            caption = paste0(
                x$coef[1],
                ": ",
                nrow(de),
                " of ",
                nrow(x),
                " genes were classified as differentially expressed ",
                "with a FDR < 0.05. ",
                "If more than 1000 genes were classified as DE, only the top 1000 are shown."
            )
        ) %>%
        formatRound(c("logFC", "logCPM", "F"), digits = 2)
}
```

## rRNA

```{r}
design_r <- model.matrix(~rRNA, data = dgeFilt$samples)
```

```{r}
disp_r <- estimateDisp(dgeFilt, design_r)
plotBCV(disp_r)
```

```{r}
fit_r <- glmQLFit(disp_r)
plotQLDisp(fit_r)
```

```{r}
tt_r <- glmQLFTest(fit_r) %>%
    topTags(n = Inf) %>%
    .[["table"]] %>%
    rename_all(
        str_remove, pattern = "ID."
    ) %>%
    dplyr::select(
        Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, 
        P.Value = PValue, FDR, aveLen, maxLen, aveGc, longestGc
    ) %>%
    as_tibble() %>%
    mutate(
        Bonf = p.adjust(P.Value, "bonf"),
        DE = FDR < 0.05
    )
```

```{r}
tt_r %>%
    dplyr::filter(DE) %>%
    dplyr::slice(1:1000) %>%
    dplyr::select(-gene_biotype, -DE, -aveLen, -maxLen, -aveGc, -longestGc) %>%
    mutate(across(c("P.Value", "FDR", "Bonf"), ~ sprintf("%.2e", .x))) %>%
    datatable(
        options = list(pageLength = 10), 
        class = "striped hover condensed responsive", 
        filter = "top",
        caption = paste0(
            "rRNA: ",
            nrow(dplyr::filter(tt_r, DE)),
            " of ",
            nrow(tt_r),
            " genes were classified as differentially expressed ",
            "with a FDR < 0.05. ",
            "If more than 1000 genes were classified as DE, only the top 1000 are shown."
        )
    ) %>%
    formatRound(c("logFC", "logCPM", "F"), digits = 2)
```

## Genotype

```{r}
design_g <- model.matrix(~group, data = dgeFilt$samples)
```

```{r}
disp_g <- estimateDisp(dgeFilt, design_g)
plotBCV(disp_g)
```

```{r}
fit_g <- glmQLFit(disp_g)
plotQLDisp(fit_g)
```

```{r}
tt_g <- colnames(design_g) %>%
    str_subset("Intercept", negate = TRUE) %>%
    sapply(function(x){
        glmQLFTest(fit_g, coef = x) %>%
            topTags(n = Inf) %>%
            .[["table"]] %>%
            rename_all(
                str_remove, pattern = "ID."
            ) %>%
            dplyr::select(
                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, 
                P.Value = PValue, FDR
            ) %>%
            as_tibble() %>%
            mutate(
                Bonf = p.adjust(P.Value, "bonf"), 
                coef = x,
                DE = FDR < 0.05
            )
    },
    simplify = FALSE)
```

```{r}
displayRes_de(tt_g$groupHeter)
displayRes_de(tt_g$groupHom)
```

## rRNA + genotype

```{r}
design_gr <- model.matrix(~rRNA + group, data = dgeFilt$samples)
```

```{r}
disp_gr <- estimateDisp(dgeFilt, design_gr)
plotBCV(disp_gr)
```

```{r}
fit_gr <- glmQLFit(disp_gr)
plotQLDisp(fit_gr)
```

```{r}
tt_gr <- colnames(design_gr) %>%
    str_subset("Intercept", negate = TRUE) %>%
    sapply(function(x){
        glmQLFTest(fit_gr, coef = x) %>%
            topTags(n = Inf) %>%
            .[["table"]] %>%
            rename_all(
                str_remove, pattern = "ID."
            ) %>%
            dplyr::select(
                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, 
                P.Value = PValue, FDR,
            ) %>%
            as_tibble() %>%
            mutate(
                Bonf = p.adjust(P.Value, "bonf"), 
                coef = x,
                DE = FDR < 0.05
            )
    },
    simplify = FALSE)
```

```{r}
displayRes_de(tt_gr$rRNA)
displayRes_de(tt_gr$groupHeter)
displayRes_de(tt_gr$groupHom)
```

## rRNA + genotype (deconvoluted)

```{r}
design_deconv <- design_gr %>%
    as.data.frame() %>%
    rownames_to_column("ID") %>%
    mutate(
        groupWT = as.integer(str_detect(ID, "WT")),
        across(
            .cols = starts_with("group"),
            .fns = function(x){
                x <- x - .$rRNA
                x[x<0] <- 0
                x
            }
        )
    ) %>%
    dplyr::select(
        ID, rRNA, starts_with("group")
    ) %>%
    column_to_rownames("ID") %>%
    as.matrix()
cont_deconv <-makeContrasts(
    groupHeter = groupHeter - groupWT,
    groupHom = groupHom - groupWT,
    rRNA = rRNA,
    levels = colnames(design_deconv)
)
```

```{r}
disp_deconv <- estimateDisp(dgeFilt, design_deconv)
plotBCV(disp_deconv)
```

```{r}
fit_deconv <- glmQLFit(disp_deconv)
plotQLDisp(fit_deconv)
```

```{r}
tt_deconv <- colnames(cont_deconv) %>%
    sapply(function(x){
        glmQLFTest(fit_deconv, contrast = cont_deconv[,x]) %>%
            topTags(n = Inf) %>%
            .[["table"]] %>%
            rename_all(
                str_remove, pattern = "ID."
            ) %>%
            dplyr::select(
                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, 
                P.Value = PValue, FDR,
            ) %>%
            as_tibble() %>%
            mutate(
                Bonf = p.adjust(P.Value, "bonf"), 
                coef = x,
                DE = FDR < 0.05
            )
    },
    simplify = FALSE)
```

```{r}
displayRes_de(tt_deconv$rRNA)
displayRes_de(tt_deconv$groupHeter)
displayRes_de(tt_deconv$groupHom)
```

# Data export

```{r}
saveRDS(addInfo, here("1_Psen2S4Ter/Rdata/addInfo.Rds"))
saveRDS(dgeList, here("1_Psen2S4Ter/Rdata/dgeList.Rds"))
saveRDS(dgeFilt, here("1_Psen2S4Ter/Rdata/dgeFilt.Rds"))
saveRDS(tt_r, here("1_Psen2S4Ter/Rdata/tt_r.Rds"))
saveRDS(tt_g, here("1_Psen2S4Ter/Rdata/tt_g.Rds"))
saveRDS(tt_gr, here("1_Psen2S4Ter/Rdata/tt_gr.Rds"))
saveRDS(tt_deconv, here("1_Psen2S4Ter/Rdata/tt_deconv.Rds"))
```

# Session info

```{r seshInfo}
pander(sessionInfo())
```