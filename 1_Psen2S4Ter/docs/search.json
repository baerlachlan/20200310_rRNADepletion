[
  {
    "objectID": "kmer.html",
    "href": "kmer.html",
    "title": "rRNADepletion_s4ter",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(magrittr)\nlibrary(parallel)\nlibrary(pander)\nlibrary(here)\nlibrary(scales)\nlibrary(ggpubr)\nlibrary(kableExtra)\nlibrary(edgeR)\nlibrary(DT)\nlibrary(ggrepel)\nlibrary(pheatmap)\nlibrary(ggdendro)\n\n\n\n\nCode\nif (interactive()) setwd(here::here())\ntheme_set(theme_bw())\n\n\n\n\nCode\n# load(\n#     here::here(\"1_Psen2S4Ter/R/output/1_1_DE.RData\")\n# )",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-5",
    "href": "kmer.html#k-5",
    "title": "rRNADepletion_s4ter",
    "section": "k = 5",
    "text": "k = 5\n\nCounts\n\n\nCode\nk5files &lt;- list.files(\n    \"/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k5\",\n    pattern = \".dumps\", full.names = TRUE\n)\nk5counts &lt;- lapply(k5files, function(x){\n    read_delim(x, col_names = c(\"mer\", basename(x)), delim = \" \") %&gt;%\n        set_colnames(str_remove_all(colnames(.), \"_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\\\.dumps\"))\n}) %&gt;%\n    purrr::reduce(full_join)\n# %&gt;%\n    # dplyr::select(mer, contains(c(\"WT\", \"Heter\")))\n\n\n\n\nCode\nk5dge &lt;- k5counts %&gt;%\n    as.data.frame() %&gt;%\n    column_to_rownames(\"mer\") %&gt;%\n    DGEList() %&gt;%\n    calcNormFactors()\nk5dge$samples %&lt;&gt;%\n    rownames_to_column(\"rowname\") %&gt;%\n    mutate(sample = rowname) %&gt;%\n    left_join(addInfo) %&gt;%\n    column_to_rownames(\"rowname\")\nk5dge$samples$group &lt;- colnames(k5dge) %&gt;%\n    str_extract(\"(WT|Heter|Hom)\") %&gt;%\n    factor(levels = c(\"WT\", \"Heter\", \"Hom\"))\n\n\n\n\nProperties\n\n\nCode\nk5dist &lt;- k5dge %&gt;%\n    cpm(log = TRUE) %&gt;%\n    as.data.frame() %&gt;%\n    pivot_longer(everything(), names_to = \"sample\", values_to = \"count\") %&gt;%\n    ggplot(aes(x=count, colour = sample)) +\n    geom_density() +\n    labs(x = \"intensity\", title = \"Distribution of 5-mers\")\n\n\n\n\nCode\nk5labels &lt;- k5dge$samples %&gt;% \n    mutate(label = paste0(sample, \"\\n\", percent(rRNA, accuracy = 0.01), \" rRNA\")) %&gt;% \n    .$label\nk5heat &lt;- k5dge %&gt;% \n    cpm(log = TRUE) %&gt;%\n    as.data.frame() %&gt;%\n    t() %&gt;%\n    pheatmap(silent = TRUE, cluster_cols = FALSE,\n             show_colnames = FALSE, fontsize = 9,\n             fontsize_row = 10, border_color = NA,\n             main = \"5-mer counts heatmap\", labels_row = k5labels)\nk5heat$tree_row$labels &lt;- k5labels\nk5den &lt;- ggdendrogram(k5heat$tree_row, rotate = TRUE) +\n    labs(title = \"Hierarchical clustering of 5-mer counts\") +\n    theme(plot.title = element_text(size = 12))\n\n\n\n\nCode\n# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes\nk5pca &lt;- k5dge %&gt;%\n    cpm(log = TRUE) %&gt;%\n    t() %&gt;%\n    prcomp()\n\n\n\n\nCode\n# Quick inspection to check whether first two PCA components capture most of the variability\nsummary(k5pca)$importance %&gt;% pander(split.tables = Inf)\n\n\n\n\nCode\nk5pcaPlot &lt;- k5pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    as_tibble() %&gt;%\n    dplyr::select(sample, PC1, PC2) %&gt;%\n    left_join(k5dge$samples) %&gt;%\n    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +\n    geom_point(alpha = 0.8, size = 3) +\n    geom_text_repel(show.legend = FALSE) +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(k5pca)$importance[2, \"PC1\"]), \")\"),\n        y = paste0(\"PC2 (\", percent(summary(k5pca)$importance[2, \"PC2\"]), \")\"),\n        colour = \"Genotype\",\n        title = \"k = 5\"\n    ) +\n    scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nCode\nk5pcaRrna &lt;- k5pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    as_tibble() %&gt;%\n    dplyr::select(sample, PC1, PC2) %&gt;%\n    left_join(k5dge$samples) %&gt;%\n    ggplot(aes(PC1, rRNA, label = rRNA)) +\n    geom_point(aes(colour = group), alpha = 0.8, size = 3) +\n    geom_text_repel(show.legend = FALSE) +\n    geom_smooth(method = \"lm\") +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(k5pca)$importance[2, \"PC1\"]), \")\"),\n        y = \"rRNA proportion\",\n        colour = \"Genotype\",\n        title = \"k = 5\"\n    ) +\n    scale_y_continuous(labels = percent) +\n    scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nDifferential expression\n\n\nCode\nk5design &lt;- model.matrix(~rRNA, data = k5dge$samples)\nk5disp &lt;- estimateDisp(k5dge, k5design)\nk5fit &lt;- glmQLFit(k5disp)\nk5topTable &lt;- glmQLFTest(k5fit) %&gt;%\n    topTags(n = Inf) %&gt;%\n    .[[\"table\"]] %&gt;%\n    rownames_to_column(\"mer\") %&gt;%\n    dplyr::select(\n        mer,\n        logFC,\n        logCPM,\n        F,\n        P.Value = PValue,\n        FDR,\n    ) %&gt;%\n    as_tibble() %&gt;%\n    mutate(\n        BY = p.adjust(P.Value, \"BY\"),\n        DE = BY &lt; 0.05\n    )",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-6",
    "href": "kmer.html#k-6",
    "title": "rRNADepletion_s4ter",
    "section": "k = 6",
    "text": "k = 6\n\nCounts\n\n\nCode\nk6files &lt;- list.files(\n    \"/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k6\",\n    pattern = \".dumps\", full.names = TRUE\n)\nk6counts &lt;- lapply(k6files, function(x){\n    read_delim(x, col_names = c(\"mer\", basename(x)), delim = \" \") %&gt;%\n        set_colnames(str_remove_all(colnames(.), \"_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\\\.dumps\"))\n}) %&gt;%\n    purrr::reduce(full_join)\n# %&gt;%\n    # dplyr::select(mer, contains(c(\"WT\", \"Heter\")))\n\n\n\n\nCode\nk6dge &lt;- k6counts %&gt;%\n    as.data.frame() %&gt;%\n    column_to_rownames(\"mer\") %&gt;%\n    DGEList() %&gt;%\n    calcNormFactors()\nk6dge$samples %&lt;&gt;%\n    rownames_to_column(\"rowname\") %&gt;%\n    mutate(sample = rowname) %&gt;%\n    left_join(addInfo) %&gt;%\n    column_to_rownames(\"rowname\")\nk6dge$samples$group &lt;- colnames(k6dge) %&gt;%\n    str_extract(\"(WT|Heter|Hom)\") %&gt;%\n    factor(levels = c(\"WT\", \"Heter\", \"Hom\"))\n\n\n\n\nProperties\n\n\nCode\nk6dist &lt;- k6dge %&gt;%\n    cpm(log = TRUE) %&gt;%\n    as.data.frame() %&gt;%\n    pivot_longer(everything(), names_to = \"sample\", values_to = \"count\") %&gt;%\n    ggplot(aes(x=count, colour = sample)) +\n    geom_density() +\n    labs(x = \"intensity\", title = \"Distribution of 6-mers\")\n\n\n\n\nCode\nk6labels &lt;- k6dge$samples %&gt;% \n    mutate(label = paste0(sample, \"\\n\", percent(rRNA, accuracy = 0.01), \" rRNA\")) %&gt;% \n    .$label\nk6heat &lt;- k6dge %&gt;% \n    cpm(log = TRUE) %&gt;%\n    as.data.frame() %&gt;%\n    t() %&gt;%\n    pheatmap(silent = TRUE, cluster_cols = FALSE,\n             show_colnames = FALSE, fontsize = 9,\n             fontsize_row = 10, border_color = NA,\n             main = \"6-mer counts heatmap\", labels_row = k6labels)\nk6heat$tree_row$labels &lt;- k6labels\nk6den &lt;- ggdendrogram(k6heat$tree_row, rotate = TRUE) +\n    labs(title = \"Hierarchical clustering of 6-mer counts\") +\n    theme(plot.title = element_text(size = 12))\n\n\n\n\nCode\n# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes\nk6pca &lt;- k6dge %&gt;%\n    cpm(log = TRUE) %&gt;%\n    t() %&gt;%\n    prcomp()\n\n\n\n\nCode\n# Quick inspection to check whether first two PCA components capture most of the variability\nsummary(k6pca)$importance %&gt;% pander(split.tables = Inf)\n\n\n\n\nCode\nk6pcaPlot &lt;- k6pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    as_tibble() %&gt;%\n    dplyr::select(sample, PC1, PC2) %&gt;%\n    left_join(k6dge$samples) %&gt;%\n    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +\n    geom_point(alpha = 0.8, size = 3) +\n    geom_text_repel(show.legend = FALSE) +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(k6pca)$importance[2, \"PC1\"]), \")\"),\n        y = paste0(\"PC2 (\", percent(summary(k6pca)$importance[2, \"PC2\"]), \")\"),\n        colour = \"Genotype\",\n        title = \"k = 6\"\n    ) +\n    scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nCode\nk6pcaRrna &lt;- k6pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    as_tibble() %&gt;%\n    dplyr::select(sample, PC1, PC2) %&gt;%\n    left_join(k6dge$samples) %&gt;%\n    ggplot(aes(PC1, rRNA, label = rRNA)) +\n    geom_point(aes(colour = group), alpha = 0.8, size = 3) +\n    geom_text_repel(show.legend = FALSE) +\n    geom_smooth(method = \"lm\") +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(k6pca)$importance[2, \"PC1\"]), \")\"),\n        y = \"rRNA proportion\",\n        colour = \"Genotype\",\n        title = \"k = 6\"\n    ) +\n    scale_y_continuous(labels = percent) +\n    scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nDifferential expression\n\n\nCode\nk6design &lt;- model.matrix(~rRNA, data = k6dge$samples)\nk6disp &lt;- estimateDisp(k6dge, k6design)\nk6fit &lt;- glmQLFit(k6disp)\nk6topTable &lt;- glmQLFTest(k6fit) %&gt;%\n    topTags(n = Inf) %&gt;%\n    .[[\"table\"]] %&gt;%\n    rownames_to_column(\"mer\") %&gt;%\n    dplyr::select(\n        mer,\n        logFC,\n        logCPM,\n        F,\n        P.Value = PValue,\n        FDR,\n    ) %&gt;%\n    as_tibble() %&gt;%\n    mutate(\n        BY = p.adjust(P.Value, \"BY\"),\n        DE = BY &lt; 0.05\n    )",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-7",
    "href": "kmer.html#k-7",
    "title": "rRNADepletion_s4ter",
    "section": "k = 7",
    "text": "k = 7\n\nCounts\n\n\nCode\nk7files &lt;- list.files(\n    \"/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k7\",\n    pattern = \".dumps\", full.names = TRUE\n)\nk7counts &lt;- lapply(k7files, function(x){\n    read_delim(x, col_names = c(\"mer\", basename(x)), delim = \" \") %&gt;%\n        set_colnames(str_remove_all(colnames(.), \"_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\\\.dumps\"))\n}) %&gt;%\n    purrr::reduce(full_join)\n# %&gt;%\n    # dplyr::select(mer, contains(c(\"WT\", \"Heter\")))\n\n\n\n\nCode\nk7dge &lt;- k7counts %&gt;%\n    as.data.frame() %&gt;%\n    column_to_rownames(\"mer\") %&gt;%\n    DGEList() %&gt;%\n    calcNormFactors()\nk7dge$samples %&lt;&gt;%\n    rownames_to_column(\"rowname\") %&gt;%\n    mutate(sample = rowname) %&gt;%\n    left_join(addInfo) %&gt;%\n    column_to_rownames(\"rowname\")\nk7dge$samples$group &lt;- colnames(k7dge) %&gt;%\n    str_extract(\"(WT|Heter|Hom)\") %&gt;%\n    factor(levels = c(\"WT\", \"Heter\", \"Hom\"))\n\n\n\n\nProperties\n\n\nCode\nk7dist &lt;- k7dge %&gt;%\n    cpm(log = TRUE) %&gt;%\n    as.data.frame() %&gt;%\n    pivot_longer(everything(), names_to = \"sample\", values_to = \"count\") %&gt;%\n    ggplot(aes(x=count, colour = sample)) +\n    geom_density() +\n    labs(x = \"intensity\", title = \"Distribution of 7-mers\")\n\n\n\n\nCode\nk7labels &lt;- k7dge$samples %&gt;% \n    mutate(label = paste0(sample, \"\\n\", percent(rRNA, accuracy = 0.01), \" rRNA\")) %&gt;% \n    .$label\nk7heat &lt;- k7dge %&gt;% \n    cpm(log = TRUE) %&gt;%\n    as.data.frame() %&gt;%\n    t() %&gt;%\n    pheatmap(silent = TRUE, cluster_cols = FALSE,\n             show_colnames = FALSE, fontsize = 9,\n             fontsize_row = 10, border_color = NA,\n             main = \"7-mer counts heatmap\", labels_row = k7labels)\nk7heat$tree_row$labels &lt;- k7labels\nk7den &lt;- ggdendrogram(k7heat$tree_row, rotate = TRUE) +\n    labs(title = \"Hierarchical clustering of 7-mer counts\") +\n    theme(plot.title = element_text(size = 12))\n\n\n\n\nCode\n# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes\nk7pca &lt;- k7dge %&gt;%\n    cpm(log = TRUE) %&gt;%\n    t() %&gt;%\n    prcomp()\n\n\n\n\nCode\n# Quick inspection to check whether first two PCA components capture most of the variability\nsummary(k7pca)$importance %&gt;% pander(split.tables = Inf)\n\n\n\n\nCode\nk7pcaPlot &lt;- k7pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    as_tibble() %&gt;%\n    dplyr::select(sample, PC1, PC2) %&gt;%\n    left_join(k7dge$samples) %&gt;%\n    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +\n    geom_point(alpha = 0.8, size = 3) +\n    geom_text_repel(show.legend = FALSE) +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(k7pca)$importance[2, \"PC1\"]), \")\"),\n        y = paste0(\"PC2 (\", percent(summary(k7pca)$importance[2, \"PC2\"]), \")\"),\n        colour = \"Genotype\",\n        title = \"k = 7\"\n    ) +\n    scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nCode\nk7pcaRrna &lt;- k7pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    as_tibble() %&gt;%\n    dplyr::select(sample, PC1, PC2) %&gt;%\n    left_join(k7dge$samples) %&gt;%\n    ggplot(aes(PC1, rRNA, label = rRNA)) +\n    geom_point(aes(colour = group), alpha = 0.8, size = 3) +\n    geom_text_repel(show.legend = FALSE) +\n    geom_smooth(method = \"lm\") +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(k7pca)$importance[2, \"PC1\"]), \")\"),\n        y = \"rRNA proportion\",\n        colour = \"Genotype\",\n        title = \"k = 7\"\n    ) +\n    scale_y_continuous(labels = percent) +\n    scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nDifferential expression\n\n\nCode\nk7design &lt;- model.matrix(~rRNA, data = k7dge$samples)\nk7disp &lt;- estimateDisp(k7dge, k7design)\nk7fit &lt;- glmQLFit(k7disp)\nk7topTable &lt;- glmQLFTest(k7fit) %&gt;%\n    topTags(n = Inf) %&gt;%\n    .[[\"table\"]] %&gt;%\n    rownames_to_column(\"mer\") %&gt;%\n    dplyr::select(\n        mer,\n        logFC,\n        logCPM,\n        F,\n        P.Value = PValue,\n        FDR,\n    ) %&gt;%\n    as_tibble() %&gt;%\n    mutate(\n        BY = p.adjust(P.Value, \"BY\"),\n        DE = BY &lt; 0.05\n    )",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-8",
    "href": "kmer.html#k-8",
    "title": "rRNADepletion_s4ter",
    "section": "k = 8",
    "text": "k = 8\n\nCounts\n\n\nCode\nk8files &lt;- list.files(\n    \"/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k8\",\n    pattern = \".dumps\", full.names = TRUE\n)\nk8counts &lt;- lapply(k8files, function(x){\n    read_delim(x, col_names = c(\"mer\", basename(x)), delim = \" \") %&gt;%\n        set_colnames(str_remove_all(colnames(.), \"_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\\\.dumps\"))\n}) %&gt;%\n    purrr::reduce(full_join)\n# %&gt;%\n    # dplyr::select(mer, contains(c(\"WT\", \"Heter\")))\n\n\n\n\nCode\nk8dge &lt;- k8counts %&gt;%\n    as.data.frame() %&gt;%\n    column_to_rownames(\"mer\") %&gt;%\n    DGEList() %&gt;%\n    calcNormFactors()\nk8dge$samples %&lt;&gt;%\n    rownames_to_column(\"rowname\") %&gt;%\n    mutate(sample = rowname) %&gt;%\n    left_join(addInfo) %&gt;%\n    column_to_rownames(\"rowname\")\nk8dge$samples$group &lt;- colnames(k8dge) %&gt;%\n    str_extract(\"(WT|Heter|Hom)\") %&gt;%\n    factor(levels = c(\"WT\", \"Heter\", \"Hom\"))\n\n\n\n\nProperties\n\n\nCode\nk8dist &lt;- k8dge %&gt;%\n    cpm(log = TRUE) %&gt;%\n    as.data.frame() %&gt;%\n    pivot_longer(everything(), names_to = \"sample\", values_to = \"count\") %&gt;%\n    ggplot(aes(x=count, colour = sample)) +\n    geom_density() +\n    labs(x = \"intensity\", title = \"Distribution of 8-mers\")\n\n\n\n\nCode\nk8labels &lt;- k8dge$samples %&gt;% \n    mutate(label = paste0(sample, \"\\n\", percent(rRNA, accuracy = 0.01), \" rRNA\")) %&gt;% \n    .$label\nk8heat &lt;- k8dge %&gt;% \n    cpm(log = TRUE) %&gt;%\n    as.data.frame() %&gt;%\n    t() %&gt;%\n    pheatmap(silent = TRUE, cluster_cols = FALSE,\n             show_colnames = FALSE, fontsize = 9,\n             fontsize_row = 10, border_color = NA,\n             main = \"8-mer counts heatmap\", labels_row = k8labels)\nk8heat$tree_row$labels &lt;- k8labels\nk8den &lt;- ggdendrogram(k8heat$tree_row, rotate = TRUE) +\n    labs(title = \"Hierarchical clustering of 8-mer counts\") +\n    theme(plot.title = element_text(size = 12))\n\n\n\n\nCode\n# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes\nk8pca &lt;- k8dge %&gt;%\n    cpm(log = TRUE) %&gt;%\n    t() %&gt;%\n    prcomp()\n\n\n\n\nCode\n# Quick inspection to check whether first two PCA components capture most of the variability\nsummary(k8pca)$importance %&gt;% pander(split.tables = Inf)\n\n\n\n\nCode\nk8pcaPlot &lt;- k8pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    as_tibble() %&gt;%\n    dplyr::select(sample, PC1, PC2) %&gt;%\n    left_join(k8dge$samples) %&gt;%\n    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +\n    geom_point(alpha = 0.8, size = 3) +\n    geom_text_repel(show.legend = FALSE) +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(k8pca)$importance[2, \"PC1\"]), \")\"),\n        y = paste0(\"PC2 (\", percent(summary(k8pca)$importance[2, \"PC2\"]), \")\"),\n        colour = \"Genotype\",\n        title = \"k = 8\"\n    ) +\n    scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nCode\nk8pcaRrna &lt;- k8pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    as_tibble() %&gt;%\n    dplyr::select(sample, PC1, PC2) %&gt;%\n    left_join(k8dge$samples) %&gt;%\n    ggplot(aes(PC1, rRNA, label = rRNA)) +\n    geom_point(aes(colour = group), alpha = 0.8, size = 3) +\n    geom_text_repel(show.legend = FALSE) +\n    geom_smooth(method = \"lm\") +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(k8pca)$importance[2, \"PC1\"]), \")\"),\n        y = \"rRNA proportion\",\n        colour = \"Genotype\",\n        title = \"k = 8\"\n    ) +\n    scale_y_continuous(labels = percent) +\n    scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nDifferential expression\n\n\nCode\nk8design &lt;- model.matrix(~rRNA, data = k8dge$samples)\nk8disp &lt;- estimateDisp(k8dge, k8design)\nk8fit &lt;- glmQLFit(k8disp)\nk8topTable &lt;- glmQLFTest(k8fit) %&gt;%\n    topTags(n = Inf) %&gt;%\n    .[[\"table\"]] %&gt;%\n    rownames_to_column(\"mer\") %&gt;%\n    dplyr::select(\n        mer,\n        logFC,\n        logCPM,\n        F,\n        P.Value = PValue,\n        FDR,\n    ) %&gt;%\n    as_tibble() %&gt;%\n    mutate(\n        BY = p.adjust(P.Value, \"BY\"),\n        DE = BY &lt; 0.05\n    )",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-9",
    "href": "kmer.html#k-9",
    "title": "rRNADepletion_s4ter",
    "section": "k = 9",
    "text": "k = 9\n\nCounts\n\n\nCode\nk9files &lt;- list.files(\n    \"/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k9\",\n    pattern = \".dumps\", full.names = TRUE\n)\nk9counts &lt;- lapply(k9files, function(x){\n    read_delim(x, col_names = c(\"mer\", basename(x)), delim = \" \") %&gt;%\n        set_colnames(str_remove_all(colnames(.), \"_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\\\.dumps\"))\n}) %&gt;%\n    purrr::reduce(full_join)\n# %&gt;%\n    # dplyr::select(mer, contains(c(\"WT\", \"Heter\")))\n\n\n\n\nCode\nk9dge &lt;- k9counts %&gt;%\n    as.data.frame() %&gt;%\n    column_to_rownames(\"mer\") %&gt;%\n    DGEList() %&gt;%\n    calcNormFactors()\nk9dge$samples %&lt;&gt;%\n    rownames_to_column(\"rowname\") %&gt;%\n    mutate(sample = rowname) %&gt;%\n    left_join(addInfo) %&gt;%\n    column_to_rownames(\"rowname\")\nk9dge$samples$group &lt;- colnames(k9dge) %&gt;%\n    str_extract(\"(WT|Heter|Hom)\") %&gt;%\n    factor(levels = c(\"WT\", \"Heter\", \"Hom\"))\n\n\n\n\nProperties\n\n\nCode\nk9dist &lt;- k9dge %&gt;%\n    cpm(log = TRUE) %&gt;%\n    as.data.frame() %&gt;%\n    pivot_longer(everything(), names_to = \"sample\", values_to = \"count\") %&gt;%\n    ggplot(aes(x=count, colour = sample)) +\n    geom_density() +\n    labs(x = \"intensity\", title = \"Distribution of 9-mers\")\n\n\n\n\nCode\nk9labels &lt;- k9dge$samples %&gt;% \n    mutate(label = paste0(sample, \"\\n\", percent(rRNA, accuracy = 0.01), \" rRNA\")) %&gt;% \n    .$label\nk9heat &lt;- k9dge %&gt;% \n    cpm(log = TRUE) %&gt;%\n    as.data.frame() %&gt;%\n    t() %&gt;%\n    pheatmap(silent = TRUE, cluster_cols = FALSE,\n             show_colnames = FALSE, fontsize = 9,\n             fontsize_row = 10, border_color = NA,\n             main = \"9-mer counts heatmap\", labels_row = k9labels)\nk9heat$tree_row$labels &lt;- k9labels\nk9den &lt;- ggdendrogram(k9heat$tree_row, rotate = TRUE) +\n    labs(title = \"Hierarchical clustering of 9-mer counts\") +\n    theme(plot.title = element_text(size = 12))\n\n\n\n\nCode\n# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes\nk9pca &lt;- k9dge %&gt;%\n    cpm(log = TRUE) %&gt;%\n    t() %&gt;%\n    prcomp()\n\n\n\n\nCode\n# Quick inspection to check whether first two PCA components capture most of the variability\nsummary(k9pca)$importance %&gt;% pander(split.tables = Inf)\n\n\n\n\nCode\nk9pcaPlot &lt;- k9pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    as_tibble() %&gt;%\n    dplyr::select(sample, PC1, PC2) %&gt;%\n    left_join(k9dge$samples) %&gt;%\n    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +\n    geom_point(alpha = 0.8, size = 3) +\n    geom_text_repel(show.legend = FALSE) +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(k9pca)$importance[2, \"PC1\"]), \")\"),\n        y = paste0(\"PC2 (\", percent(summary(k9pca)$importance[2, \"PC2\"]), \")\"),\n        colour = \"Genotype\",\n        title = \"k = 9\"\n    ) +\n    scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nCode\nk9pcaRrna &lt;- k9pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    as_tibble() %&gt;%\n    dplyr::select(sample, PC1, PC2) %&gt;%\n    left_join(k9dge$samples) %&gt;%\n    ggplot(aes(PC1, rRNA, label = rRNA)) +\n    geom_point(aes(colour = group), alpha = 0.8, size = 3) +\n    geom_text_repel(show.legend = FALSE) +\n    geom_smooth(method = \"lm\") +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(k9pca)$importance[2, \"PC1\"]), \")\"),\n        y = \"rRNA proportion\",\n        colour = \"Genotype\",\n        title = \"k = 9\"\n    ) +\n    scale_y_continuous(labels = percent) +\n    scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nDifferential expression\n\n\nCode\nk9design &lt;- model.matrix(~rRNA, data = k9dge$samples)\nk9disp &lt;- estimateDisp(k9dge, k9design)\nk9fit &lt;- glmQLFit(k9disp)\nk9topTable &lt;- glmQLFTest(k9fit) %&gt;%\n    topTags(n = Inf) %&gt;%\n    .[[\"table\"]] %&gt;%\n    rownames_to_column(\"mer\") %&gt;%\n    dplyr::select(\n        mer,\n        logFC,\n        logCPM,\n        F,\n        P.Value = PValue,\n        FDR,\n    ) %&gt;%\n    as_tibble() %&gt;%\n    mutate(\n        BY = p.adjust(P.Value, \"BY\"),\n        DE = BY &lt; 0.05\n    )",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-10",
    "href": "kmer.html#k-10",
    "title": "rRNADepletion_s4ter",
    "section": "k = 10",
    "text": "k = 10\n\nCounts\n\n\nCode\nk10files &lt;- list.files(\n    \"/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k10\",\n    pattern = \".dumps\", full.names = TRUE\n)\nk10counts &lt;- lapply(k10files, function(x){\n    read_delim(x, col_names = c(\"mer\", basename(x)), delim = \" \") %&gt;%\n        set_colnames(str_remove_all(colnames(.), \"_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\\\.dumps\"))\n}) %&gt;%\n    purrr::reduce(full_join)\n# %&gt;%\n    # dplyr::select(mer, contains(c(\"WT\", \"Heter\")))\n\n\n\n\nCode\nk10dge &lt;- k10counts %&gt;%\n    as.data.frame() %&gt;%\n    column_to_rownames(\"mer\") %&gt;%\n    DGEList() %&gt;%\n    calcNormFactors()\nk10dge$samples %&lt;&gt;%\n    rownames_to_column(\"rowname\") %&gt;%\n    mutate(sample = rowname) %&gt;%\n    left_join(addInfo) %&gt;%\n    column_to_rownames(\"rowname\")\nk10dge$samples$group &lt;- colnames(k10dge) %&gt;%\n    str_extract(\"(WT|Heter|Hom)\") %&gt;%\n    factor(levels = c(\"WT\", \"Heter\", \"Hom\"))\n\n\n\n\nProperties\n\n\nCode\n# k10dist &lt;- k10dge %&gt;%\n#     cpm(log = TRUE) %&gt;%\n#     as.data.frame() %&gt;%\n#     pivot_longer(everything(), names_to = \"sample\", values_to = \"count\") %&gt;%\n#     ggplot(aes(x=count, colour = sample)) +\n#     geom_density() +\n#     labs(x = \"intensity\", title = \"Distribution of 10-mers\")\n\n\n\n\nCode\n# k10labels &lt;- k10dge$samples %&gt;% \n#     mutate(label = paste0(sample, \"\\n\", percent(rRNA, accuracy = 0.01), \" rRNA\")) %&gt;% \n#     .$label\n# k10heat &lt;- k10dge %&gt;% \n#     cpm(log = TRUE) %&gt;%\n#     as.data.frame() %&gt;%\n#     t() %&gt;%\n#     pheatmap(silent = TRUE, cluster_cols = FALSE,\n#              show_colnames = FALSE, fontsize = 9,\n#              fontsize_row = 10, border_color = NA,\n#              main = \"10-mer counts heatmap\", labels_row = k10labels)\n# k10heat$tree_row$labels &lt;- k10labels\n# k10den &lt;- ggdendrogram(k10heat$tree_row, rotate = TRUE) +\n#     labs(title = \"Hierarchical clustering of 10-mer counts\") +\n#     theme(plot.title = element_text(size = 12))\n\n\n\n\nCode\n# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes\nk10pca &lt;- k10dge %&gt;%\n    cpm(log = TRUE) %&gt;%\n    t() %&gt;%\n    prcomp()\n\n\n\n\nCode\n# Quick inspection to check whether first two PCA components capture most of the variability\nsummary(k10pca)$importance %&gt;% pander(split.tables = Inf)\n\n\n\n\nCode\nk10pcaPlot &lt;- k10pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    as_tibble() %&gt;%\n    dplyr::select(sample, PC1, PC2) %&gt;%\n    left_join(k10dge$samples) %&gt;%\n    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +\n    geom_point(alpha = 0.8, size = 3) +\n    geom_text_repel(show.legend = FALSE) +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(k10pca)$importance[2, \"PC1\"]), \")\"),\n        y = paste0(\"PC2 (\", percent(summary(k10pca)$importance[2, \"PC2\"]), \")\"),\n        colour = \"Genotype\",\n        title = \"k = 10\"\n    ) +\n    scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nCode\n# k10pcaRrna &lt;- k10pca$x %&gt;%\n#     as.data.frame() %&gt;%\n#     rownames_to_column(\"sample\") %&gt;%\n#     as_tibble() %&gt;%\n#     dplyr::select(sample, PC1, PC2) %&gt;%\n#     left_join(k10dge$samples) %&gt;%\n#     ggplot(aes(PC1, rRNA, label = rRNA)) +\n#     geom_point(aes(colour = group), alpha = 0.8, size = 3) +\n#     geom_text_repel(show.legend = FALSE) +\n#     geom_smooth(method = \"lm\") +\n#     labs(\n#         x = paste0(\"PC1 (\", percent(summary(k10pca)$importance[2, \"PC1\"]), \")\"),\n#         y = \"rRNA proportion\",\n#         colour = \"Genotype\",\n#         title = \"k = 10\"\n#     ) +\n#     scale_y_continuous(labels = percent) +\n#     scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nDifferential expression\n\n\nCode\nk10design &lt;- model.matrix(~rRNA, data = k10dge$samples)\nk10disp &lt;- estimateDisp(k10dge, k10design)\nk10fit &lt;- glmQLFit(k10disp)\nk10topTable &lt;- glmQLFTest(k10fit) %&gt;%\n    topTags(n = Inf) %&gt;%\n    .[[\"table\"]] %&gt;%\n    rownames_to_column(\"mer\") %&gt;%\n    dplyr::select(\n        mer,\n        logFC,\n        logCPM,\n        F,\n        P.Value = PValue,\n        FDR,\n    ) %&gt;%\n    as_tibble() %&gt;%\n    mutate(\n        BY = p.adjust(P.Value, \"BY\"),\n        DE = BY &lt; 0.05\n    )",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-11",
    "href": "kmer.html#k-11",
    "title": "rRNADepletion_s4ter",
    "section": "k = 11",
    "text": "k = 11\n\nCounts\n\n\nCode\nk11files &lt;- list.files(\n    \"/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k11\",\n    pattern = \".dumps\", full.names = TRUE\n)\nk11counts &lt;- lapply(k11files, function(x){\n    read_delim(x, col_names = c(\"mer\", basename(x)), delim = \" \") %&gt;%\n        set_colnames(str_remove_all(colnames(.), \"_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\\\.dumps\"))\n}) %&gt;%\n    purrr::reduce(full_join)\n# %&gt;%\n    # dplyr::select(mer, contains(c(\"WT\", \"Heter\")))\n\n\n\n\nCode\nk11dge &lt;- k11counts %&gt;%\n    as.data.frame() %&gt;%\n    column_to_rownames(\"mer\") %&gt;%\n    replace(is.na(.), 0) %&gt;%\n    DGEList() %&gt;%\n    calcNormFactors()\nk11dge$samples %&lt;&gt;%\n    rownames_to_column(\"rowname\") %&gt;%\n    mutate(sample = rowname) %&gt;%\n    left_join(addInfo) %&gt;%\n    column_to_rownames(\"rowname\")\nk11dge$samples$group &lt;- colnames(k11dge) %&gt;%\n    str_extract(\"(WT|Heter|Hom)\") %&gt;%\n    factor(levels = c(\"WT\", \"Heter\", \"Hom\"))\n\n\n\n\nProperties\n\n\nCode\n# k11dist &lt;- k11dge %&gt;%\n#     cpm(log = TRUE) %&gt;%\n#     as.data.frame() %&gt;%\n#     pivot_longer(everything(), names_to = \"sample\", values_to = \"count\") %&gt;%\n#     ggplot(aes(x=count, colour = sample)) +\n#     geom_density() +\n#     labs(x = \"intensity\", title = \"Distribution of 11-mers\")\n\n\n\n\nCode\n# k11labels &lt;- k11dge$samples %&gt;% \n#     mutate(label = paste0(sample, \"\\n\", percent(rRNA, accuracy = 0.01), \" rRNA\")) %&gt;% \n#     .$label\n# k11heat &lt;- k11dge %&gt;% \n#     cpm(log = TRUE) %&gt;%\n#     as.data.frame() %&gt;%\n#     t() %&gt;%\n#     pheatmap(silent = TRUE, cluster_cols = FALSE,\n#              show_colnames = FALSE, fontsize = 9,\n#              fontsize_row = 10, border_color = NA,\n#              main = \"11-mer counts heatmap\", labels_row = k11labels)\n# k11heat$tree_row$labels &lt;- k11labels\n# k11den &lt;- ggdendrogram(k11heat$tree_row, rotate = TRUE) +\n#     labs(title = \"Hierarchical clustering of 11-mer counts\") +\n#     theme(plot.title = element_text(size = 12))\n\n\n\n\nCode\n# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes\nk11pca &lt;- k11dge %&gt;%\n    cpm(log = TRUE) %&gt;%\n    t() %&gt;%\n    prcomp()\n\n\n\n\nCode\n# Quick inspection to check whether first two PCA components capture most of the variability\nsummary(k11pca)$importance %&gt;% pander(split.tables = Inf)\n\n\n\n\nCode\nk11pcaPlot &lt;- k11pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    as_tibble() %&gt;%\n    dplyr::select(sample, PC1, PC2) %&gt;%\n    left_join(k11dge$samples) %&gt;%\n    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +\n    geom_point(alpha = 0.8, size = 3) +\n    geom_text_repel(show.legend = FALSE) +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(k11pca)$importance[2, \"PC1\"]), \")\"),\n        y = paste0(\"PC2 (\", percent(summary(k11pca)$importance[2, \"PC2\"]), \")\"),\n        colour = \"Genotype\",\n        title = \"k = 11\"\n    ) +\n    scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nCode\n# k11pcaRrna &lt;- k11pca$x %&gt;%\n#     as.data.frame() %&gt;%\n#     rownames_to_column(\"sample\") %&gt;%\n#     as_tibble() %&gt;%\n#     dplyr::select(sample, PC1, PC2) %&gt;%\n#     left_join(k11dge$samples) %&gt;%\n#     ggplot(aes(PC1, rRNA, label = rRNA)) +\n#     geom_point(aes(colour = group), alpha = 0.8, size = 3) +\n#     geom_text_repel(show.legend = FALSE) +\n#     geom_smooth(method = \"lm\") +\n#     labs(\n#         x = paste0(\"PC1 (\", percent(summary(k11pca)$importance[2, \"PC1\"]), \")\"),\n#         y = \"rRNA proportion\",\n#         colour = \"Genotype\",\n#         title = \"k = 11\"\n#     ) +\n#     scale_y_continuous(labels = percent) +\n#     scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nDifferential expression\n\n\nCode\nk11design &lt;- model.matrix(~rRNA, data = k11dge$samples)\nk11disp &lt;- estimateDisp(k11dge, k11design)\nk11fit &lt;- glmQLFit(k11disp)\nk11topTable &lt;- glmQLFTest(k11fit) %&gt;%\n    topTags(n = Inf) %&gt;%\n    .[[\"table\"]] %&gt;%\n    rownames_to_column(\"mer\") %&gt;%\n    dplyr::select(\n        mer,\n        logFC,\n        logCPM,\n        F,\n        P.Value = PValue,\n        FDR,\n    ) %&gt;%\n    as_tibble() %&gt;%\n    mutate(\n        BY = p.adjust(P.Value, \"BY\"),\n        DE = BY &lt; 0.05\n    )",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-12",
    "href": "kmer.html#k-12",
    "title": "rRNADepletion_s4ter",
    "section": "k = 12",
    "text": "k = 12\n\nCounts\n\n\nCode\nk12files &lt;- list.files(\n    \"/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/jellyfish/k12\",\n    pattern = \".dumps\", full.names = TRUE\n)\nk12counts &lt;- lapply(k12files, function(x){\n    read_delim(x, col_names = c(\"mer\", basename(x)), delim = \" \") %&gt;%\n        set_colnames(str_remove_all(colnames(.), \"_6month_.+_F3|[0-9]*_Ps2Ex3M1_|\\\\.dumps\"))\n}) %&gt;%\n    purrr::reduce(full_join)\n# %&gt;%\n    # dplyr::select(mer, contains(c(\"WT\", \"Heter\")))\n\n\n\n\nCode\nk12dge &lt;- k12counts %&gt;%\n    as.data.frame() %&gt;%\n    column_to_rownames(\"mer\") %&gt;%\n    replace(is.na(.), 0) %&gt;%\n    DGEList() %&gt;%\n    calcNormFactors()\nk12dge$samples %&lt;&gt;%\n    rownames_to_column(\"rowname\") %&gt;%\n    mutate(sample = rowname) %&gt;%\n    left_join(addInfo) %&gt;%\n    column_to_rownames(\"rowname\")\nk12dge$samples$group &lt;- colnames(k12dge) %&gt;%\n    str_extract(\"(WT|Heter|Hom)\") %&gt;%\n    factor(levels = c(\"WT\", \"Heter\", \"Hom\"))\n\n\n\n\nProperties\n\n\nCode\n# k12dist &lt;- k12dge %&gt;%\n#     cpm(log = TRUE) %&gt;%\n#     as.data.frame() %&gt;%\n#     pivot_longer(everything(), names_to = \"sample\", values_to = \"count\") %&gt;%\n#     ggplot(aes(x=count, colour = sample)) +\n#     geom_density() +\n#     labs(x = \"intensity\", title = \"Distribution of 12-mers\")\n\n\n\n\nCode\n# k12labels &lt;- k12dge$samples %&gt;% \n#     mutate(label = paste0(sample, \"\\n\", percent(rRNA, accuracy = 0.01), \" rRNA\")) %&gt;% \n#     .$label\n# k12heat &lt;- k12dge %&gt;% \n#     cpm(log = TRUE) %&gt;%\n#     as.data.frame() %&gt;%\n#     t() %&gt;%\n#     pheatmap(silent = TRUE, cluster_cols = FALSE,\n#              show_colnames = FALSE, fontsize = 9,\n#              fontsize_row = 10, border_color = NA,\n#              main = \"12-mer counts heatmap\", labels_row = k12labels)\n# k12heat$tree_row$labels &lt;- k12labels\n# k12den &lt;- ggdendrogram(k12heat$tree_row, rotate = TRUE) +\n#     labs(title = \"Hierarchical clustering of 12-mer counts\") +\n#     theme(plot.title = element_text(size = 12))\n\n\n\n\nCode\n# Assess cpm values to make sure PCA results are not heavily skewed by highly expressed genes\nk12pca &lt;- k12dge %&gt;%\n    cpm(log = TRUE) %&gt;%\n    t() %&gt;%\n    prcomp()\n\n\n\n\nCode\n# Quick inspection to check whether first two PCA components capture most of the variability\nsummary(k12pca)$importance %&gt;% pander(split.tables = Inf)\n\n\n\n\nCode\nk12pcaPlot &lt;- k12pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    as_tibble() %&gt;%\n    dplyr::select(sample, PC1, PC2) %&gt;%\n    left_join(k12dge$samples) %&gt;%\n    ggplot(aes(PC1, PC2, colour = group, label = rRNA)) +\n    geom_point(alpha = 0.8, size = 3) +\n    geom_text_repel(show.legend = FALSE) +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(k12pca)$importance[2, \"PC1\"]), \")\"),\n        y = paste0(\"PC2 (\", percent(summary(k12pca)$importance[2, \"PC2\"]), \")\"),\n        colour = \"Genotype\",\n        title = \"k = 12\"\n    ) +\n    scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nCode\n# k12pcaRrna &lt;- k12pca$x %&gt;%\n#     as.data.frame() %&gt;%\n#     rownames_to_column(\"sample\") %&gt;%\n#     as_tibble() %&gt;%\n#     dplyr::select(sample, PC1, PC2) %&gt;%\n#     left_join(k12dge$samples) %&gt;%\n#     ggplot(aes(PC1, rRNA, label = rRNA)) +\n#     geom_point(aes(colour = group), alpha = 0.8, size = 3) +\n#     geom_text_repel(show.legend = FALSE) +\n#     geom_smooth(method = \"lm\") +\n#     labs(\n#         x = paste0(\"PC1 (\", percent(summary(k12pca)$importance[2, \"PC1\"]), \")\"),\n#         y = \"rRNA proportion\",\n#         colour = \"Genotype\",\n#         title = \"k = 12\"\n#     ) +\n#     scale_y_continuous(labels = percent) +\n#     scale_colour_discrete(labels = c(\"Wildtype\", \"Heterozygous\", \"Homozygous\"))\n\n\n\n\nDifferential expression\n\n\nCode\nk12design &lt;- model.matrix(~rRNA, data = k12dge$samples)\nk12disp &lt;- estimateDisp(k12dge, k12design)\nk12fit &lt;- glmQLFit(k12disp)\nk12topTable &lt;- glmQLFTest(k12fit) %&gt;%\n    topTags(n = Inf) %&gt;%\n    .[[\"table\"]] %&gt;%\n    rownames_to_column(\"mer\") %&gt;%\n    dplyr::select(\n        mer,\n        logFC,\n        logCPM,\n        F,\n        P.Value = PValue,\n        FDR,\n    ) %&gt;%\n    as_tibble() %&gt;%\n    mutate(\n        BY = p.adjust(P.Value, \"BY\"),\n        DE = BY &lt; 0.05\n    )",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-5-1",
    "href": "kmer.html#k-5-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 5",
    "text": "k = 5\n\n\nCode\ntopRes(k5topTable,\n       cap = paste(\n           \"The top 100 differentially expressed 5-mers.\",\n           nrow(dplyr::filter(k5topTable, DE)),\n           \"of\",\n           nrow(k5topTable),\n           \"detected sequences were classified as DE with BY p-value &lt; 0.05.\"\n       )\n)\n\n\n\n\n\n\n\n\nCode\nk5topTable %&gt;%\n    ggplot(aes(P.Value)) +\n    geom_histogram(\n        binwidth = 0.02,\n        colour = \"black\", fill = \"grey90\"\n    ) +\n    labs(title = \"k = 5\")\n\n\n\n\n\nHistogram of p-values. Values follow the expected distribution when there are many differences.\n\n\n\n\n\n\nCode\nk5topTable %&gt;%\n    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +\n    geom_point(alpha = 0.5) +\n    scale_colour_manual(values = c(\"black\", \"grey50\", \"red\")) +\n    geom_text_repel(\n        data = . %&gt;%\n            # dplyr::filter(-log10(P.Value) &gt; 4 | logFC &gt; 4 | logFC &lt; -2),\n            dplyr::filter(-log10(P.Value) &gt; 4 | logFC &gt; 3 | logFC &lt; -2.5),\n        aes(label = mer, color = \"black\")\n    ) +\n    labs(x = \"logFC\", y = expression(paste(-log[10], \"(p)\")), title = \"k = 5\") +\n    theme_bw() +\n    theme(legend.position = \"none\")\n\n\n\n\n\nVolcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value &lt; 0.05 are highlighted in red.",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-6-1",
    "href": "kmer.html#k-6-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 6",
    "text": "k = 6\n\n\nCode\ntopRes(k6topTable,\n       cap = paste(\n           \"The top 100 differentially expressed 6-mers.\",\n           nrow(dplyr::filter(k6topTable, DE)),\n           \"of\",\n           nrow(k6topTable),\n           \"detected sequences were classified as DE with a BY p-value &lt; 0.05.\"\n       )\n)\n\n\n\n\n\n\n\n\nCode\nk6topTable %&gt;%\n    ggplot(aes(P.Value)) +\n    geom_histogram(\n        binwidth = 0.02,\n        colour = \"black\", fill = \"grey90\"\n    ) +\n    labs(title = \"k = 6\")\n\n\n\n\n\nHistogram of p-values. Values follow the expected distribution when there are some differences.\n\n\n\n\n\n\nCode\nk6topTable %&gt;%\n    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +\n    geom_point(alpha = 0.5) +\n    scale_colour_manual(values = c(\"black\", \"grey50\", \"red\")) +\n    geom_text_repel(\n        data = . %&gt;%\n            dplyr::filter(-log10(P.Value) &gt; 6 | logFC &gt; 6 | logFC &lt; -2.3),\n        aes(label = mer, color = \"black\")\n    ) +\n    labs(x = \"logFC\", y = expression(paste(-log[10], \"(p)\")), title = \"k = 6\") +\n    theme_bw() +\n    theme(legend.position = \"none\")\n\n\n\n\n\nVolcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value &lt; 0.05 are highlighted in red.",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-7-1",
    "href": "kmer.html#k-7-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 7",
    "text": "k = 7\n\n\nCode\ntopRes(k7topTable,\n       cap = paste(\n           \"The top 100 differentially expressed 7-mers.\",\n           nrow(dplyr::filter(k7topTable, DE)),\n           \"of\",\n           nrow(k7topTable),\n           \"detected sequences were classified as DE with a BY p-value &lt; 0.05.\"\n       )\n)\n\n\n\n\n\n\n\n\nCode\nk7topTable %&gt;%\n    ggplot(aes(P.Value)) +\n    geom_histogram(\n        binwidth = 0.02,\n        colour = \"black\", fill = \"grey90\"\n    ) +\n    labs(title = \"k = 7\")\n\n\n\n\n\nHistogram of p-values. Values follow the expected distribution when there are many differences.\n\n\n\n\n\n\nCode\nk7topTable %&gt;%\n    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +\n    geom_point(alpha = 0.5) +\n    scale_colour_manual(values = c(\"black\", \"grey50\", \"red\")) +\n    geom_text_repel(\n        data = . %&gt;%\n            dplyr::filter(-log10(P.Value) &gt; 6.4 | logFC &gt; 10 | logFC &lt; -5),\n        aes(label = mer, color = \"black\")\n    ) +\n    labs(x = \"logFC\", y = expression(paste(-log[10], \"(p)\")), title = \"k = 7\") +\n    theme_bw() +\n    theme(legend.position = \"none\")\n\n\n\n\n\nVolcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value &lt; 0.05 are highlighted in red.",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-8-1",
    "href": "kmer.html#k-8-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 8",
    "text": "k = 8\n\n\nCode\ntopRes(k8topTable,\n       cap = paste(\n           \"The top 100 differentially expressed 8-mers.\",\n           nrow(dplyr::filter(k8topTable, DE)),\n           \"of\",\n           nrow(k8topTable),\n           \"detected sequences were classified as DE with a BY p-value &lt; 0.05.\"\n       )\n)\n\n\n\n\n\n\n\n\nCode\nk8topTable %&gt;%\n    ggplot(aes(P.Value)) +\n    geom_histogram(\n        binwidth = 0.02,\n        colour = \"black\", fill = \"grey90\"\n    ) +\n    labs(title = \"k = 8\")\n\n\n\n\n\nHistogram of p-values. Values follow the expected distribution when there are many differences.\n\n\n\n\n\n\nCode\nk8topTable %&gt;%\n    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +\n    geom_point(alpha = 0.5) +\n    scale_colour_manual(values = c(\"black\", \"grey50\", \"red\")) +\n    geom_text_repel(\n        data = . %&gt;%\n            dplyr::filter(-log10(P.Value) &gt; 7.2 | logFC &gt; 12.5 | logFC &lt; -8),\n        aes(label = mer, color = \"black\")\n    ) +\n    labs(x = \"logFC\", y = expression(paste(-log[10], \"(p)\")), title = \"k = 8\") +\n    theme_bw() +\n    theme(legend.position = \"none\")\n\n\n\n\n\nVolcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value &lt; 0.05 are highlighted in red.",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-9-1",
    "href": "kmer.html#k-9-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 9",
    "text": "k = 9\n\n\nCode\ntopRes(k9topTable,\n       cap = paste(\n           \"The top 100 differentially expressed 9-mers.\",\n           nrow(dplyr::filter(k9topTable, DE)),\n           \"of\",\n           nrow(k9topTable),\n           \"detected sequences were classified as DE with a BY p-value &lt; 0.05.\"\n       )\n)\n\n\n\n\n\n\n\n\nCode\nk9topTable %&gt;%\n    ggplot(aes(P.Value)) +\n    geom_histogram(\n        binwidth = 0.02,\n        colour = \"black\", fill = \"grey90\"\n    ) +\n    labs(title = \"k = 9\")\n\n\n\n\n\nHistogram of p-values. Values follow the expected distribution when there are many differences.\n\n\n\n\n\n\nCode\nk9topTable %&gt;%\n    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +\n    geom_point(alpha = 0.5) +\n    scale_colour_manual(values = c(\"black\", \"grey50\", \"red\")) +\n    geom_text_repel(\n        data = . %&gt;%\n            dplyr::filter(DE & -log10(P.Value) &gt; 7.5 | logFC &lt; -10 | logFC &gt; 15),\n        aes(label = mer, color = \"black\")\n    ) +\n    labs(x = \"logFC\", y = expression(paste(-log[10], \"(p)\")), title = \"k = 9\") +\n    theme_bw() +\n    theme(legend.position = \"none\")\n\n\n\n\n\nVolcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value &lt; 0.05 are highlighted in red.",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-10-1",
    "href": "kmer.html#k-10-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 10",
    "text": "k = 10\n\n\nCode\ntopRes(k10topTable,\n       cap = paste(\n           \"The top 100 differentially expressed 10-mers.\",\n           nrow(dplyr::filter(k10topTable, DE)),\n           \"of\",\n           nrow(k10topTable),\n           \"detected sequences were classified as DE with a BY p-value &lt; 0.05.\"\n       )\n)\n\n\n\n\n\n\n\n\nCode\nk10topTable %&gt;%\n    ggplot(aes(P.Value)) +\n    geom_histogram(\n        binwidth = 0.02,\n        colour = \"black\", fill = \"grey90\"\n    ) +\n    labs(title = \"k = 10\")\n\n\n\n\n\nHistogram of p-values. Values follow the expected distribution when there are many differences.\n\n\n\n\n\n\nCode\nk10topTable %&gt;%\n    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +\n    geom_point(alpha = 0.5) +\n    scale_colour_manual(values = c(\"black\", \"grey50\", \"red\")) +\n    geom_text_repel(\n        data = . %&gt;%\n            dplyr::filter(-log10(P.Value) &gt; 8.5 | logFC &gt; 20 | logFC &lt; -13.5),\n        aes(label = mer, color = \"black\")\n    ) +\n    labs(x = \"logFC\", y = expression(paste(-log[10], \"(p)\")), title = \"k = 10\") +\n    theme_bw() +\n    theme(legend.position = \"none\")\n\n\n\n\n\nVolcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value &lt; 0.05 are highlighted in red.",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-11-1",
    "href": "kmer.html#k-11-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 11",
    "text": "k = 11\n\n\nCode\ntopRes(k11topTable,\n       cap = paste(\n           \"The top 100 differentially expressed 11-mers.\",\n           nrow(dplyr::filter(k11topTable, DE)),\n           \"of\",\n           nrow(k11topTable),\n           \"detected sequences were classified as DE with a BY p-value &lt; 0.05.\"\n       )\n)\n\n\n\n\n\n\n\n\nCode\nk11topTable %&gt;%\n    ggplot(aes(P.Value)) +\n    geom_histogram(\n        binwidth = 0.02,\n        colour = \"black\", fill = \"grey90\"\n    ) +\n    labs(title = \"k = 11\")\n\n\n\n\n\nHistogram of p-values. Values follow the expected distribution when there are many differences.\n\n\n\n\n\n\nCode\nk11topTable %&gt;%\n    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +\n    geom_point(alpha = 0.5) +\n    scale_colour_manual(values = c(\"black\", \"grey50\", \"red\")) +\n    geom_text_repel(\n        data = . %&gt;%\n            dplyr::filter(-log10(P.Value) &gt; 8.5 | logFC &gt; 20 | logFC &lt; -13.5),\n        aes(label = mer, color = \"black\")\n    ) +\n    labs(x = \"logFC\", y = expression(paste(-log[10], \"(p)\")), title = \"k = 11\") +\n    theme_bw() +\n    theme(legend.position = \"none\")\n\n\n\n\n\nVolcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value &lt; 0.05 are highlighted in red.",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "kmer.html#k-12-1",
    "href": "kmer.html#k-12-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 12",
    "text": "k = 12\n\n\nCode\ntopRes(k12topTable,\n       cap = paste(\n           \"The top 100 differentially expressed 12-mers.\",\n           nrow(dplyr::filter(k12topTable, DE)),\n           \"of\",\n           nrow(k12topTable),\n           \"detected sequences were classified as DE with a BY p-value &lt; 0.05.\"\n       )\n)\n\n\n\n\n\n\n\n\nCode\nk12topTable %&gt;%\n    ggplot(aes(P.Value)) +\n    geom_histogram(\n        binwidth = 0.02,\n        colour = \"black\", fill = \"grey90\"\n    ) +\n    labs(title = \"k = 12\")\n\n\n\n\n\nHistogram of p-values. Values follow the expected distribution when there are many differences.\n\n\n\n\n\n\nCode\nk12topTable %&gt;%\n    ggplot(aes(logFC, -log10(P.Value), colour = DE)) +\n    geom_point(alpha = 0.5) +\n    scale_colour_manual(values = c(\"black\", \"grey50\", \"red\")) +\n    geom_text_repel(\n        data = . %&gt;%\n            dplyr::filter(-log10(P.Value) &gt; 8.5 | logFC &gt; 20 | logFC &lt; -13.5),\n        aes(label = mer, color = \"black\")\n    ) +\n    labs(x = \"logFC\", y = expression(paste(-log[10], \"(p)\")), title = \"k = 11\") +\n    theme_bw() +\n    theme(legend.position = \"none\")\n\n\n\n\n\nVolcano plot showing -log10(p-value) against logFC. Kmers classified as DE with BY p-value &lt; 0.05 are highlighted in red.",
    "crumbs": [
      "k-mer"
    ]
  },
  {
    "objectID": "qc_rRNA_removed.html",
    "href": "qc_rRNA_removed.html",
    "title": "rRNADepletion_s4ter",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages({\n    ## Common packages\n    library(tidyverse)\n    library(magrittr)\n    library(here)\n    library(kableExtra)\n    library(RColorBrewer)\n    library(ggpubr)\n    library(scales)\n    library(AnnotationHub)\n    library(ggrepel)\n    library(ggtext)\n    library(glue)\n    library(DT)\n    library(pander)\n    library(reactable)\n    ## Document-specific packages\n    library(ngsReports)\n})\n\n\n\n\nCode\ntheme_set(theme_bw())\n\n\n\n\nCode\nlb_reactable &lt;- function(\n        tbl, highlight = TRUE, striped = TRUE, compact = TRUE,\n        wrap = FALSE, resizable = TRUE, searchable = TRUE,\n        style = list(fontFamily = \"Calibri, sans-serif\"), ...\n){\n    reactable(\n        tbl,\n        highlight = highlight, striped = striped, compact = compact,\n        wrap = wrap, resizable = TRUE, searchable = TRUE,\n        style = style, ...\n    )\n}\ntooltip &lt;- function(value, tooltip) {\n    tags$abbr(\n        style = \"text-decoration: underline; text-decoration-style: solid; cursor: help\",\n        title = tooltip,\n        value\n    )\n}\nreact_format &lt;- function(format, digits = 2){\n    function(val, ind, col_name){\n        formatC(val, digits = digits, format = format)\n    }\n}\nreact_numeric &lt;- function(format, digits = 2){\n    colDef(cell = function(val, ind, col_name){\n        formatC(val, digits = digits, format = format)\n    })\n}",
    "crumbs": [
      "QC (rRNA removed)"
    ]
  },
  {
    "objectID": "qc_rRNA_removed.html#load-data",
    "href": "qc_rRNA_removed.html#load-data",
    "title": "rRNADepletion_s4ter",
    "section": "Load data",
    "text": "Load data\n\n\nCode\nfqc_raw &lt;- list.files(\n    path = \"1_Psen2S4Ter/analysis-kmer/results/raw_data/FastQC\",\n    pattern = \"zip\",\n    full.names = TRUE\n)\n## Fix raw FQC zip file structure caused by workflow renaming of FQC files\n## Otherwise we encounter a bug in ngsReports\nfqc_raw %&gt;%\n    lapply(\\(x){\n        contents &lt;- unzip(x, list = TRUE)\n        old_dir &lt;- str_remove(contents$Name[1], \"/$\")\n        new_dir &lt;- str_remove(basename(x), \".zip$\")\n        if (old_dir != new_dir) {\n            unzip(x)\n            file.remove(x)\n            system(paste('mv', old_dir, new_dir))\n            files_to_zip &lt;- list.files(here(old_dir), full.names = TRUE)\n            zip(x, new_dir)\n            unlink(new_dir, recursive = TRUE)\n        }\n    })\nfqc_raw &lt;- fqc_raw %&gt;%\n    FastqcDataList()\n## Rename fqc_raw to names used by workflow\nsample_rename &lt;- read_tsv(here(\"1_Psen2S4Ter/smk-rnaseq-counts-1.2.2/config/units.tsv\")) %&gt;%\n    pivot_longer(cols = c(\"fq1\", \"fq2\"), values_to = \"fq\") %&gt;%\n    dplyr::select(new = sample, old = fq, everything()) %&gt;%\n    mutate(\n        old = basename(old),\n        new = ifelse(\n            str_detect(old, \"_R1.fastq.gz$\"),\n            paste0(new, \"_\", unit, \"_R1.fastq.gz\"),\n            paste0(new, \"_\", unit, \"_R2.fastq.gz\")\n        )\n    )\nfqName(fqc_raw) &lt;- vapply(fqName(fqc_raw), \\(x){\n    sample_rename$new[sample_rename$old == x]\n}, character(1), USE.NAMES = FALSE)\nfqc_raw &lt;- fqc_raw %&gt;%\n    .[str_detect(fqName(.), paste(meta$sample, collapse = \"|\"))]\n\n\n\n\nCode\nfqc_unmapped &lt;- list.files(\n    path = here(\"1_Psen2S4Ter/analysis-kmer/results/bwa/FastQC_fastq\"),\n    pattern = \"zip\",\n    full.names = TRUE\n) %&gt;%\n    FastqcDataList()\nfqName(fqc_unmapped) &lt;- vapply(fqName(fqc_unmapped), \\(x){\n    sample_rename$new[sample_rename$old == x]\n}, character(1), USE.NAMES = FALSE)\nfqc_unmapped &lt;- fqc_unmapped %&gt;%\n    .[str_detect(fqName(.), paste(meta$sample, collapse = \"|\"))]\n\n\n\n\nCode\nfqc_mapped &lt;- list.files(\n    path = here(\"1_Psen2S4Ter/analysis-kmer/results/star/FastQC_fastq/\"),\n    pattern = \"zip\",\n    full.names = TRUE\n) %&gt;%\n    FastqcDataList()\nfqName(fqc_mapped) &lt;- vapply(fqName(fqc_mapped), \\(x){\n    sample_rename$new[sample_rename$old == x]\n}, character(1), USE.NAMES = FALSE)\nfqc_mapped &lt;- fqc_mapped %&gt;%\n    .[str_detect(fqName(.), paste(meta$sample, collapse = \"|\"))]\n\n\nThe following plots were produced directly from FastQC zip archives with the ngsReports package.\nDirect comparisons between different stages of pre-processing can be made by toggling the tabs above the figures.",
    "crumbs": [
      "QC (rRNA removed)"
    ]
  },
  {
    "objectID": "qc_rRNA_removed.html#read-totals",
    "href": "qc_rRNA_removed.html#read-totals",
    "title": "rRNADepletion_s4ter",
    "section": "Read totals",
    "text": "Read totals\n\nRawrRNA removed (unmapped)rRNA removed (mapped)\n\n\n\n\nCode\nplotReadTotals(fqc_raw)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotReadTotals(fqc_unmapped)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotReadTotals(fqc_mapped)",
    "crumbs": [
      "QC (rRNA removed)"
    ]
  },
  {
    "objectID": "qc_rRNA_removed.html#fastqc-summary",
    "href": "qc_rRNA_removed.html#fastqc-summary",
    "title": "rRNADepletion_s4ter",
    "section": "FastQC summary",
    "text": "FastQC summary\n\nRawrRNA removed (unmapped)rRNA removed (mapped)\n\n\n\n\nCode\nplotSummary(fqc_raw)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSummary(fqc_unmapped)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSummary(fqc_mapped)\n\n\n\n\n\n\n\n\n\n\n\n\nFastQC reports are well-known to return WARN or FAIL when there is no actual reason for concern.\nWe assess each QC category individually in the following plots.",
    "crumbs": [
      "QC (rRNA removed)"
    ]
  },
  {
    "objectID": "qc_rRNA_removed.html#sequence-length-distribution",
    "href": "qc_rRNA_removed.html#sequence-length-distribution",
    "title": "rRNADepletion_s4ter",
    "section": "Sequence length distribution",
    "text": "Sequence length distribution\n\nRawrRNA removed (unmapped)rRNA removed (mapped)\n\n\n\n\nCode\nplotSeqLengthDistn(fqc_raw, plotType = \"cdf\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSeqLengthDistn(fqc_unmapped, plotType = \"cdf\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSeqLengthDistn(fqc_mapped, plotType = \"cdf\") +\n    theme(legend.position = \"none\")",
    "crumbs": [
      "QC (rRNA removed)"
    ]
  },
  {
    "objectID": "qc_rRNA_removed.html#per-base-sequence-qualities",
    "href": "qc_rRNA_removed.html#per-base-sequence-qualities",
    "title": "rRNADepletion_s4ter",
    "section": "Per base sequence qualities",
    "text": "Per base sequence qualities\n\nRawrRNA removed (unmapped)rRNA removed (mapped)\n\n\n\n\nCode\nplotBaseQuals(fqc_raw, plotType = \"boxplot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotBaseQuals(fqc_unmapped, plotType = \"boxplot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotBaseQuals(fqc_mapped, plotType = \"boxplot\")",
    "crumbs": [
      "QC (rRNA removed)"
    ]
  },
  {
    "objectID": "qc_rRNA_removed.html#mean-sequence-quality-per-read",
    "href": "qc_rRNA_removed.html#mean-sequence-quality-per-read",
    "title": "rRNADepletion_s4ter",
    "section": "Mean sequence quality per read",
    "text": "Mean sequence quality per read\n\nRawrRNA removed (unmapped)rRNA removed (mapped)\n\n\n\n\nCode\nplotSeqQuals(fqc_raw, plotType = \"line\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSeqQuals(fqc_unmapped, plotType = \"line\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSeqQuals(fqc_mapped, plotType = \"line\") +\n    theme(legend.position = \"none\")",
    "crumbs": [
      "QC (rRNA removed)"
    ]
  },
  {
    "objectID": "qc_rRNA_removed.html#per-base-sequence-content",
    "href": "qc_rRNA_removed.html#per-base-sequence-content",
    "title": "rRNADepletion_s4ter",
    "section": "Per base sequence content",
    "text": "Per base sequence content\n\nRawrRNA removed (unmapped)rRNA removed (mapped)\n\n\n\n\nCode\nplotSeqContent(fqc_raw, plotType = \"line\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSeqContent(fqc_unmapped, plotType = \"line\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSeqContent(fqc_mapped, plotType = \"line\")",
    "crumbs": [
      "QC (rRNA removed)"
    ]
  },
  {
    "objectID": "qc_rRNA_removed.html#adapter-content",
    "href": "qc_rRNA_removed.html#adapter-content",
    "title": "rRNADepletion_s4ter",
    "section": "Adapter content",
    "text": "Adapter content\n\nRawrRNA removed (unmapped)rRNA removed (mapped)\n\n\n\n\nCode\nplotAdapterContent(fqc_raw, plotType = \"line\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotAdapterContent(fqc_unmapped, plotType = \"line\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotAdapterContent(fqc_mapped, plotType = \"line\") +\n    theme(legend.position = \"none\")",
    "crumbs": [
      "QC (rRNA removed)"
    ]
  },
  {
    "objectID": "qc_rRNA_removed.html#sequence-duplication-levels",
    "href": "qc_rRNA_removed.html#sequence-duplication-levels",
    "title": "rRNADepletion_s4ter",
    "section": "Sequence duplication levels",
    "text": "Sequence duplication levels\n\nRawrRNA removed (unmapped)rRNA removed (mapped)\n\n\n\n\nCode\nplotDupLevels(fqc_raw, plotType = \"line\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotDupLevels(fqc_unmapped, plotType = \"line\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotDupLevels(fqc_mapped, plotType = \"line\") +\n    theme(legend.position = \"none\")",
    "crumbs": [
      "QC (rRNA removed)"
    ]
  },
  {
    "objectID": "qc_rRNA_removed.html#gc-content",
    "href": "qc_rRNA_removed.html#gc-content",
    "title": "rRNADepletion_s4ter",
    "section": "GC content",
    "text": "GC content\n\nRawrRNA removed (unmapped)rRNA removed (mapped)\n\n\n\n\nCode\nplotGcContent(fqc_raw)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotGcContent(fqc_unmapped)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotGcContent(fqc_mapped)\n\n\n\n\n\n\n\n\n\n\n\n\n\nRawrRNA removed (unmapped)rRNA removed (mapped)\n\n\n\n\nCode\nplotGcContent(\n    fqc_raw, plotType = \"line\",  gcType = \"Transcriptome\", usePlotly = TRUE\n)\n\n\n\n\n\n\n\n\n\n\nCode\nplotGcContent(\n    fqc_unmapped, plotType = \"line\",  gcType = \"Transcriptome\", usePlotly = TRUE\n)\n\n\n\n\n\n\n\n\n\n\nCode\nplotGcContent(\n    fqc_mapped, plotType = \"line\",  gcType = \"Transcriptome\", usePlotly = TRUE\n)",
    "crumbs": [
      "QC (rRNA removed)"
    ]
  },
  {
    "objectID": "qc_rRNA_removed.html#alignments",
    "href": "qc_rRNA_removed.html#alignments",
    "title": "rRNADepletion_s4ter",
    "section": "Alignments",
    "text": "Alignments\n\n\nCode\nstar_logs &lt;- list.files(\n    \"/mnt/hpcfs/a1647910/20200310_rRNADepletion/1_Psen2S4Ter/analysis-kmer/results/star/log\",\n    pattern = \"Log.final.out\",\n    full.names = TRUE\n) %&gt;%\n    importNgsLogs(type = \"star\") %&gt;%\n    mutate(\n        Filename = str_remove(Filename, \"\\\\d+_Ps2Ex3M1_\"),\n        Filename = str_remove(Filename, \"_6month_07_07_2016_F3\"),\n        Filename = str_remove(Filename, \"Log.final.out\")\n    ) %&gt;%\n    dplyr::filter(Filename %in% meta$sample)\n\n\n\n\nCode\nstar_logs %&gt;%\n    dplyr::select(sample = Filename, everything()) %&gt;%\n    left_join(meta[,c(\"sample\", \"group\")]) %&gt;%\n    ggplot(aes(sample, Uniquely_Mapped_Reads_Number)) +\n    geom_bar(aes(fill = group), stat = \"identity\") +\n    scale_y_continuous(\n        labels = scales::comma,\n        breaks = seq(0, 1e9, 2.5e7),\n        expand = expansion(c(0, 0.09))\n    ) +\n    scale_fill_manual(values = pal) +\n    coord_flip() +\n    labs(\n        title = \"Uniquely mapped reads (STAR)\",\n        x = \"Sample\",\n        y = \"Number of uniquely mapped reads\",\n        fill = \"Group\"\n    ) +\n    theme(\n        axis.text.x = element_text(angle = -40, , vjust = 1, hjust = 0)\n    )\n\n\n\n\n\n\n\n\n\n\n\nCode\nstar_logs %&gt;%\n    mutate(\n        `Uniquely mapped` = Uniquely_Mapped_Reads_Number,\n        `Multi mapped` = rowSums(across(c(\n            Number_Of_Reads_Mapped_To_Multiple_Loci,\n            Number_Of_Reads_Mapped_To_Too_Many_Loci\n        ))),\n        Unmapped = rowSums(across(c(\n            Number_Of_Reads_Unmapped_Too_Many_Mismatches,\n            Number_Of_Reads_Unmapped_Too_Short,\n            Number_Of_Reads_Unmapped_Other\n        )))\n    ) %&gt;%\n    dplyr::select(\n        sample = Filename, `Uniquely mapped`, `Multi mapped`, Unmapped\n    ) %&gt;%\n    pivot_longer(\n        cols = -sample,\n        names_to = \"Type\",\n        values_to = \"number\"\n    ) %&gt;%\n    mutate(\n        Type = str_to_sentence(str_replace_all(Type, \"_\", \" \")),\n        Type = factor(Type, levels = c(\n            ## The last factor will be plotted LHS\n            \"Unmapped\", \"Multi mapped\", \"Uniquely mapped\"\n        ))\n    ) %&gt;%\n    ggplot(aes(x = sample, y = number, fill = Type)) +\n    geom_bar(position = \"fill\", stat = \"identity\") +\n    coord_flip() +\n    scale_fill_manual(\n        values = brewer.pal(9, \"Pastel1\")[c(4, 2, 3)],\n        breaks = c(\n            \"Uniquely mapped\", \"Multi mapped\",  \"Unmapped\"\n        )\n    ) +\n    labs(\n        title = \"Alignment summary (STAR)\",\n        x = \"Sample\",\n        y = \"Read proportions\"\n    ) +\n    scale_y_continuous(\n        labels = scales::percent,\n        breaks = seq(0, 1, 0.1),\n        expand = expansion(c(0, 0))\n    )",
    "crumbs": [
      "QC (rRNA removed)"
    ]
  },
  {
    "objectID": "qc.html",
    "href": "qc.html",
    "title": "rRNADepletion_s4ter",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages({\n    ## Common packages\n    library(tidyverse)\n    library(magrittr)\n    library(here)\n    library(kableExtra)\n    library(RColorBrewer)\n    library(ggpubr)\n    library(scales)\n    library(AnnotationHub)\n    library(ggrepel)\n    library(ggtext)\n    library(glue)\n    library(DT)\n    library(pander)\n    library(reactable)\n    ## Document-specific packages\n    library(ngsReports)\n})\n\n\n\n\nCode\ntheme_set(theme_bw())\n\n\n\n\nCode\nlb_reactable &lt;- function(\n        tbl, highlight = TRUE, striped = TRUE, compact = TRUE,\n        wrap = FALSE, resizable = TRUE, searchable = TRUE,\n        style = list(fontFamily = \"Calibri, sans-serif\"), ...\n){\n    reactable(\n        tbl,\n        highlight = highlight, striped = striped, compact = compact,\n        wrap = wrap, resizable = TRUE, searchable = TRUE,\n        style = style, ...\n    )\n}\ntooltip &lt;- function(value, tooltip) {\n    tags$abbr(\n        style = \"text-decoration: underline; text-decoration-style: solid; cursor: help\",\n        title = tooltip,\n        value\n    )\n}\nreact_format &lt;- function(format, digits = 2){\n    function(val, ind, col_name){\n        formatC(val, digits = digits, format = format)\n    }\n}\nreact_numeric &lt;- function(format, digits = 2){\n    colDef(cell = function(val, ind, col_name){\n        formatC(val, digits = digits, format = format)\n    })\n}",
    "crumbs": [
      "QC"
    ]
  },
  {
    "objectID": "qc.html#load-data",
    "href": "qc.html#load-data",
    "title": "rRNADepletion_s4ter",
    "section": "Load data",
    "text": "Load data\n\n\nCode\nfqc_raw &lt;- list.files(\n    path = \"/mnt/hpcfs/a1647910/20200310_rRNADepletion/1_Psen2S4Ter/smk-rnaseq-counts-1.2.2/results/raw_data/FastQC\",\n    pattern = \"zip\",\n    full.names = TRUE\n)\n## Fix raw FQC zip file structure caused by workflow renaming of FQC files\n## Otherwise we encounter a bug in ngsReports\nfqc_raw %&gt;%\n    lapply(\\(x){\n        contents &lt;- unzip(x, list = TRUE)\n        old_dir &lt;- str_remove(contents$Name[1], \"/$\")\n        new_dir &lt;- str_remove(basename(x), \".zip$\")\n        if (old_dir != new_dir) {\n            unzip(x)\n            file.remove(x)\n            system(paste('mv', old_dir, new_dir))\n            files_to_zip &lt;- list.files(here(old_dir), full.names = TRUE)\n            zip(x, new_dir)\n            unlink(new_dir, recursive = TRUE)\n        }\n    })\nfqc_raw &lt;- fqc_raw %&gt;%\n    FastqcDataList()\n## Rename fqc_raw to names used by workflow\nsample_rename &lt;- read_tsv(here(\"/mnt/hpcfs/a1647910/20200310_rRNADepletion/1_Psen2S4Ter/smk-rnaseq-counts-1.2.2/config/units.tsv\")) %&gt;%\n    pivot_longer(cols = c(\"fq1\", \"fq2\"), values_to = \"fq\") %&gt;%\n    dplyr::select(new = sample, old = fq, everything()) %&gt;%\n    mutate(\n        old = basename(old),\n        new = ifelse(\n            str_detect(old, \"_R1.fastq.gz$\"),\n            paste0(new, \"_\", unit, \"_R1.fastq.gz\"),\n            paste0(new, \"_\", unit, \"_R2.fastq.gz\")\n        )\n    )\nfqName(fqc_raw) &lt;- vapply(fqName(fqc_raw), \\(x){\n    sample_rename$new[sample_rename$old == x]\n}, character(1), USE.NAMES = FALSE)\nfqc_raw &lt;- fqc_raw %&gt;%\n    .[str_detect(fqName(.), paste(meta$sample, collapse = \"|\"))]\n\n\n\n\nCode\nfqc_trim &lt;- list.files(\n    path = here(\"/mnt/hpcfs/a1647910/20200310_rRNADepletion/1_Psen2S4Ter/smk-rnaseq-counts-1.2.2/results/trim/FastQC\"),\n    pattern = \"zip\",\n    full.names = TRUE\n) %&gt;%\n    FastqcDataList()  %&gt;%\n    .[str_detect(fqName(.), paste(meta$sample, collapse = \"|\"))]\n\n\n\n\nCode\nfqc_align &lt;- list.files(\n    path = here(\"/mnt/hpcfs/a1647910/20200310_rRNADepletion/1_Psen2S4Ter/smk-rnaseq-counts-1.2.2/results/align/FastQC\"),\n    pattern = \"zip\",\n    full.names = TRUE\n) %&gt;%\n    FastqcDataList() %&gt;%\n    .[str_detect(fqName(.), paste(meta$sample, collapse = \"|\"))]\n\n\nThe following plots were produced directly from FastQC zip archives with the ngsReports package.\nDirect comparisons between different stages of pre-processing can be made by toggling the tabs above the figures.",
    "crumbs": [
      "QC"
    ]
  },
  {
    "objectID": "qc.html#read-totals",
    "href": "qc.html#read-totals",
    "title": "rRNADepletion_s4ter",
    "section": "Read totals",
    "text": "Read totals\n\nRawTrimmedAligned\n\n\n\n\nCode\nplotReadTotals(fqc_raw)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotReadTotals(fqc_trim)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotReadTotals(fqc_align)",
    "crumbs": [
      "QC"
    ]
  },
  {
    "objectID": "qc.html#fastqc-summary",
    "href": "qc.html#fastqc-summary",
    "title": "rRNADepletion_s4ter",
    "section": "FastQC summary",
    "text": "FastQC summary\n\nRawTrimmedAligned\n\n\n\n\nCode\nplotSummary(fqc_raw)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSummary(fqc_trim)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSummary(fqc_align)\n\n\n\n\n\n\n\n\n\n\n\n\nFastQC reports are well-known to return WARN or FAIL when there is no actual reason for concern.\nWe assess each QC category individually in the following plots.",
    "crumbs": [
      "QC"
    ]
  },
  {
    "objectID": "qc.html#sequence-length-distribution",
    "href": "qc.html#sequence-length-distribution",
    "title": "rRNADepletion_s4ter",
    "section": "Sequence length distribution",
    "text": "Sequence length distribution\n\nRawTrimmedAligned\n\n\n\n\nCode\nplotSeqLengthDistn(fqc_raw, plotType = \"cdf\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSeqLengthDistn(fqc_trim, plotType = \"cdf\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSeqLengthDistn(fqc_align, plotType = \"cdf\") +\n    theme(legend.position = \"none\")",
    "crumbs": [
      "QC"
    ]
  },
  {
    "objectID": "qc.html#per-base-sequence-qualities",
    "href": "qc.html#per-base-sequence-qualities",
    "title": "rRNADepletion_s4ter",
    "section": "Per base sequence qualities",
    "text": "Per base sequence qualities\n\nRawTrimmedAligned\n\n\n\n\nCode\nplotBaseQuals(fqc_raw, plotType = \"boxplot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotBaseQuals(fqc_trim, plotType = \"boxplot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotBaseQuals(fqc_align, plotType = \"boxplot\")",
    "crumbs": [
      "QC"
    ]
  },
  {
    "objectID": "qc.html#mean-sequence-quality-per-read",
    "href": "qc.html#mean-sequence-quality-per-read",
    "title": "rRNADepletion_s4ter",
    "section": "Mean sequence quality per read",
    "text": "Mean sequence quality per read\n\nRawTrimmedAligned\n\n\n\n\nCode\nplotSeqQuals(fqc_raw, plotType = \"line\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSeqQuals(fqc_trim, plotType = \"line\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSeqQuals(fqc_align, plotType = \"line\") +\n    theme(legend.position = \"none\")",
    "crumbs": [
      "QC"
    ]
  },
  {
    "objectID": "qc.html#per-base-sequence-content",
    "href": "qc.html#per-base-sequence-content",
    "title": "rRNADepletion_s4ter",
    "section": "Per base sequence content",
    "text": "Per base sequence content\n\nRawTrimmedAligned\n\n\n\n\nCode\nplotSeqContent(fqc_raw, plotType = \"line\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSeqContent(fqc_trim, plotType = \"line\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotSeqContent(fqc_align, plotType = \"line\")",
    "crumbs": [
      "QC"
    ]
  },
  {
    "objectID": "qc.html#adapter-content",
    "href": "qc.html#adapter-content",
    "title": "rRNADepletion_s4ter",
    "section": "Adapter content",
    "text": "Adapter content\n\nRawTrimmedAligned\n\n\n\n\nCode\nplotAdapterContent(fqc_raw, plotType = \"line\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotAdapterContent(fqc_trim, plotType = \"line\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotAdapterContent(fqc_align, plotType = \"line\") +\n    theme(legend.position = \"none\")",
    "crumbs": [
      "QC"
    ]
  },
  {
    "objectID": "qc.html#sequence-duplication-levels",
    "href": "qc.html#sequence-duplication-levels",
    "title": "rRNADepletion_s4ter",
    "section": "Sequence duplication levels",
    "text": "Sequence duplication levels\n\nRawTrimmedAligned\n\n\n\n\nCode\nplotDupLevels(fqc_raw, plotType = \"line\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotDupLevels(fqc_trim, plotType = \"line\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotDupLevels(fqc_align, plotType = \"line\") +\n    theme(legend.position = \"none\")",
    "crumbs": [
      "QC"
    ]
  },
  {
    "objectID": "qc.html#gc-content",
    "href": "qc.html#gc-content",
    "title": "rRNADepletion_s4ter",
    "section": "GC content",
    "text": "GC content\n\nRawTrimmedAligned\n\n\n\n\nCode\nplotGcContent(fqc_raw)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotGcContent(fqc_trim)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplotGcContent(fqc_align)\n\n\n\n\n\n\n\n\n\n\n\n\n\nRawTrimmedAligned\n\n\n\n\nCode\nplotGcContent(\n    fqc_raw, plotType = \"line\",  gcType = \"Transcriptome\", usePlotly = TRUE\n)\n\n\n\n\n\n\n\n\n\n\nCode\nplotGcContent(\n    fqc_trim, plotType = \"line\",  gcType = \"Transcriptome\", usePlotly = TRUE\n)\n\n\n\n\n\n\n\n\n\n\nCode\nplotGcContent(\n    fqc_align, plotType = \"line\",  gcType = \"Transcriptome\", usePlotly = TRUE\n)",
    "crumbs": [
      "QC"
    ]
  },
  {
    "objectID": "qc.html#alignments",
    "href": "qc.html#alignments",
    "title": "rRNADepletion_s4ter",
    "section": "Alignments",
    "text": "Alignments\n\n\nCode\nstar_logs &lt;- list.files(\n    \"/mnt/hpcfs/a1647910/20200310_rRNADepletion/1_Psen2S4Ter/smk-rnaseq-counts-1.2.2/results/align/log\",\n    pattern = \".log.final.out\",\n    full.names = TRUE\n) %&gt;%\n    importNgsLogs(type = \"star\") %&gt;%\n    mutate(Filename = str_remove(Filename, \".log.final.out\")) %&gt;%\n    dplyr::filter(Filename %in% meta$sample)\n\n\n\n\nCode\nstar_logs %&gt;%\n    dplyr::select(sample = Filename, everything()) %&gt;%\n    left_join(meta[,c(\"sample\", \"group\")]) %&gt;%\n    ggplot(aes(sample, Uniquely_Mapped_Reads_Number)) +\n    geom_bar(aes(fill = group), stat = \"identity\") +\n    scale_y_continuous(\n        labels = scales::comma,\n        breaks = seq(0, 1e9, 2.5e7),\n        expand = expansion(c(0, 0.09))\n    ) +\n    scale_fill_manual(values = pal) +\n    coord_flip() +\n    labs(\n        title = \"Uniquely mapped reads (STAR)\",\n        x = \"Sample\",\n        y = \"Number of uniquely mapped reads\",\n        fill = \"Group\"\n    ) +\n    theme(\n        axis.text.x = element_text(angle = -40, , vjust = 1, hjust = 0)\n    )\n\n\n\n\n\n\n\n\n\n\n\nCode\nstar_logs %&gt;%\n    mutate(\n        `Uniquely mapped` = Uniquely_Mapped_Reads_Number,\n        `Multi mapped` = rowSums(across(c(\n            Number_Of_Reads_Mapped_To_Multiple_Loci,\n            Number_Of_Reads_Mapped_To_Too_Many_Loci\n        ))),\n        Unmapped = rowSums(across(c(\n            Number_Of_Reads_Unmapped_Too_Many_Mismatches,\n            Number_Of_Reads_Unmapped_Too_Short,\n            Number_Of_Reads_Unmapped_Other\n        )))\n    ) %&gt;%\n    dplyr::select(\n        sample = Filename, `Uniquely mapped`, `Multi mapped`, Unmapped\n    ) %&gt;%\n    pivot_longer(\n        cols = -sample,\n        names_to = \"Type\",\n        values_to = \"number\"\n    ) %&gt;%\n    mutate(\n        Type = str_to_sentence(str_replace_all(Type, \"_\", \" \")),\n        Type = factor(Type, levels = c(\n            ## The last factor will be plotted LHS\n            \"Unmapped\", \"Multi mapped\", \"Uniquely mapped\"\n        ))\n    ) %&gt;%\n    ggplot(aes(x = sample, y = number, fill = Type)) +\n    geom_bar(position = \"fill\", stat = \"identity\") +\n    coord_flip() +\n    scale_fill_manual(\n        values = brewer.pal(9, \"Pastel1\")[c(4, 2, 3)],\n        breaks = c(\n            \"Uniquely mapped\", \"Multi mapped\",  \"Unmapped\"\n        )\n    ) +\n    labs(\n        title = \"Alignment summary (STAR)\",\n        x = \"Sample\",\n        y = \"Read proportions\"\n    ) +\n    scale_y_continuous(\n        labels = scales::percent,\n        breaks = seq(0, 1, 0.1),\n        expand = expansion(c(0, 0))\n    )",
    "crumbs": [
      "QC"
    ]
  },
  {
    "objectID": "qc.html#counts",
    "href": "qc.html#counts",
    "title": "rRNADepletion_s4ter",
    "section": "Counts",
    "text": "Counts\nGene-level counts were determined with featureCounts from the subread package.\nRNA-seq libraries can be stranded to determine whether the read represents the plus or the minus strand, and therefore the orientation of the transcript. Often this information is not provided by the sequencing provider unless explicitly asked. featureCounts requires specification of the strandedness of the library for best results. When strandedness information is unknown, we can run featureCounts with all three possible options (stranded, unstranded, reverse-stranded), and assess the assignment rates to infer the strandedness of the original library. Unltimately we choose the featureCounts output with the highest assignment rate.\n\n\nCode\nload_fc_summary &lt;- function(file){\n    read_tsv(file) %&gt;%\n        pivot_longer(cols = ends_with(\".bam\"), names_to = \"sample\", values_to = \"reads\") %&gt;%\n        mutate(\n            Status = str_replace_all(Status, \"_\", \" \"),\n            Status = factor(Status),\n            sample = str_remove(basename(sample), \".bam$\"),\n            sample = factor(sample),\n        )\n}\n\n\n\n\nCode\nfc_str &lt;- load_fc_summary(here(\n    \"/mnt/hpcfs/a1647910/20200310_rRNADepletion/1_Psen2S4Ter/smk-rnaseq-counts-1.2.2/results/featureCounts\",\n    \"stranded/all.featureCounts.summary\"\n)) %&gt;%\n    mutate(strandedness = \"Stranded\")\nfc_uns &lt;- load_fc_summary(here(\n    \"/mnt/hpcfs/a1647910/20200310_rRNADepletion/1_Psen2S4Ter/smk-rnaseq-counts-1.2.2/results/featureCounts\",\n    \"unstranded/all.featureCounts.summary\"\n)) %&gt;%\n    mutate(strandedness = \"Unstranded\")\nfc_rev &lt;- load_fc_summary(here(\n    \"/mnt/hpcfs/a1647910/20200310_rRNADepletion/1_Psen2S4Ter/smk-rnaseq-counts-1.2.2/results/featureCounts\",\n    \"reverse/all.featureCounts.summary\"\n)) %&gt;%\n    mutate(strandedness = \"Reverse Stranded\")\nfc_all &lt;- rbind(fc_str, fc_uns, fc_rev) %&gt;%\n    dplyr::mutate(strandedness = factor(\n        strandedness, levels = c(\"Stranded\", \"Unstranded\", \"Reverse Stranded\")\n    )) %&gt;%\n    dplyr::filter(sample %in% meta$sample)\n\n\nDescription of featureCounts unassigned read types:\n\nUnassigned Unmapped: unmapped reads cannot be assigned.\nUnassigned Read Type: reads that have an unexpected read type (eg. being a single end read included in a paired end dataset) and also cannot be counted with confidence (eg. due to stranded counting). Such reads are typically generated from a read trimming program.\nUnassigned Singleton: read pairs that have only one end mapped.\nUnassigned MappingQuality: alignments with a mapping quality score lower than the threshold.\nUnassigned Chimera: two ends in a paired end alignment are located on different chromosomes or have unexpected orientation.\nUnassigned FragementLength: fragment length inferred from paired end alignment does not meet the length criteria.\nUnassigned Duplicate: alignments marked as duplicate (indicated in the FLAG field).\nUnassigned MultiMapping: alignments reported for multi-mapping reads (indicated by ‘NH’ tag).\nUnassigned Secondary: alignments reported as secondary alignments (indicated in the FLAG field).\nUnassigned Split (or Unassigned NonSplit): alignments that contain junctions (or do not contain junctions).\nUnassigned NoFeatures: alignments that do not overlap any feature.\nUnassigned Overlapping Length: alignments that do not overlap any feature (or metafeature) with the minimum required overlap length.\nUnassigned Ambiguity: alignments that overlap two or more features (feature-level summarization) or meta-features (meta-feature-level summarization).\n\n\n\nCode\nfc_all %&gt;%\n    dplyr::filter(reads != 0) %&gt;%\n    mutate(\n        Status = fct_relevel(\n            Status, \"Unassigned Overlapping Length\", \"Unassigned NoFeatures\",\n            \"Unassigned MultiMapping\", \"Unassigned Ambiguity\", \"Assigned\"\n        )\n    ) %&gt;%\n    ggplot(aes(x = sample, y = reads, fill = Status)) +\n    geom_bar(position = \"fill\", stat = \"identity\") +\n    coord_flip() +\n    facet_wrap(~strandedness, ncol = 1) +\n    scale_fill_manual(\n        values = brewer.pal(9, \"Pastel1\"),\n        breaks = c(\n            \"Assigned\", \"Unassigned Ambiguity\", \"Unassigned MultiMapping\",\n            \"Unassigned NoFeatures\", \"Unassigned Overlapping Length\"\n        )\n    ) +\n    labs(\n        title = \"Gene counts summary\",\n        x = \"Sample\",\n        y = \"Total reads\",\n        fill = \"Type\"\n    ) +\n    scale_y_continuous(\n        labels = scales::percent,\n        breaks = seq(0, 1, 0.1),\n        expand = expansion(c(0, 0))\n    ) +\n    theme(\n        axis.text.x = element_text(angle = -40, , vjust = 1, hjust = 0)\n    )\n\n\n\n\n\n\n\n\n\n\n\nCode\nfc_all %&gt;%\n    dplyr::filter(\n        reads != 0,\n        strandedness != \"Stranded\"\n    ) %&gt;%\n    ggplot(aes(x = strandedness, y = reads, fill = Status)) +\n    geom_violin() +\n    geom_boxplot(width=0.2, show.legend = FALSE) +\n    facet_wrap(~Status, scales = \"free_y\", ncol = 2) +\n    scale_fill_manual(\n        values = brewer.pal(8, \"Pastel1\")\n    ) +\n    scale_y_continuous(labels = scales::scientific) +\n    labs(\n        x = \"Strandedness\",\n        y = \"Total reads\",\n        fill = \"Type\"\n    )",
    "crumbs": [
      "QC"
    ]
  },
  {
    "objectID": "de.html",
    "href": "de.html",
    "title": "rRNADepletion_s4ter",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(magrittr)\nlibrary(ngsReports)\nlibrary(here)\nlibrary(scales)\nlibrary(ggpubr)\nlibrary(kableExtra)\nlibrary(AnnotationHub)\nlibrary(ensembldb)\nlibrary(edgeR)\nlibrary(corrplot)\nlibrary(DT)\nlibrary(ggrepel)\nlibrary(msigdbr)\nlibrary(fgsea)\nlibrary(pander)\n\n\n\n\nCode\nif (interactive()) setwd(here::here())\ntheme_set(theme_bw())",
    "crumbs": [
      "DGE"
    ]
  },
  {
    "objectID": "de.html#sample-information",
    "href": "de.html#sample-information",
    "title": "rRNADepletion_s4ter",
    "section": "Sample information",
    "text": "Sample information\n\n\nCode\nfiles &lt;- list.files(\n    path = \"/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/old_bash_analysis.0_rawData/FastQC\",\n    pattern = \"zip\",\n    full.names = TRUE\n)\n\n\n\n\nCode\nsamples &lt;- tibble(\n    sample = str_remove(basename(files), \"_fastqc.zip\"),\n    dataset = NA,\n    organism = NA\n) %&gt;%\n    mutate(\n        dataset = ifelse(\n            str_detect(sample, \"Ps2Ex\"), \"Psen2S4Ter\", dataset\n        ),\n        organism = ifelse(\n            str_detect(sample, \"Ps2Ex\"), \"zebrafish\", organism\n        )\n    )\ndatasets &lt;- samples$dataset %&gt;% \n    unique()\n\n\nThe following analysis involves 0 paired-end samples across 0 dataset(s): .",
    "crumbs": [
      "DGE"
    ]
  },
  {
    "objectID": "de.html#rrna-proportions",
    "href": "de.html#rrna-proportions",
    "title": "rRNADepletion_s4ter",
    "section": "rRNA proportions",
    "text": "rRNA proportions\n\n\nCode\nrRnaProp &lt;- read.delim(\n    \"/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/old_bash_analysis/3_bwa/log/samples.mapped.all\", \n    sep = \":\", \n    col.names = c(\"sample\", \"proportion\"), \n    header = FALSE\n) %&gt;% \n    mutate(\n        sample = str_remove_all(sample, \"_6month_F3|[0-9]*_Ps2Ex3M1_|.mapped\"),\n        sample = basename(sample),\n        proportion = proportion/100,\n        dataset = \"Psen2S4Ter\",\n        organism = \"zebrafish\",\n        group = str_extract(sample, \"(WT|Heter|Hom)\")\n    ) %&gt;%\n    as_tibble()\nrRnaProp$dataset %&lt;&gt;%\n    factor(levels = c(\"Psen2S4Ter\"))\n\n\n\n\nCode\nrRnaProp %&gt;%\n    ggplot(aes(sample, proportion)) +\n    geom_bar(stat = \"identity\", position = \"dodge\") +\n    facet_wrap(~dataset, scales = \"free_x\") +\n    scale_y_continuous(labels = percent) +\n    labs(x = \"Sample\", y = \"Percent of Total\", fill = \"Read pair\") +\n    theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\nPercentages of each library that align to rRNA sequences with bwa mem.\n\n\n\n\n\n\nCode\nrRnaProp %&gt;%\n    ggplot(aes(group, proportion, fill = group)) +\n    geom_boxplot() +\n    scale_y_continuous(labels = percent) +\n    labs(x = \"Genotype\", y = \"Percent of total RNA\", title = \"rRNA proportions of each genotype\") +\n    scale_fill_discrete(\n        name = \"Genotype\"\n    )",
    "crumbs": [
      "DGE"
    ]
  },
  {
    "objectID": "de.html#gene-gc-content-and-length",
    "href": "de.html#gene-gc-content-and-length",
    "title": "rRNADepletion_s4ter",
    "section": "Gene GC content and length",
    "text": "Gene GC content and length\n\n\nCode\n# dgeList &lt;- read_tsv(\"/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/old_bash_analysis.4_star2pass/featureCounts/genes.out\") %&gt;%\ndgeList &lt;- read_tsv(\n    paste0(\n        \"/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter\",\n        \"/smk-rnaseq-counts-1.2.2/results/featureCounts/reverse/all.featureCounts\"\n    ),\n    comment = \"#\"\n) %&gt;%\n    dplyr::select(-c(Chr, Start, End, Strand, Length)) %&gt;%\n    set_colnames(basename(colnames(.))) %&gt;%\n    set_colnames(str_remove(colnames(.), \"\\\\.bam$\")) %&gt;%\n    as.data.frame() %&gt;%\n    column_to_rownames(\"Geneid\") %&gt;%\n    DGEList() %&gt;%\n    calcNormFactors()\n\n\n\n\nCode\ndgeList$genes &lt;- genesGR_Dr[rownames(dgeList),]\nmcols(dgeList$genes) %&lt;&gt;% \n    as.data.frame() %&gt;% \n    left_join(geneGcLen_Dr)\naddInfo &lt;- tibble(\n    sample = rRnaProp$sample,\n    dataset = \"Psen2S4Ter\",\n    organism = \"zebrafish\",\n    rRNA = rRnaProp$proportion\n)\ndgeList$samples %&lt;&gt;%\n    rownames_to_column(\"rowname\") %&gt;%\n    mutate(sample = rowname) %&gt;%\n    left_join(addInfo) %&gt;%\n    column_to_rownames(\"rowname\")\n# dgeList$samples$filenames &lt;- list.files(\n#   \"/mnt/phoenix/gpfs/20200310_rRNADepletion/1_Psen2S4Ter/old_bash_analysis.2_alignedData/bam\", \n#   pattern = \".bam$\", \n#   full.names = TRUE\n# )\ndgeList$samples$group &lt;- colnames(dgeList) %&gt;%\n    str_extract(\"(WT|Heter|Hom)\") %&gt;%\n    factor(levels = c(\"WT\", \"Heter\", \"Hom\"))\n\n\n\n\nCode\ngcInfo &lt;- function(x) {\n    x$counts %&gt;%\n        as.data.frame() %&gt;%\n        rownames_to_column(\"gene_id\") %&gt;%\n        as_tibble() %&gt;%\n        pivot_longer(\n            cols = colnames(x), \n            names_to = \"sample\", \n            values_to = \"counts\"\n        ) %&gt;%\n        dplyr::filter(\n            counts &gt; 0\n        ) %&gt;%\n        left_join(\n            geneGcLen_Dr\n        ) %&gt;%\n        dplyr::select(\n            ends_with(\"id\"), sample, counts, aveGc, maxLen\n        ) %&gt;%\n        split(f = .$sample) %&gt;%\n        lapply(\n            function(x){\n                DataFrame(\n                    gc = Rle(x$aveGc, x$counts),\n                    logLen = Rle(log10(x$maxLen), x$counts)\n                )\n            }\n        ) \n}\ngcSummary &lt;- function(x) {\n    x %&gt;%\n        vapply(function(x){\n            c(mean(x$gc), sd(x$gc), mean(x$logLen), sd(x$logLen))\n        }, numeric(4)\n        ) %&gt;%\n        t() %&gt;%\n        set_colnames(\n            c(\"mn_gc\", \"sd_gc\", \"mn_logLen\", \"sd_logLen\")\n        ) %&gt;%\n        as.data.frame() %&gt;%\n        rownames_to_column(\"sample\") %&gt;%\n        as_tibble()\n}\n\n\n\n\nCode\nrle &lt;- gcInfo(dgeList)\n\n\n\n\nCode\nsumGc &lt;- gcSummary(rle)\n\n\n\n\nCode\na &lt;- sumGc %&gt;%\n    left_join(dgeList$samples) %&gt;%\n    ggplot(aes(rRNA, mn_logLen)) +\n    geom_point(aes(colour = group), size = 3) +\n    geom_smooth(method = \"lm\") +\n    scale_x_continuous(labels = percent) +\n    labs(\n        x = \"rRNA Proportion of Initial Library\",\n        y = \"Mean log(Length)\",\n        colour = \"Genotype\"\n    ) \nb &lt;- sumGc %&gt;%\n    left_join(dgeList$samples) %&gt;%\n    ggplot(aes(rRNA, mn_gc)) +\n    geom_point(aes(colour = group), size = 3) +\n    geom_smooth(method = \"lm\") +\n    scale_y_continuous(labels = percent) +\n    scale_x_continuous(labels = percent) +\n    labs(\n        x = \"rRNA Proportion of Initial Library\",\n        y = \"Mean GC Content\",\n        colour = \"Genotype\"\n    )\nggarrange(\n    a, b, ncol = 2, nrow = 1, \n    common.legend = TRUE, legend = \"bottom\"\n) %&gt;%\n    annotate_figure(\"PsenS4Ter Dataset (D. rerio)\")\n\n\n\n\n\nComparison of residual bias potentially introduced by incomplete rRNA removal. Regression lines are shown along with standard error bands for each comparison.",
    "crumbs": [
      "DGE"
    ]
  },
  {
    "objectID": "de.html#pca",
    "href": "de.html#pca",
    "title": "rRNADepletion_s4ter",
    "section": "PCA",
    "text": "PCA\n\n\nCode\ngenes2keep &lt;- dgeList %&gt;%\n    cpm() %&gt;%\n    is_greater_than(1) %&gt;%\n    rowSums() %&gt;%\n    is_weakly_greater_than(4)\ndgeFilt &lt;- dgeList[genes2keep,, keep.lib.sizes = FALSE] %&gt;%\n    calcNormFactors()\n\n\n\n\nCode\npca &lt;- cpm(dgeFilt, log = TRUE) %&gt;%\n    t() %&gt;%\n    prcomp()\n\n\n\n\nCode\npcaCor &lt;- pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    left_join(sumGc) %&gt;%\n    as_tibble() %&gt;% \n    left_join(dgeList$samples) %&gt;%\n    dplyr::select(\n        PC1, PC2, PC3, \n        Mean_GC = mn_gc, \n        Mean_Length = mn_logLen, \n        rRna_Proportion = rRNA\n    ) %&gt;% \n    cor()\n\n\n\n\nCode\na &lt;- pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    left_join(dgeList$samples) %&gt;%\n    as_tibble() %&gt;%\n    ggplot(aes(PC1, PC2)) +\n    geom_point(aes(colour = group), size = 2) +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(pca)$importance[\"Proportion of Variance\",\"PC1\"]),\")\"),\n        y = paste0(\"PC2 (\", percent(summary(pca)$importance[\"Proportion of Variance\",\"PC2\"]),\")\"),\n        colour = \"Genotype\"\n    )\nb &lt;- pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    left_join(dgeList$samples) %&gt;%\n    ggplot(aes(PC1, rRNA, label = rRNA)) +\n    geom_point(aes(colour = group), size = 2) +\n    geom_smooth(method = \"lm\") +\n    geom_text_repel(show.legend = FALSE) +\n    scale_y_continuous(labels = percent) +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(pca)$importance[\"Proportion of Variance\",\"PC1\"]),\")\"),\n        y = \"rRNA Proportion of Initial Library\",\n        colour = \"Genotype\"\n    )\nc &lt;- pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    left_join(sumGc) %&gt;%\n    left_join(dgeList$samples) %&gt;%\n    as_tibble() %&gt;%\n    ggplot(aes(PC1, mn_logLen)) +\n    geom_point(aes(colour = group), size = 2) +\n    geom_smooth(method = \"lm\") +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(pca)$importance[\"Proportion of Variance\",\"PC1\"]),\")\"),\n        y = \"Mean log(Length)\",\n        colour = \"Genotype\"\n    )\nd &lt;- pca$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    left_join(sumGc) %&gt;%\n    left_join(dgeList$samples) %&gt;%\n    as_tibble() %&gt;%\n    ggplot(aes(PC1, mn_gc)) +\n    geom_point(aes(colour = group), size = 2) +\n    geom_smooth(method = \"lm\") +\n    scale_y_continuous(labels = percent) +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(pca)$importance[\"Proportion of Variance\",\"PC1\"]),\")\"),\n        y = \"Mean GC\",\n        colour = \"Genotype\"\n    )\nggarrange(\n    a, b, c, d, ncol = 2, nrow = 2,\n    common.legend = TRUE, legend = \"bottom\"\n) %&gt;%\n    annotate_figure(\"Psen2S4Ter\")\n\n\n\n\n\nPCA plot showing rRNA proportion, mean GC content and mean log(length) after summarisation to gene-level.\n\n\n\n\n\n\nCode\ncorrplot(\n    pcaCor,\n    type = \"lower\", \n    diag = FALSE, \n    addCoef.col = 1, addCoefasPercent = TRUE\n)\n\n\n\n\n\nCorrelations between the first three principal components and measured variables: mean GC content, mean log(length) and rRNA proportion.",
    "crumbs": [
      "DGE"
    ]
  },
  {
    "objectID": "de.html#rrna",
    "href": "de.html#rrna",
    "title": "rRNADepletion_s4ter",
    "section": "rRNA",
    "text": "rRNA\n\n\nCode\ndesign_r &lt;- model.matrix(~rRNA, data = dgeFilt$samples)\n\n\n\n\nCode\ndisp_r &lt;- estimateDisp(dgeFilt, design_r)\nplotBCV(disp_r)\n\n\n\n\n\n\n\n\n\n\n\nCode\nfit_r &lt;- glmQLFit(disp_r)\nplotQLDisp(fit_r)\n\n\n\n\n\n\n\n\n\n\n\nCode\ntt_r &lt;- glmQLFTest(fit_r) %&gt;%\n    topTags(n = Inf) %&gt;%\n    .[[\"table\"]] %&gt;%\n    rename_all(\n        str_remove, pattern = \"ID.\"\n    ) %&gt;%\n    dplyr::select(\n        Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n        P.Value = PValue, FDR, aveLen, maxLen, aveGc, longestGc\n    ) %&gt;%\n    as_tibble() %&gt;%\n    mutate(\n        Bonf = p.adjust(P.Value, \"bonf\"),\n        DE = FDR &lt; 0.05\n    )\n\n\n\n\nCode\ntt_r %&gt;%\n    dplyr::filter(DE) %&gt;%\n    dplyr::slice(1:1000) %&gt;%\n    dplyr::select(-gene_biotype, -DE, -aveLen, -maxLen, -aveGc, -longestGc) %&gt;%\n    mutate(across(c(\"P.Value\", \"FDR\", \"Bonf\"), ~ sprintf(\"%.2e\", .x))) %&gt;%\n    datatable(\n        options = list(pageLength = 10), \n        class = \"striped hover condensed responsive\", \n        filter = \"top\",\n        caption = paste0(\n            \"rRNA: \",\n            nrow(dplyr::filter(tt_r, DE)),\n            \" of \",\n            nrow(tt_r),\n            \" genes were classified as differentially expressed \",\n            \"with a FDR &lt; 0.05. \",\n            \"If more than 1000 genes were classified as DE, only the top 1000 are shown.\"\n        )\n    ) %&gt;%\n    formatRound(c(\"logFC\", \"logCPM\", \"F\"), digits = 2)",
    "crumbs": [
      "DGE"
    ]
  },
  {
    "objectID": "de.html#genotype",
    "href": "de.html#genotype",
    "title": "rRNADepletion_s4ter",
    "section": "Genotype",
    "text": "Genotype\n\n\nCode\ndesign_g &lt;- model.matrix(~group, data = dgeFilt$samples)\n\n\n\n\nCode\ndisp_g &lt;- estimateDisp(dgeFilt, design_g)\nplotBCV(disp_g)\n\n\n\n\n\n\n\n\n\n\n\nCode\nfit_g &lt;- glmQLFit(disp_g)\nplotQLDisp(fit_g)\n\n\n\n\n\n\n\n\n\n\n\nCode\ntt_g &lt;- colnames(design_g) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_g, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\n\n\nCode\ndisplayRes_de(tt_g$groupHeter)\n\n\n\n\n\n\nCode\ndisplayRes_de(tt_g$groupHom)",
    "crumbs": [
      "DGE"
    ]
  },
  {
    "objectID": "de.html#rrna-genotype",
    "href": "de.html#rrna-genotype",
    "title": "rRNADepletion_s4ter",
    "section": "rRNA + genotype",
    "text": "rRNA + genotype\n\n\nCode\ndesign_gr &lt;- model.matrix(~rRNA + group, data = dgeFilt$samples)\n\n\n\n\nCode\ndisp_gr &lt;- estimateDisp(dgeFilt, design_gr)\nplotBCV(disp_gr)\n\n\n\n\n\n\n\n\n\n\n\nCode\nfit_gr &lt;- glmQLFit(disp_gr)\nplotQLDisp(fit_gr)\n\n\n\n\n\n\n\n\n\n\n\nCode\ntt_gr &lt;- colnames(design_gr) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_gr, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR,\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\n\n\nCode\ndisplayRes_de(tt_gr$rRNA)\n\n\n\n\n\n\nCode\ndisplayRes_de(tt_gr$groupHeter)\n\n\n\n\n\n\nCode\ndisplayRes_de(tt_gr$groupHom)",
    "crumbs": [
      "DGE"
    ]
  },
  {
    "objectID": "de.html#rrna-genotype-deconvoluted",
    "href": "de.html#rrna-genotype-deconvoluted",
    "title": "rRNADepletion_s4ter",
    "section": "rRNA + genotype (deconvoluted)",
    "text": "rRNA + genotype (deconvoluted)\n\n\nCode\ndesign_deconv &lt;- design_gr %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"ID\") %&gt;%\n    mutate(\n        groupWT = as.integer(str_detect(ID, \"WT\")),\n        across(\n            .cols = starts_with(\"group\"),\n            .fns = function(x){\n                x &lt;- x - .$rRNA\n                x[x&lt;0] &lt;- 0\n                x\n            }\n        )\n    ) %&gt;%\n    dplyr::select(\n        ID, rRNA, starts_with(\"group\")\n    ) %&gt;%\n    column_to_rownames(\"ID\") %&gt;%\n    as.matrix()\ncont_deconv &lt;-makeContrasts(\n    groupHeter = groupHeter - groupWT,\n    groupHom = groupHom - groupWT,\n    rRNA = rRNA,\n    levels = colnames(design_deconv)\n)\n\n\n\n\nCode\ndisp_deconv &lt;- estimateDisp(dgeFilt, design_deconv)\nplotBCV(disp_deconv)\n\n\n\n\n\n\n\n\n\n\n\nCode\nfit_deconv &lt;- glmQLFit(disp_deconv)\nplotQLDisp(fit_deconv)\n\n\n\n\n\n\n\n\n\n\n\nCode\ntt_deconv &lt;- colnames(cont_deconv) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_deconv, contrast = cont_deconv[,x]) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR,\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\n\n\nCode\ndisplayRes_de(tt_deconv$rRNA)\n\n\n\n\n\n\nCode\ndisplayRes_de(tt_deconv$groupHeter)\n\n\n\n\n\n\nCode\ndisplayRes_de(tt_deconv$groupHom)",
    "crumbs": [
      "DGE"
    ]
  },
  {
    "objectID": "kappa.html",
    "href": "kappa.html",
    "title": "rRNADepletion_s4ter",
    "section": "",
    "text": "library(tidyverse)\nlibrary(magrittr)\nlibrary(parallel)\nlibrary(here)\nlibrary(scales)\nlibrary(AnnotationHub)\nlibrary(Biostrings)\nlibrary(Rsamtools)\nlibrary(cqn)\nlibrary(DT)\nlibrary(edgeR)\nlibrary(msigdbr)\nlibrary(fgsea)\n\n\nif (interactive()) setwd(here::here())\ntheme_set(theme_bw())\n\n\n# ah &lt;- AnnotationHub() %&gt;%\n#   subset(species == \"Danio rerio\") %&gt;%\n#   subset(rdataclass == \"EnsDb\")\n# ensDb &lt;- ah[[\"AH83189\"]]",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-5",
    "href": "kappa.html#k-5",
    "title": "rRNADepletion_s4ter",
    "section": "k = 5",
    "text": "k = 5\n\nlfc_k5 &lt;- structure(k5topTable$logFC, names = k5topTable$mer)\n\n\nif (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k5.Rds\"))) {\n    kappa_k5 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k5.Rds\"))\n} else {\n    dumps_k5 &lt;- list.files(\n        here(\"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k5/\"),\n        full.names = TRUE\n    )\n    kappa_k5 &lt;- dumps_k5 %&gt;%\n        vapply(\\(x){\n            gene_mers &lt;- read_lines(x) %&gt;%\n                str_split(., \" \")\n            mer_counts &lt;- vapply(gene_mers, \\(x){as.numeric(x[2])}, FUN.VALUE = numeric(1))\n            names(mer_counts) &lt;- vapply(gene_mers, \\(x){x[1]}, FUN.VALUE = character(1))\n            sum(lfc_k5[names(mer_counts)] * mer_counts)\n        }, numeric(1)) %&gt;%\n        set_names(str_remove(basename(dumps_k5), \".dumps\"))\n}\n\n\n# if (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k5.Rds\"))) {\n#     kappa_k5 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k5.Rds\"))\n# } else {\n#     kappa_k5 &lt;- vapply(rownames(dgeFilt), \\(x){\n#         scan &lt;- scan(\n#             here(paste0(\n#                 \"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k5/\", x, \".dumps\"\n#             )),\n#             what = list(character(1), numeric(1))\n#         )\n#         mer_counts &lt;- structure(scan[[2]], names = scan[[1]])\n#         sum(lfc_k5[names(mer_counts)] * mer_counts)\n#     }, numeric(1))\n# }",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-6",
    "href": "kappa.html#k-6",
    "title": "rRNADepletion_s4ter",
    "section": "k = 6",
    "text": "k = 6\n\nlfc_k6 &lt;- structure(k6topTable$logFC, names = k6topTable$mer)\n\n\nif (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k6.Rds\"))) {\n    kappa_k6 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k6.Rds\"))\n} else {\n    dumps_k6 &lt;- list.files(\n        here(\"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k6/\"),\n        full.names = TRUE\n    )\n    kappa_k6 &lt;- dumps_k6 %&gt;%\n        vapply(\\(x){\n            gene_mers &lt;- read_lines(x) %&gt;%\n                str_split(., \" \")\n            mer_counts &lt;- vapply(gene_mers, \\(x){as.numeric(x[2])}, FUN.VALUE = numeric(1))\n            names(mer_counts) &lt;- vapply(gene_mers, \\(x){x[1]}, FUN.VALUE = character(1))\n            sum(lfc_k6[names(mer_counts)] * mer_counts)\n        }, numeric(1)) %&gt;%\n        set_names(str_remove(basename(dumps_k6), \".dumps\"))\n}\n\n\n# if (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k6.Rds\"))) {\n#     kappa_k6 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k6.Rds\"))\n# } else {\n#     kappa_k6 &lt;- vapply(rownames(dgeFilt), \\(x){\n#         scan &lt;- scan(\n#             here(paste0(\n#                 \"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k6/\", x, \".dumps\"\n#             )),\n#             what = list(character(1), numeric(1))\n#         )\n#         mer_counts &lt;- structure(scan[[2]], names = scan[[1]])\n#         sum(lfc_k6[names(mer_counts)] * mer_counts)\n#     }, numeric(1))\n# }",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-7",
    "href": "kappa.html#k-7",
    "title": "rRNADepletion_s4ter",
    "section": "k = 7",
    "text": "k = 7\n\nlfc_k7 &lt;- structure(k7topTable$logFC, names = k7topTable$mer)\n\n\nif (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k7.Rds\"))) {\n    kappa_k7 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k7.Rds\"))\n} else {\n    dumps_k7 &lt;- list.files(\n        here(\"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k7/\"),\n        full.names = TRUE\n    )\n    kappa_k7 &lt;- dumps_k7 %&gt;%\n        vapply(\\(x){\n            gene_mers &lt;- read_lines(x) %&gt;%\n                str_split(., \" \")\n            mer_counts &lt;- vapply(gene_mers, \\(x){as.numeric(x[2])}, FUN.VALUE = numeric(1))\n            names(mer_counts) &lt;- vapply(gene_mers, \\(x){x[1]}, FUN.VALUE = character(1))\n            sum(lfc_k7[names(mer_counts)] * mer_counts)\n        }, numeric(1)) %&gt;%\n        set_names(str_remove(basename(dumps_k7), \".dumps\"))\n}\n\n\n# if (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k7.Rds\"))) {\n#     kappa_k7 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k7.Rds\"))\n# } else {\n#     kappa_k7 &lt;- vapply(rownames(dgeFilt), \\(x){\n#         scan &lt;- scan(\n#             here(paste0(\n#                 \"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k7/\", x, \".dumps\"\n#             )),\n#             what = list(character(1), numeric(1))\n#         )\n#         mer_counts &lt;- structure(scan[[2]], names = scan[[1]])\n#         sum(lfc_k7[names(mer_counts)] * mer_counts)\n#     }, numeric(1))\n# }",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-8",
    "href": "kappa.html#k-8",
    "title": "rRNADepletion_s4ter",
    "section": "k = 8",
    "text": "k = 8\n\nlfc_k8 &lt;- structure(k8topTable$logFC, names = k8topTable$mer)\n\n\nif (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k8.Rds\"))) {\n    kappa_k8 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k8.Rds\"))\n} else {\n    dumps_k8 &lt;- list.files(\n        here(\"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k8/\"),\n        full.names = TRUE\n    )\n    kappa_k8 &lt;- dumps_k8 %&gt;%\n        vapply(\\(x){\n            gene_mers &lt;- read_lines(x) %&gt;%\n                str_split(., \" \")\n            mer_counts &lt;- vapply(gene_mers, \\(x){as.numeric(x[2])}, FUN.VALUE = numeric(1))\n            names(mer_counts) &lt;- vapply(gene_mers, \\(x){x[1]}, FUN.VALUE = character(1))\n            sum(lfc_k8[names(mer_counts)] * mer_counts)\n        }, numeric(1)) %&gt;%\n        set_names(str_remove(basename(dumps_k8), \".dumps\"))\n}\n\n\n# if (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k8.Rds\"))) {\n#     kappa_k8 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k8.Rds\"))\n# } else {\n#     kappa_k8 &lt;- vapply(rownames(dgeFilt), \\(x){\n#         scan &lt;- scan(\n#             here(paste0(\n#                 \"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k8/\", x, \".dumps\"\n#             )),\n#             what = list(character(1), numeric(1))\n#         )\n#         mer_counts &lt;- structure(scan[[2]], names = scan[[1]])\n#         sum(lfc_k8[names(mer_counts)] * mer_counts)\n#     }, numeric(1))\n# }",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-9",
    "href": "kappa.html#k-9",
    "title": "rRNADepletion_s4ter",
    "section": "k = 9",
    "text": "k = 9\n\nlfc_k9 &lt;- structure(k9topTable$logFC, names = k9topTable$mer)\n\n\nif (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k9.Rds\"))) {\n    kappa_k9 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k9.Rds\"))\n} else {\n    dumps_k9 &lt;- list.files(\n        here(\"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k9/\"),\n        full.names = TRUE\n    )\n    kappa_k9 &lt;- dumps_k9 %&gt;%\n        vapply(\\(x){\n            gene_mers &lt;- read_lines(x) %&gt;%\n                str_split(., \" \")\n            mer_counts &lt;- vapply(gene_mers, \\(x){as.numeric(x[2])}, FUN.VALUE = numeric(1))\n            names(mer_counts) &lt;- vapply(gene_mers, \\(x){x[1]}, FUN.VALUE = character(1))\n            sum(lfc_k9[names(mer_counts)] * mer_counts)\n        }, numeric(1)) %&gt;%\n        set_names(str_remove(basename(dumps_k9), \".dumps\"))\n}\n\n\n# if (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k9.Rds\"))) {\n#     kappa_k9 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k9.Rds\"))\n# } else {\n#     kappa_k9 &lt;- vapply(rownames(dgeFilt), \\(x){\n#         scan &lt;- scan(\n#             here(paste0(\n#                 \"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k9/\", x, \".dumps\"\n#             )),\n#             what = list(character(1), numeric(1))\n#         )\n#         mer_counts &lt;- structure(scan[[2]], names = scan[[1]])\n#         sum(lfc_k9[names(mer_counts)] * mer_counts)\n#     }, numeric(1))\n# }",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-10",
    "href": "kappa.html#k-10",
    "title": "rRNADepletion_s4ter",
    "section": "k = 10",
    "text": "k = 10\n\nlfc_k10 &lt;- structure(k10topTable$logFC, names = k10topTable$mer)\n\n\nif (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k10.Rds\"))) {\n    kappa_k10 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k10.Rds\"))\n} else {\n    dumps_k10 &lt;- list.files(\n        here(\"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k10/\"),\n        full.names = TRUE\n    )\n    kappa_k10 &lt;- dumps_k10 %&gt;%\n        vapply(\\(x){\n            gene_mers &lt;- read_lines(x) %&gt;%\n                str_split(., \" \")\n            mer_counts &lt;- vapply(gene_mers, \\(x){as.numeric(x[2])}, FUN.VALUE = numeric(1))\n            names(mer_counts) &lt;- vapply(gene_mers, \\(x){x[1]}, FUN.VALUE = character(1))\n            sum(lfc_k10[names(mer_counts)] * mer_counts)\n        }, numeric(1)) %&gt;%\n        set_names(str_remove(basename(dumps_k10), \".dumps\"))\n}\n\n\n# if (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k10.Rds\"))) {\n#     kappa_k10 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k10.Rds\"))\n# } else {\n#     kappa_k10 &lt;- vapply(rownames(dgeFilt), \\(x){\n#         scan &lt;- scan(\n#             here(paste0(\n#                 \"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k10/\", x, \".dumps\"\n#             )),\n#             what = list(character(1), numeric(1))\n#         )\n#         mer_counts &lt;- structure(scan[[2]], names = scan[[1]])\n#         sum(lfc_k10[names(mer_counts)] * mer_counts)\n#     }, numeric(1))\n# }",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-11",
    "href": "kappa.html#k-11",
    "title": "rRNADepletion_s4ter",
    "section": "k = 11",
    "text": "k = 11\n\nlfc_k11 &lt;- structure(k11topTable$logFC, names = k11topTable$mer)\n\n\nif (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k11.Rds\"))) {\n    kappa_k11 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k11.Rds\"))\n} else {\n    dumps_k11 &lt;- list.files(\n        here(\"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k11/\"),\n        full.names = TRUE\n    )\n    kappa_k11 &lt;- dumps_k11 %&gt;%\n        vapply(\\(x){\n            gene_mers &lt;- read_lines(x) %&gt;%\n                str_split(., \" \")\n            mer_counts &lt;- vapply(gene_mers, \\(x){as.numeric(x[2])}, FUN.VALUE = numeric(1))\n            names(mer_counts) &lt;- vapply(gene_mers, \\(x){x[1]}, FUN.VALUE = character(1))\n            sum(lfc_k11[names(mer_counts)] * mer_counts)\n        }, numeric(1)) %&gt;%\n        set_names(str_remove(basename(dumps_k11), \".dumps\"))\n}\n\n\n# if (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k11.Rds\"))) {\n#     kappa_k11 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k11.Rds\"))\n# } else {\n#     kappa_k11 &lt;- vapply(rownames(dgeFilt), \\(x){\n#         scan &lt;- scan(\n#             here(paste0(\n#                 \"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k11/\", x, \".dumps\"\n#             )),\n#             what = list(character(1), numeric(1))\n#         )\n#         mer_counts &lt;- structure(scan[[2]], names = scan[[1]])\n#         sum(lfc_k11[names(mer_counts)] * mer_counts)\n#     }, numeric(1))\n# }",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-12",
    "href": "kappa.html#k-12",
    "title": "rRNADepletion_s4ter",
    "section": "k = 12",
    "text": "k = 12\n\nlfc_k12 &lt;- structure(k12topTable$logFC, names = k12topTable$mer)\n\n\nif (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k12.Rds\"))) {\n    kappa_k12 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k12.Rds\"))\n} else {\n    dumps_k12 &lt;- list.files(\n        here(\"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k12/\"),\n        full.names = TRUE\n    )\n    kappa_k12 &lt;- dumps_k12 %&gt;%\n        vapply(\\(x){\n            gene_mers &lt;- read_lines(x) %&gt;%\n                str_split(., \" \")\n            mer_counts &lt;- vapply(gene_mers, \\(x){as.numeric(x[2])}, FUN.VALUE = numeric(1))\n            names(mer_counts) &lt;- vapply(gene_mers, \\(x){x[1]}, FUN.VALUE = character(1))\n            sum(lfc_k12[names(mer_counts)] * mer_counts)\n        }, numeric(1)) %&gt;%\n        set_names(str_remove(basename(dumps_k12), \".dumps\"))\n}\n\n\n# if (file.exists(here(\"1_Psen2S4Ter/Rdata/kappa_k12.Rds\"))) {\n#     kappa_k12 &lt;- readRDS(here(\"1_Psen2S4Ter/Rdata/kappa_k12.Rds\"))\n# } else {\n#     kappa_k12 &lt;- vapply(rownames(dgeFilt), \\(x){\n#         scan &lt;- scan(\n#             here(paste0(\n#                 \"1_Psen2S4Ter/analysis-gene_kmer/results/dumps/k12/\", x, \".dumps\"\n#             )),\n#             what = list(character(1), numeric(1))\n#         )\n#         mer_counts &lt;- structure(scan[[2]], names = scan[[1]])\n#         sum(lfc_k12[names(mer_counts)] * mer_counts)\n#     }, numeric(1))\n# }",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-5-1",
    "href": "kappa.html#k-5-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 5",
    "text": "k = 5\n\nkappa_cqn_k5 &lt;- rep(0, length(rownames(dgeFilt))) %&gt;%\n    set_names(rownames(dgeFilt))\nkappa_cqn_k5[names(kappa_k5)] &lt;- kappa_k5\ncqn_k5 &lt;- cqn(\n    dgeFilt$counts,\n    x = kappa_cqn_k5,\n    lengths = mcols(dgeFilt$genes)$maxLen,\n    sizeFactors = dgeFilt$samples$lib.size\n)\ncqnplot(cqn_k5)\n\n\n\n\n\n\n\n\n\ndgeFilt_k5 &lt;- dgeFilt\n\n\ndgeFilt_k5$offset &lt;- cqn_k5$glm.offset\n\n\nrRNA\n\ndesign_r_k5 &lt;- model.matrix(~rRNA, data = dgeFilt_k5$samples)\n\n\ndisp_r_k5 &lt;- estimateDisp(dgeFilt_k5, design_r_k5)\nplotBCV(disp_r_k5)\n\n\n\n\n\n\n\n\n\nfit_r_k5 &lt;- glmQLFit(disp_r_k5)\nplotQLDisp(fit_r_k5)\n\n\n\n\n\n\n\n\n\nres_r_k5 &lt;- colnames(design_r_k5) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_r_k5, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_r_k5$rRNA)\n\n\n\n\n\n\n\nGenotype\n\ndesign_g_k5 &lt;- model.matrix(~group, data = dgeFilt_k5$samples)\n\n\ndisp_g_k5 &lt;- estimateDisp(dgeFilt_k5, design_g_k5)\nplotBCV(disp_g_k5)\n\n\n\n\n\n\n\n\n\nfit_g_k5 &lt;- glmQLFit(disp_g_k5)\nplotQLDisp(fit_g_k5)\n\n\n\n\n\n\n\n\n\nres_g_k5 &lt;- colnames(design_g_k5) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_g_k5, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_g_k5$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_g_k5$groupHom)\n\n\n\n\n\n\n\nrRNA + genotype\n\ndesign_gr_k5 &lt;- model.matrix(~rRNA + group, data = dgeFilt_k5$samples)\n\n\ndisp_gr_k5 &lt;- estimateDisp(dgeFilt_k5, design_gr_k5)\nplotBCV(disp_gr_k5)\n\n\n\n\n\n\n\n\n\nfit_gr_k5 &lt;- glmQLFit(disp_gr_k5)\nplotQLDisp(fit_gr_k5)\n\n\n\n\n\n\n\n\n\nres_gr_k5 &lt;- colnames(design_gr_k5) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_gr_k5, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_gr_k5$rRNA)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k5$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k5$groupHom)",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-6-1",
    "href": "kappa.html#k-6-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 6",
    "text": "k = 6\n\nkappa_cqn_k6 &lt;- rep(0, length(rownames(dgeFilt))) %&gt;%\n    set_names(rownames(dgeFilt))\nkappa_cqn_k6[names(kappa_k6)] &lt;- kappa_k6\ncqn_k6 &lt;- cqn(\n    dgeFilt$counts,\n    x = kappa_cqn_k6,\n    lengths = mcols(dgeFilt$genes)$maxLen,\n    sizeFactors = dgeFilt$samples$lib.size\n)\ncqnplot(cqn_k6)\n\n\n\n\n\n\n\n\n\ndgeFilt_k6 &lt;- dgeFilt\n\n\ndgeFilt_k6$offset &lt;- cqn_k6$glm.offset\n\n\nrRNA\n\ndesign_r_k6 &lt;- model.matrix(~rRNA, data = dgeFilt_k6$samples)\n\n\ndisp_r_k6 &lt;- estimateDisp(dgeFilt_k6, design_r_k6)\nplotBCV(disp_r_k6)\n\n\n\n\n\n\n\n\n\nfit_r_k6 &lt;- glmQLFit(disp_r_k6)\nplotQLDisp(fit_r_k6)\n\n\n\n\n\n\n\n\n\nres_r_k6 &lt;- colnames(design_r_k6) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_r_k6, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_r_k6$rRNA)\n\n\n\n\n\n\n\nGenotype\n\ndesign_g_k6 &lt;- model.matrix(~group, data = dgeFilt_k6$samples)\n\n\ndisp_g_k6 &lt;- estimateDisp(dgeFilt_k6, design_g_k6)\nplotBCV(disp_g_k6)\n\n\n\n\n\n\n\n\n\nfit_g_k6 &lt;- glmQLFit(disp_g_k6)\nplotQLDisp(fit_g_k6)\n\n\n\n\n\n\n\n\n\nres_g_k6 &lt;- colnames(design_g_k6) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_g_k6, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_g_k6$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_g_k6$groupHom)\n\n\n\n\n\n\n\nrRNA + genotype\n\ndesign_gr_k6 &lt;- model.matrix(~rRNA + group, data = dgeFilt_k6$samples)\n\n\ndisp_gr_k6 &lt;- estimateDisp(dgeFilt_k6, design_gr_k6)\nplotBCV(disp_gr_k6)\n\n\n\n\n\n\n\n\n\nfit_gr_k6 &lt;- glmQLFit(disp_gr_k6)\nplotQLDisp(fit_gr_k6)\n\n\n\n\n\n\n\n\n\nres_gr_k6 &lt;- colnames(design_gr_k6) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_gr_k6, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_gr_k6$rRNA)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k6$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k6$groupHom)",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-7-1",
    "href": "kappa.html#k-7-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 7",
    "text": "k = 7\n\nkappa_cqn_k7 &lt;- rep(0, length(rownames(dgeFilt))) %&gt;%\n    set_names(rownames(dgeFilt))\nkappa_cqn_k7[names(kappa_k7)] &lt;- kappa_k7\ncqn_k7 &lt;- cqn(\n    dgeFilt$counts,\n    x = kappa_cqn_k7,\n    lengths = mcols(dgeFilt$genes)$maxLen,\n    sizeFactors = dgeFilt$samples$lib.size\n)\ncqnplot(cqn_k7)\n\n\n\n\n\n\n\n\n\ndgeFilt_k7 &lt;- dgeFilt\n\n\ndgeFilt_k7$offset &lt;- cqn_k7$glm.offset\n\n\nrRNA\n\ndesign_r_k7 &lt;- model.matrix(~rRNA, data = dgeFilt_k7$samples)\n\n\ndisp_r_k7 &lt;- estimateDisp(dgeFilt_k7, design_r_k7)\nplotBCV(disp_r_k7)\n\n\n\n\n\n\n\n\n\nfit_r_k7 &lt;- glmQLFit(disp_r_k7)\nplotQLDisp(fit_r_k7)\n\n\n\n\n\n\n\n\n\nres_r_k7 &lt;- colnames(design_r_k7) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_r_k7, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_r_k7$rRNA)\n\n\n\n\n\n\n\nGenotype\n\ndesign_g_k7 &lt;- model.matrix(~group, data = dgeFilt_k7$samples)\n\n\ndisp_g_k7 &lt;- estimateDisp(dgeFilt_k7, design_g_k7)\nplotBCV(disp_g_k7)\n\n\n\n\n\n\n\n\n\nfit_g_k7 &lt;- glmQLFit(disp_g_k7)\nplotQLDisp(fit_g_k7)\n\n\n\n\n\n\n\n\n\nres_g_k7 &lt;- colnames(design_g_k7) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_g_k7, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_g_k7$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_g_k7$groupHom)\n\n\n\n\n\n\n\nrRNA + genotype\n\ndesign_gr_k7 &lt;- model.matrix(~rRNA + group, data = dgeFilt_k7$samples)\n\n\ndisp_gr_k7 &lt;- estimateDisp(dgeFilt_k7, design_gr_k7)\nplotBCV(disp_gr_k7)\n\n\n\n\n\n\n\n\n\nfit_gr_k7 &lt;- glmQLFit(disp_gr_k7)\nplotQLDisp(fit_gr_k7)\n\n\n\n\n\n\n\n\n\nres_gr_k7 &lt;- colnames(design_gr_k7) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_gr_k7, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_gr_k7$rRNA)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k7$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k7$groupHom)",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-8-1",
    "href": "kappa.html#k-8-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 8",
    "text": "k = 8\n\nkappa_cqn_k8 &lt;- rep(0, length(rownames(dgeFilt))) %&gt;%\n    set_names(rownames(dgeFilt))\nkappa_cqn_k8[names(kappa_k8)] &lt;- kappa_k8\ncqn_k8 &lt;- cqn(\n    dgeFilt$counts,\n    x = kappa_cqn_k8,\n    lengths = mcols(dgeFilt$genes)$maxLen,\n    sizeFactors = dgeFilt$samples$lib.size\n)\ncqnplot(cqn_k8)\n\n\n\n\n\n\n\n\n\ndgeFilt_k8 &lt;- dgeFilt\n\n\ndgeFilt_k8$offset &lt;- cqn_k8$glm.offset\n\n\nrRNA\n\ndesign_r_k8 &lt;- model.matrix(~rRNA, data = dgeFilt_k8$samples)\n\n\ndisp_r_k8 &lt;- estimateDisp(dgeFilt_k8, design_r_k8)\nplotBCV(disp_r_k8)\n\n\n\n\n\n\n\n\n\nfit_r_k8 &lt;- glmQLFit(disp_r_k8)\nplotQLDisp(fit_r_k8)\n\n\n\n\n\n\n\n\n\nres_r_k8 &lt;- colnames(design_r_k8) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_r_k8, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_r_k8$rRNA)\n\n\n\n\n\n\n\nGenotype\n\ndesign_g_k8 &lt;- model.matrix(~group, data = dgeFilt_k8$samples)\n\n\ndisp_g_k8 &lt;- estimateDisp(dgeFilt_k8, design_g_k8)\nplotBCV(disp_g_k8)\n\n\n\n\n\n\n\n\n\nfit_g_k8 &lt;- glmQLFit(disp_g_k8)\nplotQLDisp(fit_g_k8)\n\n\n\n\n\n\n\n\n\nres_g_k8 &lt;- colnames(design_g_k8) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_g_k8, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_g_k8$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_g_k8$groupHom)\n\n\n\n\n\n\n\nrRNA + genotype\n\ndesign_gr_k8 &lt;- model.matrix(~rRNA + group, data = dgeFilt_k8$samples)\n\n\ndisp_gr_k8 &lt;- estimateDisp(dgeFilt_k8, design_gr_k8)\nplotBCV(disp_gr_k8)\n\n\n\n\n\n\n\n\n\nfit_gr_k8 &lt;- glmQLFit(disp_gr_k8)\nplotQLDisp(fit_gr_k8)\n\n\n\n\n\n\n\n\n\nres_gr_k8 &lt;- colnames(design_gr_k8) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_gr_k8, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_gr_k8$rRNA)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k8$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k8$groupHom)",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-9-1",
    "href": "kappa.html#k-9-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 9",
    "text": "k = 9\n\nkappa_cqn_k9 &lt;- rep(0, length(rownames(dgeFilt))) %&gt;%\n    set_names(rownames(dgeFilt))\nkappa_cqn_k9[names(kappa_k9)] &lt;- kappa_k9\ncqn_k9 &lt;- cqn(\n    dgeFilt$counts,\n    x = kappa_cqn_k9,\n    lengths = mcols(dgeFilt$genes)$maxLen,\n    sizeFactors = dgeFilt$samples$lib.size\n)\ncqnplot(cqn_k9)\n\n\n\n\n\n\n\n\n\ndgeFilt_k9 &lt;- dgeFilt\n\n\ndgeFilt_k9$offset &lt;- cqn_k9$glm.offset\n\n\nrRNA\n\ndesign_r_k9 &lt;- model.matrix(~rRNA, data = dgeFilt_k9$samples)\n\n\ndisp_r_k9 &lt;- estimateDisp(dgeFilt_k9, design_r_k9)\nplotBCV(disp_r_k9)\n\n\n\n\n\n\n\n\n\nfit_r_k9 &lt;- glmQLFit(disp_r_k9)\nplotQLDisp(fit_r_k9)\n\n\n\n\n\n\n\n\n\nres_r_k9 &lt;- colnames(design_r_k9) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_r_k9, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_r_k9$rRNA)\n\n\n\n\n\n\n\nGenotype\n\ndesign_g_k9 &lt;- model.matrix(~group, data = dgeFilt_k9$samples)\n\n\ndisp_g_k9 &lt;- estimateDisp(dgeFilt_k9, design_g_k9)\nplotBCV(disp_g_k9)\n\n\n\n\n\n\n\n\n\nfit_g_k9 &lt;- glmQLFit(disp_g_k9)\nplotQLDisp(fit_g_k9)\n\n\n\n\n\n\n\n\n\nres_g_k9 &lt;- colnames(design_g_k9) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_g_k9, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_g_k9$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_g_k9$groupHom)\n\n\n\n\n\n\n\nrRNA + genotype\n\ndesign_gr_k9 &lt;- model.matrix(~rRNA + group, data = dgeFilt_k9$samples)\n\n\ndisp_gr_k9 &lt;- estimateDisp(dgeFilt_k9, design_gr_k9)\nplotBCV(disp_gr_k9)\n\n\n\n\n\n\n\n\n\nfit_gr_k9 &lt;- glmQLFit(disp_gr_k9)\nplotQLDisp(fit_gr_k9)\n\n\n\n\n\n\n\n\n\nres_gr_k9 &lt;- colnames(design_gr_k9) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_gr_k9, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_gr_k9$rRNA)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k9$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k9$groupHom)",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-10-1",
    "href": "kappa.html#k-10-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 10",
    "text": "k = 10\n\nkappa_cqn_k10 &lt;- rep(0, length(rownames(dgeFilt))) %&gt;%\n    set_names(rownames(dgeFilt))\nkappa_cqn_k10[names(kappa_k10)] &lt;- kappa_k10\ncqn_k10 &lt;- cqn(\n    dgeFilt$counts,\n    x = kappa_cqn_k10,\n    lengths = mcols(dgeFilt$genes)$maxLen,\n    sizeFactors = dgeFilt$samples$lib.size\n)\ncqnplot(cqn_k10)\n\n\n\n\n\n\n\n\n\ndgeFilt_k10 &lt;- dgeFilt\n\n\ndgeFilt_k10$offset &lt;- cqn_k10$glm.offset\n\n\nrRNA\n\ndesign_r_k10 &lt;- model.matrix(~rRNA, data = dgeFilt_k10$samples)\n\n\ndisp_r_k10 &lt;- estimateDisp(dgeFilt_k10, design_r_k10)\nplotBCV(disp_r_k10)\n\n\n\n\n\n\n\n\n\nfit_r_k10 &lt;- glmQLFit(disp_r_k10)\nplotQLDisp(fit_r_k10)\n\n\n\n\n\n\n\n\n\nres_r_k10 &lt;- colnames(design_r_k10) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_r_k10, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_r_k10$rRNA)\n\n\n\n\n\n\n\nGenotype\n\ndesign_g_k10 &lt;- model.matrix(~group, data = dgeFilt_k10$samples)\n\n\ndisp_g_k10 &lt;- estimateDisp(dgeFilt_k10, design_g_k10)\nplotBCV(disp_g_k10)\n\n\n\n\n\n\n\n\n\nfit_g_k10 &lt;- glmQLFit(disp_g_k10)\nplotQLDisp(fit_g_k10)\n\n\n\n\n\n\n\n\n\nres_g_k10 &lt;- colnames(design_g_k10) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_g_k10, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_g_k10$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_g_k10$groupHom)\n\n\n\n\n\n\n\nrRNA + genotype\n\ndesign_gr_k10 &lt;- model.matrix(~rRNA + group, data = dgeFilt_k10$samples)\n\n\ndisp_gr_k10 &lt;- estimateDisp(dgeFilt_k10, design_gr_k10)\nplotBCV(disp_gr_k10)\n\n\n\n\n\n\n\n\n\nfit_gr_k10 &lt;- glmQLFit(disp_gr_k10)\nplotQLDisp(fit_gr_k10)\n\n\n\n\n\n\n\n\n\nres_gr_k10 &lt;- colnames(design_gr_k10) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_gr_k10, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_gr_k10$rRNA)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k10$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k10$groupHom)",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-11-1",
    "href": "kappa.html#k-11-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 11",
    "text": "k = 11\n\nkappa_cqn_k11 &lt;- rep(0, length(rownames(dgeFilt))) %&gt;%\n    set_names(rownames(dgeFilt))\nkappa_cqn_k11[names(kappa_k11)] &lt;- kappa_k11\ncqn_k11 &lt;- cqn(\n    dgeFilt$counts,\n    x = kappa_cqn_k11,\n    lengths = mcols(dgeFilt$genes)$maxLen,\n    sizeFactors = dgeFilt$samples$lib.size\n)\ncqnplot(cqn_k11)\n\n\n\n\n\n\n\n\n\ndgeFilt_k11 &lt;- dgeFilt\n\n\ndgeFilt_k11$offset &lt;- cqn_k11$glm.offset\n\n\nrRNA\n\ndesign_r_k11 &lt;- model.matrix(~rRNA, data = dgeFilt_k11$samples)\n\n\ndisp_r_k11 &lt;- estimateDisp(dgeFilt_k11, design_r_k11)\nplotBCV(disp_r_k11)\n\n\n\n\n\n\n\n\n\nfit_r_k11 &lt;- glmQLFit(disp_r_k11)\nplotQLDisp(fit_r_k11)\n\n\n\n\n\n\n\n\n\nres_r_k11 &lt;- colnames(design_r_k11) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_r_k11, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_r_k11$rRNA)\n\n\n\n\n\n\n\nGenotype\n\ndesign_g_k11 &lt;- model.matrix(~group, data = dgeFilt_k11$samples)\n\n\ndisp_g_k11 &lt;- estimateDisp(dgeFilt_k11, design_g_k11)\nplotBCV(disp_g_k11)\n\n\n\n\n\n\n\n\n\nfit_g_k11 &lt;- glmQLFit(disp_g_k11)\nplotQLDisp(fit_g_k11)\n\n\n\n\n\n\n\n\n\nres_g_k11 &lt;- colnames(design_g_k11) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_g_k11, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_g_k11$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_g_k11$groupHom)\n\n\n\n\n\n\n\nrRNA + genotype\n\ndesign_gr_k11 &lt;- model.matrix(~rRNA + group, data = dgeFilt_k11$samples)\n\n\ndisp_gr_k11 &lt;- estimateDisp(dgeFilt_k11, design_gr_k11)\nplotBCV(disp_gr_k11)\n\n\n\n\n\n\n\n\n\nfit_gr_k11 &lt;- glmQLFit(disp_gr_k11)\nplotQLDisp(fit_gr_k11)\n\n\n\n\n\n\n\n\n\nres_gr_k11 &lt;- colnames(design_gr_k11) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_gr_k11, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_gr_k11$rRNA)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k11$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k11$groupHom)",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "kappa.html#k-12-1",
    "href": "kappa.html#k-12-1",
    "title": "rRNADepletion_s4ter",
    "section": "k = 12",
    "text": "k = 12\n\nkappa_cqn_k12 &lt;- rep(0, length(rownames(dgeFilt))) %&gt;%\n    set_names(rownames(dgeFilt))\nkappa_cqn_k12[names(kappa_k12)] &lt;- kappa_k12\ncqn_k12 &lt;- cqn(\n    dgeFilt$counts,\n    x = kappa_cqn_k12,\n    lengths = mcols(dgeFilt$genes)$maxLen,\n    sizeFactors = dgeFilt$samples$lib.size\n)\ncqnplot(cqn_k12)\n\n\n\n\n\n\n\n\n\ndgeFilt_k12 &lt;- dgeFilt\n\n\ndgeFilt_k12$offset &lt;- cqn_k12$glm.offset\n\n\nrRNA\n\ndesign_r_k12 &lt;- model.matrix(~rRNA, data = dgeFilt_k12$samples)\n\n\ndisp_r_k12 &lt;- estimateDisp(dgeFilt_k12, design_r_k12)\nplotBCV(disp_r_k12)\n\n\n\n\n\n\n\n\n\nfit_r_k12 &lt;- glmQLFit(disp_r_k12)\nplotQLDisp(fit_r_k12)\n\n\n\n\n\n\n\n\n\nres_r_k12 &lt;- colnames(design_r_k12) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_r_k12, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_r_k12$rRNA)\n\n\n\n\n\n\n\nGenotype\n\ndesign_g_k12 &lt;- model.matrix(~group, data = dgeFilt_k12$samples)\n\n\ndisp_g_k12 &lt;- estimateDisp(dgeFilt_k12, design_g_k12)\nplotBCV(disp_g_k12)\n\n\n\n\n\n\n\n\n\nfit_g_k12 &lt;- glmQLFit(disp_g_k12)\nplotQLDisp(fit_g_k12)\n\n\n\n\n\n\n\n\n\nres_g_k12 &lt;- colnames(design_g_k12) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_g_k12, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_g_k12$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_g_k12$groupHom)\n\n\n\n\n\n\n\nrRNA + genotype\n\ndesign_gr_k12 &lt;- model.matrix(~rRNA + group, data = dgeFilt_k12$samples)\n\n\ndisp_gr_k12 &lt;- estimateDisp(dgeFilt_k12, design_gr_k12)\nplotBCV(disp_gr_k12)\n\n\n\n\n\n\n\n\n\nfit_gr_k12 &lt;- glmQLFit(disp_gr_k12)\nplotQLDisp(fit_gr_k12)\n\n\n\n\n\n\n\n\n\nres_gr_k12 &lt;- colnames(design_gr_k12) %&gt;%\n    str_subset(\"Intercept\", negate = TRUE) %&gt;%\n    sapply(function(x){\n        glmQLFTest(fit_gr_k12, coef = x) %&gt;%\n            topTags(n = Inf) %&gt;%\n            .[[\"table\"]] %&gt;%\n            rename_all(\n                str_remove, pattern = \"ID.\"\n            ) %&gt;%\n            dplyr::select(\n                Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                P.Value = PValue, FDR\n            ) %&gt;%\n            as_tibble() %&gt;%\n            mutate(\n                Bonf = p.adjust(P.Value, \"bonf\"), \n                coef = x,\n                DE = FDR &lt; 0.05\n            )\n    },\n    simplify = FALSE)\n\n\ndisplayRes_de(res_gr_k12$rRNA)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k12$groupHeter)\n\n\n\n\n\n\ndisplayRes_de(res_gr_k12$groupHom)",
    "crumbs": [
      "kappa"
    ]
  },
  {
    "objectID": "enrichment.html",
    "href": "enrichment.html",
    "title": "rRNADepletion_s4ter",
    "section": "",
    "text": "library(tidyverse)\nlibrary(magrittr)\nlibrary(parallel)\nlibrary(ngsReports)\nlibrary(here)\nlibrary(scales)\nlibrary(ggpubr)\nlibrary(kableExtra)\nlibrary(AnnotationHub)\nlibrary(ensembldb)\nlibrary(edgeR)\nlibrary(corrplot)\nlibrary(DT)\nlibrary(ggrepel)\nlibrary(msigdbr)\nlibrary(fgsea)\n\n\nif (interactive()) setwd(here::here())\ntheme_set(theme_bw())\ncores &lt;- detectCores() - 2",
    "crumbs": [
      "enrichment"
    ]
  },
  {
    "objectID": "enrichment.html#databases",
    "href": "enrichment.html#databases",
    "title": "rRNADepletion_s4ter",
    "section": "Databases",
    "text": "Databases\n\nhm &lt;- msigdbr(\"Danio rerio\", category = \"H\")  %&gt;% \n  left_join(entrezGenes) %&gt;%\n  dplyr::filter(!is.na(gene_id)) %&gt;%\n  distinct(gs_name, gene_id, .keep_all = TRUE)\nhmByGene &lt;- hm %&gt;%\n  split(f = .$gene_id) %&gt;%\n  lapply(extract2, \"gs_name\")\nhmByID &lt;- hm %&gt;%\n  split(f = .$gs_name) %&gt;%\n  lapply(extract2, \"gene_id\")\n\n\nkg &lt;- msigdbr(\"Danio rerio\", category = \"C2\", subcollection = \"CP:KEGG_LEGACY\")  %&gt;% \n  left_join(entrezGenes) %&gt;%\n  dplyr::filter(!is.na(gene_id)) %&gt;%\n  distinct(gs_name, gene_id, .keep_all = TRUE)\nkgByGene &lt;- kg  %&gt;%\n  split(f = .$gene_id) %&gt;%\n  lapply(extract2, \"gs_name\")\nkgByID &lt;- kg  %&gt;%\n  split(f = .$gs_name) %&gt;%\n  lapply(extract2, \"gene_id\")\n\n\nwk &lt;- msigdbr(\"Danio rerio\", category = \"C2\", subcollection = \"CP:WIKIPATHWAYS\")  %&gt;% \n  left_join(entrezGenes) %&gt;%\n  dplyr::filter(!is.na(gene_id)) %&gt;%\n  distinct(gs_name, gene_id, .keep_all = TRUE)\nwkByGene &lt;- wk  %&gt;%\n  split(f = .$gene_id) %&gt;%\n  lapply(extract2, \"gs_name\")\nwkByID &lt;- wk  %&gt;%\n  split(f = .$gs_name) %&gt;%\n  lapply(extract2, \"gene_id\")\n\n\ngsSizes &lt;- bind_rows(hm, kg, wk) %&gt;% \n  dplyr::select(gs_name, gene_symbol, gene_id) %&gt;% \n  chop(c(gene_symbol, gene_id)) %&gt;%\n  mutate(\n    gs_size = vapply(gene_symbol, length, integer(1))\n  )",
    "crumbs": [
      "enrichment"
    ]
  },
  {
    "objectID": "enrichment.html#hallmark",
    "href": "enrichment.html#hallmark",
    "title": "rRNADepletion_s4ter",
    "section": "Hallmark",
    "text": "Hallmark\n\nrRNA\n\nfgsea_r_hm &lt;-fgsea(hmByID, ranks_r, eps = 0) %&gt;%\n  as_tibble() %&gt;%\n  dplyr::rename(FDR = padj) %&gt;%\n  mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n  dplyr::arrange(pval)\n\n\ndisplayRes_enrich(fgsea_r_hm, \"rRNA\")\n\n\n\n\n\n\n\nGenotype\n\nfgsea_g_hm &lt;- ranks_g %&gt;%\n  lapply(function(x){\n    fgsea(hmByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_g_hm$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_g_hm$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nrRNA + genotype\n\nfgsea_gr_hm &lt;- ranks_gr %&gt;%\n  lapply(function(x){\n    fgsea(hmByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_gr_hm$rRNA, \"rRNA\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_gr_hm$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_gr_hm$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nrRNA + genotype (deconvoluted)\n\nfgsea_deconv_hm &lt;- ranks_deconv %&gt;%\n  lapply(function(x){\n    fgsea(hmByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_deconv_hm$rRNA, \"rRNA\")\n\n\n\n\ndisplayRes_enrich(fgsea_deconv_hm$groupHeter, \"groupHeter\")\n\n\n\n\ndisplayRes_enrich(fgsea_deconv_hm$groupHom, \"groupHom\")",
    "crumbs": [
      "enrichment"
    ]
  },
  {
    "objectID": "enrichment.html#kegg",
    "href": "enrichment.html#kegg",
    "title": "rRNADepletion_s4ter",
    "section": "KEGG",
    "text": "KEGG\n\nrRNA\n\nfgsea_r_kg &lt;-fgsea(kgByID, ranks_r, eps = 0) %&gt;%\n  as_tibble() %&gt;%\n  dplyr::rename(FDR = padj) %&gt;%\n  mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n  dplyr::arrange(pval)\n\n\ndisplayRes_enrich(fgsea_r_kg, \"rRNA\")\n\n\n\n\n\n\n\nGenotype\n\nfgsea_g_kg &lt;- ranks_g %&gt;%\n  lapply(function(x){\n    fgsea(kgByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_g_kg$groupHeter, \"groupHeter\")\n\n\n\n\ndisplayRes_enrich(fgsea_g_kg$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nrRNA + genotype\n\nfgsea_gr_kg &lt;- ranks_gr %&gt;%\n  lapply(function(x){\n    fgsea(kgByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_gr_kg$rRNA, \"rRNA\")\n\n\n\n\ndisplayRes_enrich(fgsea_gr_kg$groupHeter, \"groupHeter\")\n\n\n\n\ndisplayRes_enrich(fgsea_gr_kg$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nrRNA + genotype (deconvoluted)\n\nfgsea_deconv_kg &lt;- ranks_deconv %&gt;%\n  lapply(function(x){\n    fgsea(kgByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_deconv_kg$rRNA, \"rRNA\")\n\n\n\n\ndisplayRes_enrich(fgsea_deconv_kg$groupHeter, \"groupHeter\")\n\n\n\n\ndisplayRes_enrich(fgsea_deconv_kg$groupHom, \"groupHom\")",
    "crumbs": [
      "enrichment"
    ]
  },
  {
    "objectID": "enrichment.html#wikipathways",
    "href": "enrichment.html#wikipathways",
    "title": "rRNADepletion_s4ter",
    "section": "Wikipathways",
    "text": "Wikipathways\n\nrRNA\n\nfgsea_r_wk &lt;-fgsea(wkByID, ranks_r, eps = 0) %&gt;%\n  as_tibble() %&gt;%\n  dplyr::rename(FDR = padj) %&gt;%\n  mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n  dplyr::arrange(pval)\n\n\ndisplayRes_enrich(fgsea_r_wk, \"rRNA\")\n\n\n\n\n\n\n\nGenotype\n\nfgsea_g_wk &lt;- ranks_g %&gt;%\n  lapply(function(x){\n    fgsea(wkByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_g_wk$groupHeter, \"groupHeter\")\n\n\n\n\ndisplayRes_enrich(fgsea_g_wk$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nrRNA + genotype\n\nfgsea_gr_wk &lt;- ranks_gr %&gt;%\n  lapply(function(x){\n    fgsea(wkByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_gr_wk$rRNA, \"rRNA\")\n\n\n\n\ndisplayRes_enrich(fgsea_gr_wk$groupHeter, \"groupHeter\")\n\n\n\n\ndisplayRes_enrich(fgsea_gr_wk$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nrRNA + genotype (deconvoluted)\n\nfgsea_deconv_wk &lt;- ranks_deconv %&gt;%\n  lapply(function(x){\n    fgsea(wkByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_deconv_wk$rRNA, \"rRNA\")\n\n\n\n\ndisplayRes_enrich(fgsea_deconv_wk$groupHeter, \"groupHeter\")\n\n\n\n\ndisplayRes_enrich(fgsea_deconv_wk$groupHom, \"groupHom\")",
    "crumbs": [
      "enrichment"
    ]
  },
  {
    "objectID": "enrichment.html#hallmark-1",
    "href": "enrichment.html#hallmark-1",
    "title": "rRNADepletion_s4ter",
    "section": "Hallmark",
    "text": "Hallmark\n\n\nk = 5\n\nfgsea_hm_k5 &lt;- ranks_k5 %&gt;%\n  lapply(function(x){\n    fgsea(hmByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_hm_k5$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_hm_k5$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nk = 6\n\nfgsea_hm_k6 &lt;- ranks_k6 %&gt;%\n  lapply(function(x){\n    fgsea(hmByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_hm_k6$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_hm_k6$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nk = 7\n\nfgsea_hm_k7 &lt;- ranks_k7 %&gt;%\n  lapply(function(x){\n    fgsea(hmByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_hm_k7$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_hm_k7$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nk = 8\n\nfgsea_hm_k8 &lt;- ranks_k8 %&gt;%\n  lapply(function(x){\n    fgsea(hmByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_hm_k8$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_hm_k8$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nk = 9\n\nfgsea_hm_k9 &lt;- ranks_k9 %&gt;%\n  lapply(function(x){\n    fgsea(hmByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_hm_k9$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_hm_k9$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nk = 10\n\nfgsea_hm_k10 &lt;- ranks_k10 %&gt;%\n  lapply(function(x){\n    fgsea(hmByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_hm_k10$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_hm_k10$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nk = 11\n\nfgsea_hm_k11 &lt;- ranks_k11 %&gt;%\n  lapply(function(x){\n    fgsea(hmByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_hm_k11$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_hm_k11$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nk = 12\n\nfgsea_hm_k12 &lt;- ranks_k12 %&gt;%\n  lapply(function(x){\n    fgsea(hmByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_hm_k12$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_hm_k12$groupHom, \"groupHom\")",
    "crumbs": [
      "enrichment"
    ]
  },
  {
    "objectID": "enrichment.html#kegg-1",
    "href": "enrichment.html#kegg-1",
    "title": "rRNADepletion_s4ter",
    "section": "KEGG",
    "text": "KEGG\n\n\nk = 5\n\nfgsea_kg_k5 &lt;- ranks_k5 %&gt;%\n  lapply(function(x){\n    fgsea(kgByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_kg_k5$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_kg_k5$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nk = 6\n\nfgsea_kg_k6 &lt;- ranks_k6 %&gt;%\n  lapply(function(x){\n    fgsea(kgByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_kg_k6$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_kg_k6$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nk = 7\n\nfgsea_kg_k7 &lt;- ranks_k7 %&gt;%\n  lapply(function(x){\n    fgsea(kgByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_kg_k7$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_kg_k7$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nk = 8\n\nfgsea_kg_k8 &lt;- ranks_k8 %&gt;%\n  lapply(function(x){\n    fgsea(kgByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_kg_k8$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_kg_k8$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nk = 9\n\nfgsea_kg_k9 &lt;- ranks_k9 %&gt;%\n  lapply(function(x){\n    fgsea(kgByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_kg_k9$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_kg_k9$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nk = 10\n\nfgsea_kg_k10 &lt;- ranks_k10 %&gt;%\n  lapply(function(x){\n    fgsea(kgByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_kg_k10$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_kg_k10$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nk = 11\n\nfgsea_kg_k11 &lt;- ranks_k11 %&gt;%\n  lapply(function(x){\n    fgsea(kgByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_kg_k11$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_kg_k11$groupHom, \"groupHom\")\n\n\n\n\n\n\n\nk = 12\n\nfgsea_kg_k12 &lt;- ranks_k12 %&gt;%\n  lapply(function(x){\n    fgsea(kgByID, x, eps = 0) %&gt;%\n      as_tibble() %&gt;%\n      dplyr::rename(FDR = padj) %&gt;%\n      mutate(padj = p.adjust(pval, \"bonferroni\")) %&gt;%\n      dplyr::arrange(pval)\n  })\n\n\ndisplayRes_enrich(fgsea_kg_k12$groupHeter, \"groupHeter\")\n\n\n\n\n\n\ndisplayRes_enrich(fgsea_kg_k12$groupHom, \"groupHom\")",
    "crumbs": [
      "enrichment"
    ]
  },
  {
    "objectID": "ruv.html",
    "href": "ruv.html",
    "title": "rRNADepletion_s4ter",
    "section": "",
    "text": "library(tidyverse)\nlibrary(magrittr)\nlibrary(parallel)\nlibrary(here)\nlibrary(scales)\nlibrary(AnnotationHub)\nlibrary(Biostrings)\nlibrary(Rsamtools)\nlibrary(cqn)\nlibrary(DT)\nlibrary(edgeR)\nlibrary(pander)\nlibrary(RUVSeq)\n\n\nif (interactive()) setwd(here::here())\ntheme_set(theme_bw())\n\n\ndisplayRes_de &lt;- function(x){\n    de &lt;- x %&gt;%\n        dplyr::filter(DE)\n    de %&gt;%\n        dplyr::slice(1:1000) %&gt;%\n        dplyr::select(-gene_biotype, -coef, -DE) %&gt;%\n        mutate(across(c(\"P.Value\", \"FDR\", \"Bonf\"), ~ sprintf(\"%.2e\", .x))) %&gt;%\n        datatable(\n            options = list(pageLength = 10), \n            class = \"striped hover condensed responsive\", \n            filter = \"top\",\n            caption = paste0(\n                x$coef[1],\n                \": \",\n                nrow(de),\n                \" of \",\n                nrow(x),\n                \" genes were classified as differentially expressed \",\n                \"with a FDR &lt; 0.05. \",\n                \"If more than 1000 genes were classified as DE, only the top 1000 are shown.\"\n            )\n        ) %&gt;%\n        formatRound(c(\"logFC\", \"logCPM\", \"F\"), digits = 2)\n}",
    "crumbs": [
      "RUV"
    ]
  },
  {
    "objectID": "ruv.html#control-genes",
    "href": "ruv.html#control-genes",
    "title": "rRNADepletion_s4ter",
    "section": "Control genes",
    "text": "Control genes\nObtain a set of in silico empirical negative controls from a first pass DE analysis. Define these as genes with a raw p-values &gt; 0.1 in both comparisons (Het vs WT, Hom vs WT).\n\nctrl_genes &lt;- bind_rows(tt_g) %&gt;%\n    dplyr::filter(P.Value &gt; 0.1) %&gt;%\n    group_by(Geneid) %&gt;%\n    tally() %&gt;%\n    dplyr::filter(n == 2) %&gt;%\n    pull(Geneid)\n\nTry \\(k = 1\\)\n\nruvg &lt;- lapply(1:3, \\(x){\n    RUVg(dgeFilt$counts, ctrl_genes, k = x)\n}) %&gt;%\n    set_names(c(\"k1\", \"k2\", \"k3\"))\n\n\npca_ruvg &lt;- lapply(ruvg, \\(x){\n    x$normalizedCounts %&gt;%\n        cpm(log = TRUE) %&gt;%\n        t() %&gt;%\n        prcomp()\n})\n\n\npca_ruvg$k1$x %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"sample\") %&gt;%\n    left_join(dgeFilt$samples) %&gt;%\n    as_tibble() %&gt;%\n    ggplot(aes(PC1, PC2)) +\n    geom_point(aes(colour = group), size = 2) +\n    labs(\n        x = paste0(\"PC1 (\", percent(summary(pca_ruvg$k1)$importance[\"Proportion of Variance\",\"PC1\"]),\")\"),\n        y = paste0(\"PC2 (\", percent(summary(pca_ruvg$k1)$importance[\"Proportion of Variance\",\"PC2\"]),\")\"),\n        colour = \"Genotype\"\n    )",
    "crumbs": [
      "RUV"
    ]
  },
  {
    "objectID": "ruv.html#differential-expression",
    "href": "ruv.html#differential-expression",
    "title": "rRNADepletion_s4ter",
    "section": "Differential expression",
    "text": "Differential expression\n\ndge_ruvg &lt;- lapply(ruvg, \\(x){\n    dge &lt;- dgeFilt\n    dge$samples &lt;- cbind(dge$samples, x$W)\n    dge\n})\ndesign_ruvg &lt;- map2(dge_ruvg, ruvg, \\(x, y){\n    paste(\n        \"~ group\",\n        paste(colnames(y$W), collapse = \" + \"),\n        sep = \" + \"\n    ) %&gt;%\n        as.formula() %&gt;%\n        model.matrix(data = x$samples) %&gt;%\n        set_colnames(str_remove(colnames(.), \"group\"))\n})\n\n\ndisp_ruvg &lt;- map2(dge_ruvg, design_ruvg, \\(x, y){\n    estimateDisp(x, y)\n})\nplotBCV(disp_ruvg$k1)\n\n\n\n\n\n\n\n\n\nfit_ruvg &lt;- lapply(disp_ruvg, \\(x){\n    glmQLFit(x)\n})\nplotQLDisp(fit_ruvg$k1)\n\n\n\n\n\n\n\n\n\ntt_ruvg &lt;- map2(design_ruvg, fit_ruvg, \\(x, y){\n    colnames(x) %&gt;%\n        str_subset(\"Intercept\", negate = TRUE) %&gt;%\n        sapply(function(z){\n            glmQLFTest(y, coef = z) %&gt;%\n                topTags(n = Inf) %&gt;%\n                .[[\"table\"]] %&gt;%\n                rename_all(\n                    str_remove, pattern = \"ID.\"\n                ) %&gt;%\n                dplyr::select(\n                    Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                    P.Value = PValue, FDR\n                ) %&gt;%\n                as_tibble() %&gt;%\n                mutate(\n                    Bonf = p.adjust(P.Value, \"bonf\"), \n                    coef = z,\n                    DE = FDR &lt; 0.05\n                )\n        },\n        simplify = FALSE)\n})\n\n\ndisplayRes_de(tt_ruvg$k1$Heter)\n\n\n\n\ndisplayRes_de(tt_ruvg$k1$Hom)\n\n\n\n\ndisplayRes_de(tt_ruvg$k2$Heter)\n\n\n\n\ndisplayRes_de(tt_ruvg$k2$Hom)\n\n\n\n\ndisplayRes_de(tt_ruvg$k3$Heter)\n\n\n\n\ndisplayRes_de(tt_ruvg$k3$Hom)",
    "crumbs": [
      "RUV"
    ]
  },
  {
    "objectID": "ruv.html#differential-expression-1",
    "href": "ruv.html#differential-expression-1",
    "title": "rRNADepletion_s4ter",
    "section": "Differential expression",
    "text": "Differential expression\n\ndge_ruvr &lt;- lapply(ruvr, \\(x){\n    dge &lt;- dgeFilt\n    dge$samples &lt;- cbind(dge$samples, x$W)\n    dge\n})\ndesign_ruvr &lt;- map2(dge_ruvr, ruvr, \\(x, y){\n    paste(\n        \"~ group\",\n        paste(colnames(y$W), collapse = \" + \"),\n        sep = \" + \"\n    ) %&gt;%\n        as.formula() %&gt;%\n        model.matrix(data = x$samples) %&gt;%\n        set_colnames(str_remove(colnames(.), \"group\"))\n})\n\n\ndisp_ruvr &lt;- map2(dge_ruvr, design_ruvr, \\(x, y){\n    estimateDisp(x, y)\n})\nplotBCV(disp_ruvr$k1)\n\n\n\n\n\n\n\n\n\nfit_ruvr &lt;- lapply(disp_ruvr, \\(x){\n    glmQLFit(x)\n})\nplotQLDisp(fit_ruvr$k1)\n\n\n\n\n\n\n\n\n\ntt_ruvr &lt;- map2(design_ruvr, fit_ruvr, \\(x, y){\n    colnames(x) %&gt;%\n        str_subset(\"Intercept\", negate = TRUE) %&gt;%\n        sapply(function(z){\n            glmQLFTest(y, coef = z) %&gt;%\n                topTags(n = Inf) %&gt;%\n                .[[\"table\"]] %&gt;%\n                rename_all(\n                    str_remove, pattern = \"ID.\"\n                ) %&gt;%\n                dplyr::select(\n                    Geneid = gene_id, Symbol = gene_name, gene_biotype, logFC, logCPM, F, \n                    P.Value = PValue, FDR\n                ) %&gt;%\n                as_tibble() %&gt;%\n                mutate(\n                    Bonf = p.adjust(P.Value, \"bonf\"), \n                    coef = z,\n                    DE = FDR &lt; 0.05\n                )\n        },\n        simplify = FALSE)\n})\n\n\ndisplayRes_de(tt_ruvr$k1$Heter)\n\n\n\n\ndisplayRes_de(tt_ruvr$k1$Hom)\n\n\n\n\ndisplayRes_de(tt_ruvr$k2$Heter)\n\n\n\n\ndisplayRes_de(tt_ruvr$k2$Hom)\n\n\n\n\ndisplayRes_de(tt_ruvr$k3$Heter)\n\n\n\n\ndisplayRes_de(tt_ruvr$k3$Hom)",
    "crumbs": [
      "RUV"
    ]
  }
]